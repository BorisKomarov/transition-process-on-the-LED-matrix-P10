
Matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c84  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005e10  08005e10  00015e10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006060  08006060  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08006060  08006060  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006060  08006060  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006064  08006064  00016064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08006068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000011b0  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001244  20001244  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006cbe  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001275  00000000  00000000  00026d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005e0  00000000  00000000  00027ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000548  00000000  00000000  000285d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bba8  00000000  00000000  00028b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000076b8  00000000  00000000  000446c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6880  00000000  00000000  0004bd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000f2600  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cf4  00000000  00000000  000f2654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005df4 	.word	0x08005df4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08005df4 	.word	0x08005df4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b94:	ed2d 8b02 	vpush	{d8}
 8000b98:	b08c      	sub	sp, #48	; 0x30
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  for (int i =0; i<16;i++){
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ba0:	e016      	b.n	8000bd0 <main+0x40>
	  data_11[i] =0xff;
 8000ba2:	4ad1      	ldr	r2, [pc, #836]	; (8000ee8 <main+0x358>)
 8000ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba6:	4413      	add	r3, r2
 8000ba8:	22ff      	movs	r2, #255	; 0xff
 8000baa:	701a      	strb	r2, [r3, #0]
	  data_10[i] =0xff;
 8000bac:	4acf      	ldr	r2, [pc, #828]	; (8000eec <main+0x35c>)
 8000bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb0:	4413      	add	r3, r2
 8000bb2:	22ff      	movs	r2, #255	; 0xff
 8000bb4:	701a      	strb	r2, [r3, #0]
	  data_01[i] =0xff;
 8000bb6:	4ace      	ldr	r2, [pc, #824]	; (8000ef0 <main+0x360>)
 8000bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bba:	4413      	add	r3, r2
 8000bbc:	22ff      	movs	r2, #255	; 0xff
 8000bbe:	701a      	strb	r2, [r3, #0]
	  data_00[i] =0xff;
 8000bc0:	4acc      	ldr	r2, [pc, #816]	; (8000ef4 <main+0x364>)
 8000bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc4:	4413      	add	r3, r2
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	701a      	strb	r2, [r3, #0]
  for (int i =0; i<16;i++){
 8000bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bcc:	3301      	adds	r3, #1
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd2:	2b0f      	cmp	r3, #15
 8000bd4:	dde5      	ble.n	8000ba2 <main+0x12>
  }
  w = sqrt(1-pow(psi,2))/T;
 8000bd6:	4bc8      	ldr	r3, [pc, #800]	; (8000ef8 <main+0x368>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fc58 	bl	8000490 <__aeabi_f2d>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	ed9f 1bbc 	vldr	d1, [pc, #752]	; 8000ed8 <main+0x348>
 8000be8:	ec43 2b10 	vmov	d0, r2, r3
 8000bec:	f003 f9c4 	bl	8003f78 <pow>
 8000bf0:	ec53 2b10 	vmov	r2, r3, d0
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	49c0      	ldr	r1, [pc, #768]	; (8000efc <main+0x36c>)
 8000bfa:	f7ff fae9 	bl	80001d0 <__aeabi_dsub>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	ec43 2b17 	vmov	d7, r2, r3
 8000c06:	eeb0 0a47 	vmov.f32	s0, s14
 8000c0a:	eef0 0a67 	vmov.f32	s1, s15
 8000c0e:	f003 fa61 	bl	80040d4 <sqrt>
 8000c12:	ec55 4b10 	vmov	r4, r5, d0
 8000c16:	4bba      	ldr	r3, [pc, #744]	; (8000f00 <main+0x370>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fc38 	bl	8000490 <__aeabi_f2d>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4620      	mov	r0, r4
 8000c26:	4629      	mov	r1, r5
 8000c28:	f7ff fdb4 	bl	8000794 <__aeabi_ddiv>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff ff5c 	bl	8000af0 <__aeabi_d2f>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4ab2      	ldr	r2, [pc, #712]	; (8000f04 <main+0x374>)
 8000c3c:	6013      	str	r3, [r2, #0]
  a = psi/T;
 8000c3e:	4bae      	ldr	r3, [pc, #696]	; (8000ef8 <main+0x368>)
 8000c40:	edd3 6a00 	vldr	s13, [r3]
 8000c44:	4bae      	ldr	r3, [pc, #696]	; (8000f00 <main+0x370>)
 8000c46:	ed93 7a00 	vldr	s14, [r3]
 8000c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c4e:	4bae      	ldr	r3, [pc, #696]	; (8000f08 <main+0x378>)
 8000c50:	edc3 7a00 	vstr	s15, [r3]
  pressed_flag = 0;
 8000c54:	4bad      	ldr	r3, [pc, #692]	; (8000f0c <main+0x37c>)
 8000c56:	f04f 0200 	mov.w	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
  imp_time = 0;
 8000c5c:	4bac      	ldr	r3, [pc, #688]	; (8000f10 <main+0x380>)
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
  imp = 0;
 8000c64:	4bab      	ldr	r3, [pc, #684]	; (8000f14 <main+0x384>)
 8000c66:	f04f 0200 	mov.w	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f001 f8d8 	bl	8001e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 fde2 	bl	8001838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 fee0 	bl	8001a38 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000c78:	f000 fe62 	bl	8001940 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000c7c:	f000 fe9e 	bl	80019bc <MX_SPI3_Init>
  MX_SPI1_Init();
 8000c80:	f000 fe20 	bl	80018c4 <MX_SPI1_Init>
//
//	  	  }
//	  	  time+=0.01;
//	  }

	  btn = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);
 8000c84:	2101      	movs	r1, #1
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f001 fbb3 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	4ba1      	ldr	r3, [pc, #644]	; (8000f18 <main+0x388>)
 8000c94:	601a      	str	r2, [r3, #0]
	  	  	if(btn){
 8000c96:	4ba0      	ldr	r3, [pc, #640]	; (8000f18 <main+0x388>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d007      	beq.n	8000cae <main+0x11e>
	  	  		pressed_flag = 1;
 8000c9e:	4b9b      	ldr	r3, [pc, #620]	; (8000f0c <main+0x37c>)
 8000ca0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ca4:	601a      	str	r2, [r3, #0]
	  	  		imp_time = time;
 8000ca6:	4b9d      	ldr	r3, [pc, #628]	; (8000f1c <main+0x38c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a99      	ldr	r2, [pc, #612]	; (8000f10 <main+0x380>)
 8000cac:	6013      	str	r3, [r2, #0]
	  	  	}



	  	  h = (k * (  1-pow(e,-psi*time/T) * (cos(w*time)+  (psi/sqrt(1-pow(psi,2)))*sin(w*time) )  ) )+pressed_flag*(k/1.7*((w+pow(a,2))/w)*sin(w*(time-imp_time))*pow(e,-a*(time-imp_time)));//расчёт значение переходной функции
 8000cae:	4b9c      	ldr	r3, [pc, #624]	; (8000f20 <main+0x390>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fbec 	bl	8000490 <__aeabi_f2d>
 8000cb8:	4604      	mov	r4, r0
 8000cba:	460d      	mov	r5, r1
 8000cbc:	4b99      	ldr	r3, [pc, #612]	; (8000f24 <main+0x394>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fbe5 	bl	8000490 <__aeabi_f2d>
 8000cc6:	4680      	mov	r8, r0
 8000cc8:	4689      	mov	r9, r1
 8000cca:	4b8b      	ldr	r3, [pc, #556]	; (8000ef8 <main+0x368>)
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	eeb1 7a67 	vneg.f32	s14, s15
 8000cd4:	4b91      	ldr	r3, [pc, #580]	; (8000f1c <main+0x38c>)
 8000cd6:	edd3 7a00 	vldr	s15, [r3]
 8000cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cde:	4b88      	ldr	r3, [pc, #544]	; (8000f00 <main+0x370>)
 8000ce0:	edd3 7a00 	vldr	s15, [r3]
 8000ce4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ce8:	ee16 0a90 	vmov	r0, s13
 8000cec:	f7ff fbd0 	bl	8000490 <__aeabi_f2d>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	ec43 2b11 	vmov	d1, r2, r3
 8000cf8:	ec49 8b10 	vmov	d0, r8, r9
 8000cfc:	f003 f93c 	bl	8003f78 <pow>
 8000d00:	ec5b ab10 	vmov	sl, fp, d0
 8000d04:	4b7f      	ldr	r3, [pc, #508]	; (8000f04 <main+0x374>)
 8000d06:	ed93 7a00 	vldr	s14, [r3]
 8000d0a:	4b84      	ldr	r3, [pc, #528]	; (8000f1c <main+0x38c>)
 8000d0c:	edd3 7a00 	vldr	s15, [r3]
 8000d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d14:	ee17 0a90 	vmov	r0, s15
 8000d18:	f7ff fbba 	bl	8000490 <__aeabi_f2d>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	ec43 2b10 	vmov	d0, r2, r3
 8000d24:	f003 f83c 	bl	8003da0 <cos>
 8000d28:	eeb0 8a40 	vmov.f32	s16, s0
 8000d2c:	eef0 8a60 	vmov.f32	s17, s1
 8000d30:	4b71      	ldr	r3, [pc, #452]	; (8000ef8 <main+0x368>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fbab 	bl	8000490 <__aeabi_f2d>
 8000d3a:	4680      	mov	r8, r0
 8000d3c:	4689      	mov	r9, r1
 8000d3e:	4b6e      	ldr	r3, [pc, #440]	; (8000ef8 <main+0x368>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fba4 	bl	8000490 <__aeabi_f2d>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8000ed8 <main+0x348>
 8000d50:	ec43 2b10 	vmov	d0, r2, r3
 8000d54:	f003 f910 	bl	8003f78 <pow>
 8000d58:	ec53 2b10 	vmov	r2, r3, d0
 8000d5c:	f04f 0000 	mov.w	r0, #0
 8000d60:	4966      	ldr	r1, [pc, #408]	; (8000efc <main+0x36c>)
 8000d62:	f7ff fa35 	bl	80001d0 <__aeabi_dsub>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	ec43 2b17 	vmov	d7, r2, r3
 8000d6e:	eeb0 0a47 	vmov.f32	s0, s14
 8000d72:	eef0 0a67 	vmov.f32	s1, s15
 8000d76:	f003 f9ad 	bl	80040d4 <sqrt>
 8000d7a:	ec53 2b10 	vmov	r2, r3, d0
 8000d7e:	4640      	mov	r0, r8
 8000d80:	4649      	mov	r1, r9
 8000d82:	f7ff fd07 	bl	8000794 <__aeabi_ddiv>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4690      	mov	r8, r2
 8000d8c:	4699      	mov	r9, r3
 8000d8e:	4b5d      	ldr	r3, [pc, #372]	; (8000f04 <main+0x374>)
 8000d90:	ed93 7a00 	vldr	s14, [r3]
 8000d94:	4b61      	ldr	r3, [pc, #388]	; (8000f1c <main+0x38c>)
 8000d96:	edd3 7a00 	vldr	s15, [r3]
 8000d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d9e:	ee17 0a90 	vmov	r0, s15
 8000da2:	f7ff fb75 	bl	8000490 <__aeabi_f2d>
 8000da6:	4602      	mov	r2, r0
 8000da8:	460b      	mov	r3, r1
 8000daa:	ec43 2b10 	vmov	d0, r2, r3
 8000dae:	f003 f88f 	bl	8003ed0 <sin>
 8000db2:	ec53 2b10 	vmov	r2, r3, d0
 8000db6:	4640      	mov	r0, r8
 8000db8:	4649      	mov	r1, r9
 8000dba:	f7ff fbc1 	bl	8000540 <__aeabi_dmul>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	ec51 0b18 	vmov	r0, r1, d8
 8000dc6:	f7ff fa05 	bl	80001d4 <__adddf3>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4650      	mov	r0, sl
 8000dd0:	4659      	mov	r1, fp
 8000dd2:	f7ff fbb5 	bl	8000540 <__aeabi_dmul>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	f04f 0000 	mov.w	r0, #0
 8000dde:	4947      	ldr	r1, [pc, #284]	; (8000efc <main+0x36c>)
 8000de0:	f7ff f9f6 	bl	80001d0 <__aeabi_dsub>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	4620      	mov	r0, r4
 8000dea:	4629      	mov	r1, r5
 8000dec:	f7ff fba8 	bl	8000540 <__aeabi_dmul>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4692      	mov	sl, r2
 8000df6:	469b      	mov	fp, r3
 8000df8:	4b44      	ldr	r3, [pc, #272]	; (8000f0c <main+0x37c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fb47 	bl	8000490 <__aeabi_f2d>
 8000e02:	4604      	mov	r4, r0
 8000e04:	460d      	mov	r5, r1
 8000e06:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <main+0x390>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb40 	bl	8000490 <__aeabi_f2d>
 8000e10:	a333      	add	r3, pc, #204	; (adr r3, 8000ee0 <main+0x350>)
 8000e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e16:	f7ff fcbd 	bl	8000794 <__aeabi_ddiv>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	e9c7 2300 	strd	r2, r3, [r7]
 8000e22:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <main+0x374>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fb32 	bl	8000490 <__aeabi_f2d>
 8000e2c:	4680      	mov	r8, r0
 8000e2e:	4689      	mov	r9, r1
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <main+0x378>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb2b 	bl	8000490 <__aeabi_f2d>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8000ed8 <main+0x348>
 8000e42:	ec43 2b10 	vmov	d0, r2, r3
 8000e46:	f003 f897 	bl	8003f78 <pow>
 8000e4a:	ec53 2b10 	vmov	r2, r3, d0
 8000e4e:	4640      	mov	r0, r8
 8000e50:	4649      	mov	r1, r9
 8000e52:	f7ff f9bf 	bl	80001d4 <__adddf3>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4690      	mov	r8, r2
 8000e5c:	4699      	mov	r9, r3
 8000e5e:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <main+0x374>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fb14 	bl	8000490 <__aeabi_f2d>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	4649      	mov	r1, r9
 8000e70:	f7ff fc90 	bl	8000794 <__aeabi_ddiv>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e7c:	f7ff fb60 	bl	8000540 <__aeabi_dmul>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4690      	mov	r8, r2
 8000e86:	4699      	mov	r9, r3
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <main+0x38c>)
 8000e8a:	ed93 7a00 	vldr	s14, [r3]
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <main+0x380>)
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <main+0x374>)
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea2:	ee17 0a90 	vmov	r0, s15
 8000ea6:	f7ff faf3 	bl	8000490 <__aeabi_f2d>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	ec43 2b10 	vmov	d0, r2, r3
 8000eb2:	f003 f80d 	bl	8003ed0 <sin>
 8000eb6:	ec53 2b10 	vmov	r2, r3, d0
 8000eba:	4640      	mov	r0, r8
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	f7ff fb3f 	bl	8000540 <__aeabi_dmul>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4690      	mov	r8, r2
 8000ec8:	4699      	mov	r9, r3
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <main+0x394>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fade 	bl	8000490 <__aeabi_f2d>
 8000ed4:	e028      	b.n	8000f28 <main+0x398>
 8000ed6:	bf00      	nop
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	40000000 	.word	0x40000000
 8000ee0:	33333333 	.word	0x33333333
 8000ee4:	3ffb3333 	.word	0x3ffb3333
 8000ee8:	200000d4 	.word	0x200000d4
 8000eec:	200009ac 	.word	0x200009ac
 8000ef0:	20000920 	.word	0x20000920
 8000ef4:	20000998 	.word	0x20000998
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	3ff00000 	.word	0x3ff00000
 8000f00:	2000000c 	.word	0x2000000c
 8000f04:	200000b0 	.word	0x200000b0
 8000f08:	20000a64 	.word	0x20000a64
 8000f0c:	200009bc 	.word	0x200009bc
 8000f10:	200000d0 	.word	0x200000d0
 8000f14:	200000cc 	.word	0x200000cc
 8000f18:	2000123c 	.word	0x2000123c
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000004 	.word	0x20000004
 8000f24:	20000010 	.word	0x20000010
 8000f28:	ec41 0b18 	vmov	d8, r0, r1
 8000f2c:	4bb0      	ldr	r3, [pc, #704]	; (80011f0 <main+0x660>)
 8000f2e:	edd3 7a00 	vldr	s15, [r3]
 8000f32:	eeb1 7a67 	vneg.f32	s14, s15
 8000f36:	4baf      	ldr	r3, [pc, #700]	; (80011f4 <main+0x664>)
 8000f38:	edd3 6a00 	vldr	s13, [r3]
 8000f3c:	4bae      	ldr	r3, [pc, #696]	; (80011f8 <main+0x668>)
 8000f3e:	edd3 7a00 	vldr	s15, [r3]
 8000f42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4a:	ee17 0a90 	vmov	r0, s15
 8000f4e:	f7ff fa9f 	bl	8000490 <__aeabi_f2d>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	ec43 2b11 	vmov	d1, r2, r3
 8000f5a:	eeb0 0a48 	vmov.f32	s0, s16
 8000f5e:	eef0 0a68 	vmov.f32	s1, s17
 8000f62:	f003 f809 	bl	8003f78 <pow>
 8000f66:	ec53 2b10 	vmov	r2, r3, d0
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	f7ff fae7 	bl	8000540 <__aeabi_dmul>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4620      	mov	r0, r4
 8000f78:	4629      	mov	r1, r5
 8000f7a:	f7ff fae1 	bl	8000540 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4650      	mov	r0, sl
 8000f84:	4659      	mov	r1, fp
 8000f86:	f7ff f925 	bl	80001d4 <__adddf3>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff fdad 	bl	8000af0 <__aeabi_d2f>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a98      	ldr	r2, [pc, #608]	; (80011fc <main+0x66c>)
 8000f9a:	6013      	str	r3, [r2, #0]
		  hk = round(h / step_h) * step_h; //квантование  значений функции
 8000f9c:	4b97      	ldr	r3, [pc, #604]	; (80011fc <main+0x66c>)
 8000f9e:	ed93 7a00 	vldr	s14, [r3]
 8000fa2:	4b97      	ldr	r3, [pc, #604]	; (8001200 <main+0x670>)
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fac:	ee16 0a90 	vmov	r0, s13
 8000fb0:	f7ff fa6e 	bl	8000490 <__aeabi_f2d>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	ec43 2b10 	vmov	d0, r2, r3
 8000fbc:	f002 ff40 	bl	8003e40 <round>
 8000fc0:	ec55 4b10 	vmov	r4, r5, d0
 8000fc4:	4b8e      	ldr	r3, [pc, #568]	; (8001200 <main+0x670>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fa61 	bl	8000490 <__aeabi_f2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff fab3 	bl	8000540 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fd85 	bl	8000af0 <__aeabi_d2f>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a86      	ldr	r2, [pc, #536]	; (8001204 <main+0x674>)
 8000fea:	6013      	str	r3, [r2, #0]
		  tk = round(time / step_time) * step_time; //квантование  времени
 8000fec:	4b81      	ldr	r3, [pc, #516]	; (80011f4 <main+0x664>)
 8000fee:	ed93 7a00 	vldr	s14, [r3]
 8000ff2:	4b85      	ldr	r3, [pc, #532]	; (8001208 <main+0x678>)
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ffc:	ee16 0a90 	vmov	r0, s13
 8001000:	f7ff fa46 	bl	8000490 <__aeabi_f2d>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	ec43 2b10 	vmov	d0, r2, r3
 800100c:	f002 ff18 	bl	8003e40 <round>
 8001010:	ec55 4b10 	vmov	r4, r5, d0
 8001014:	4b7c      	ldr	r3, [pc, #496]	; (8001208 <main+0x678>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa39 	bl	8000490 <__aeabi_f2d>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff fa8b 	bl	8000540 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fd5d 	bl	8000af0 <__aeabi_d2f>
 8001036:	4603      	mov	r3, r0
 8001038:	4a74      	ldr	r2, [pc, #464]	; (800120c <main+0x67c>)
 800103a:	6013      	str	r3, [r2, #0]
		  if(tk!= temp_tk || hk!= temp_hk){
 800103c:	4b73      	ldr	r3, [pc, #460]	; (800120c <main+0x67c>)
 800103e:	ed93 7a00 	vldr	s14, [r3]
 8001042:	4b73      	ldr	r3, [pc, #460]	; (8001210 <main+0x680>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	eeb4 7a67 	vcmp.f32	s14, s15
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	d10b      	bne.n	800106a <main+0x4da>
 8001052:	4b6c      	ldr	r3, [pc, #432]	; (8001204 <main+0x674>)
 8001054:	ed93 7a00 	vldr	s14, [r3]
 8001058:	4b6e      	ldr	r3, [pc, #440]	; (8001214 <main+0x684>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001066:	f000 8313 	beq.w	8001690 <main+0xb00>
			  temp_tk = tk;
 800106a:	4b68      	ldr	r3, [pc, #416]	; (800120c <main+0x67c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a68      	ldr	r2, [pc, #416]	; (8001210 <main+0x680>)
 8001070:	6013      	str	r3, [r2, #0]
			  temp_hk = hk;
 8001072:	4b64      	ldr	r3, [pc, #400]	; (8001204 <main+0x674>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a67      	ldr	r2, [pc, #412]	; (8001214 <main+0x684>)
 8001078:	6013      	str	r3, [r2, #0]
			  col = round(tk/step_time);
 800107a:	4b64      	ldr	r3, [pc, #400]	; (800120c <main+0x67c>)
 800107c:	ed93 7a00 	vldr	s14, [r3]
 8001080:	4b61      	ldr	r3, [pc, #388]	; (8001208 <main+0x678>)
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800108a:	ee16 0a90 	vmov	r0, s13
 800108e:	f7ff f9ff 	bl	8000490 <__aeabi_f2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	ec43 2b10 	vmov	d0, r2, r3
 800109a:	f002 fed1 	bl	8003e40 <round>
 800109e:	ec53 2b10 	vmov	r2, r3, d0
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fcfb 	bl	8000aa0 <__aeabi_d2iz>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a5a      	ldr	r2, [pc, #360]	; (8001218 <main+0x688>)
 80010ae:	6013      	str	r3, [r2, #0]
			  row = round(hk/step_h);
 80010b0:	4b54      	ldr	r3, [pc, #336]	; (8001204 <main+0x674>)
 80010b2:	ed93 7a00 	vldr	s14, [r3]
 80010b6:	4b52      	ldr	r3, [pc, #328]	; (8001200 <main+0x670>)
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010c0:	ee16 0a90 	vmov	r0, s13
 80010c4:	f7ff f9e4 	bl	8000490 <__aeabi_f2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	ec43 2b10 	vmov	d0, r2, r3
 80010d0:	f002 feb6 	bl	8003e40 <round>
 80010d4:	ec53 2b10 	vmov	r2, r3, d0
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fce0 	bl	8000aa0 <__aeabi_d2iz>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a4e      	ldr	r2, [pc, #312]	; (800121c <main+0x68c>)
 80010e4:	6013      	str	r3, [r2, #0]
			  diodes_byte = ~(mask>>(col%8));
 80010e6:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <main+0x690>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4b4a      	ldr	r3, [pc, #296]	; (8001218 <main+0x688>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	425a      	negs	r2, r3
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	f002 0207 	and.w	r2, r2, #7
 80010fa:	bf58      	it	pl
 80010fc:	4253      	negpl	r3, r2
 80010fe:	fa41 f303 	asr.w	r3, r1, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b46      	ldr	r3, [pc, #280]	; (8001224 <main+0x694>)
 800110a:	701a      	strb	r2, [r3, #0]
			  if(col<=31){
 800110c:	4b42      	ldr	r3, [pc, #264]	; (8001218 <main+0x688>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b1f      	cmp	r3, #31
 8001112:	f300 80b6 	bgt.w	8001282 <main+0x6f2>
				  if(row%4==0){
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <main+0x68c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d11a      	bne.n	8001158 <main+0x5c8>
					  data_11[4*(col/8)+row/4]&=diodes_byte;
 8001122:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <main+0x688>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	da00      	bge.n	800112c <main+0x59c>
 800112a:	3307      	adds	r3, #7
 800112c:	10db      	asrs	r3, r3, #3
 800112e:	461a      	mov	r2, r3
 8001130:	0091      	lsls	r1, r2, #2
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <main+0x68c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	da00      	bge.n	800113c <main+0x5ac>
 800113a:	3303      	adds	r3, #3
 800113c:	109b      	asrs	r3, r3, #2
 800113e:	4419      	add	r1, r3
 8001140:	4839      	ldr	r0, [pc, #228]	; (8001228 <main+0x698>)
 8001142:	5c40      	ldrb	r0, [r0, r1]
 8001144:	4937      	ldr	r1, [pc, #220]	; (8001224 <main+0x694>)
 8001146:	7809      	ldrb	r1, [r1, #0]
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	4413      	add	r3, r2
 800114c:	ea00 0201 	and.w	r2, r0, r1
 8001150:	b2d1      	uxtb	r1, r2
 8001152:	4a35      	ldr	r2, [pc, #212]	; (8001228 <main+0x698>)
 8001154:	54d1      	strb	r1, [r2, r3]
 8001156:	e29b      	b.n	8001690 <main+0xb00>
				  }
				  else if(row%4==1){
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <main+0x68c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	425a      	negs	r2, r3
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	bf58      	it	pl
 8001168:	4253      	negpl	r3, r2
 800116a:	2b01      	cmp	r3, #1
 800116c:	d11a      	bne.n	80011a4 <main+0x614>
					  data_01[4*(col/8)+row/4]&=diodes_byte;
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <main+0x688>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	da00      	bge.n	8001178 <main+0x5e8>
 8001176:	3307      	adds	r3, #7
 8001178:	10db      	asrs	r3, r3, #3
 800117a:	461a      	mov	r2, r3
 800117c:	0091      	lsls	r1, r2, #2
 800117e:	4b27      	ldr	r3, [pc, #156]	; (800121c <main+0x68c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	da00      	bge.n	8001188 <main+0x5f8>
 8001186:	3303      	adds	r3, #3
 8001188:	109b      	asrs	r3, r3, #2
 800118a:	4419      	add	r1, r3
 800118c:	4827      	ldr	r0, [pc, #156]	; (800122c <main+0x69c>)
 800118e:	5c40      	ldrb	r0, [r0, r1]
 8001190:	4924      	ldr	r1, [pc, #144]	; (8001224 <main+0x694>)
 8001192:	7809      	ldrb	r1, [r1, #0]
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	4413      	add	r3, r2
 8001198:	ea00 0201 	and.w	r2, r0, r1
 800119c:	b2d1      	uxtb	r1, r2
 800119e:	4a23      	ldr	r2, [pc, #140]	; (800122c <main+0x69c>)
 80011a0:	54d1      	strb	r1, [r2, r3]
 80011a2:	e275      	b.n	8001690 <main+0xb00>
				  }
				  else if(row%4==2){
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <main+0x68c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	425a      	negs	r2, r3
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	f002 0203 	and.w	r2, r2, #3
 80011b2:	bf58      	it	pl
 80011b4:	4253      	negpl	r3, r2
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d13c      	bne.n	8001234 <main+0x6a4>
					  data_10[4*(col/8)+row/4]&=diodes_byte;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <main+0x688>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	da00      	bge.n	80011c4 <main+0x634>
 80011c2:	3307      	adds	r3, #7
 80011c4:	10db      	asrs	r3, r3, #3
 80011c6:	461a      	mov	r2, r3
 80011c8:	0091      	lsls	r1, r2, #2
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <main+0x68c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da00      	bge.n	80011d4 <main+0x644>
 80011d2:	3303      	adds	r3, #3
 80011d4:	109b      	asrs	r3, r3, #2
 80011d6:	4419      	add	r1, r3
 80011d8:	4815      	ldr	r0, [pc, #84]	; (8001230 <main+0x6a0>)
 80011da:	5c40      	ldrb	r0, [r0, r1]
 80011dc:	4911      	ldr	r1, [pc, #68]	; (8001224 <main+0x694>)
 80011de:	7809      	ldrb	r1, [r1, #0]
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	ea00 0201 	and.w	r2, r0, r1
 80011e8:	b2d1      	uxtb	r1, r2
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <main+0x6a0>)
 80011ec:	54d1      	strb	r1, [r2, r3]
 80011ee:	e24f      	b.n	8001690 <main+0xb00>
 80011f0:	20000a64 	.word	0x20000a64
 80011f4:	20000000 	.word	0x20000000
 80011f8:	200000d0 	.word	0x200000d0
 80011fc:	200000b4 	.word	0x200000b4
 8001200:	20000014 	.word	0x20000014
 8001204:	200000b8 	.word	0x200000b8
 8001208:	20000018 	.word	0x20000018
 800120c:	200000bc 	.word	0x200000bc
 8001210:	20000a68 	.word	0x20000a68
 8001214:	200000e4 	.word	0x200000e4
 8001218:	200000c4 	.word	0x200000c4
 800121c:	200000c0 	.word	0x200000c0
 8001220:	2000001c 	.word	0x2000001c
 8001224:	200009a9 	.word	0x200009a9
 8001228:	200000d4 	.word	0x200000d4
 800122c:	20000920 	.word	0x20000920
 8001230:	200009ac 	.word	0x200009ac
				  }
				  else if(row%4==3){
 8001234:	4b93      	ldr	r3, [pc, #588]	; (8001484 <main+0x8f4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	425a      	negs	r2, r3
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	bf58      	it	pl
 8001244:	4253      	negpl	r3, r2
 8001246:	2b03      	cmp	r3, #3
 8001248:	f040 8222 	bne.w	8001690 <main+0xb00>
					  data_00[4*(col/8)+row/4]&=diodes_byte;
 800124c:	4b8e      	ldr	r3, [pc, #568]	; (8001488 <main+0x8f8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	da00      	bge.n	8001256 <main+0x6c6>
 8001254:	3307      	adds	r3, #7
 8001256:	10db      	asrs	r3, r3, #3
 8001258:	461a      	mov	r2, r3
 800125a:	0091      	lsls	r1, r2, #2
 800125c:	4b89      	ldr	r3, [pc, #548]	; (8001484 <main+0x8f4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	da00      	bge.n	8001266 <main+0x6d6>
 8001264:	3303      	adds	r3, #3
 8001266:	109b      	asrs	r3, r3, #2
 8001268:	4419      	add	r1, r3
 800126a:	4888      	ldr	r0, [pc, #544]	; (800148c <main+0x8fc>)
 800126c:	5c40      	ldrb	r0, [r0, r1]
 800126e:	4988      	ldr	r1, [pc, #544]	; (8001490 <main+0x900>)
 8001270:	7809      	ldrb	r1, [r1, #0]
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4413      	add	r3, r2
 8001276:	ea00 0201 	and.w	r2, r0, r1
 800127a:	b2d1      	uxtb	r1, r2
 800127c:	4a83      	ldr	r2, [pc, #524]	; (800148c <main+0x8fc>)
 800127e:	54d1      	strb	r1, [r2, r3]
 8001280:	e206      	b.n	8001690 <main+0xb00>
				  }
			  }
			  else{
				  for(int i =0;i<12;i++){
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
 8001286:	e022      	b.n	80012ce <main+0x73e>
					  shifted_bit = (data_11[i+4] >> 7) & 1;
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128a:	3304      	adds	r3, #4
 800128c:	4a81      	ldr	r2, [pc, #516]	; (8001494 <main+0x904>)
 800128e:	5cd3      	ldrb	r3, [r2, r3]
 8001290:	09db      	lsrs	r3, r3, #7
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b80      	ldr	r3, [pc, #512]	; (8001498 <main+0x908>)
 8001296:	701a      	strb	r2, [r3, #0]
					  data_11[i]<<=1;
 8001298:	4a7e      	ldr	r2, [pc, #504]	; (8001494 <main+0x904>)
 800129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	b2d9      	uxtb	r1, r3
 80012a4:	4a7b      	ldr	r2, [pc, #492]	; (8001494 <main+0x904>)
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	4413      	add	r3, r2
 80012aa:	460a      	mov	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
					  data_11[i]|=shifted_bit;
 80012ae:	4a79      	ldr	r2, [pc, #484]	; (8001494 <main+0x904>)
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	4413      	add	r3, r2
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	4b78      	ldr	r3, [pc, #480]	; (8001498 <main+0x908>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b2d9      	uxtb	r1, r3
 80012be:	4a75      	ldr	r2, [pc, #468]	; (8001494 <main+0x904>)
 80012c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c2:	4413      	add	r3, r2
 80012c4:	460a      	mov	r2, r1
 80012c6:	701a      	strb	r2, [r3, #0]
				  for(int i =0;i<12;i++){
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	3301      	adds	r3, #1
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d0:	2b0b      	cmp	r3, #11
 80012d2:	ddd9      	ble.n	8001288 <main+0x6f8>
				  }
				  for(int i =0;i<12;i++){
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
 80012d8:	e022      	b.n	8001320 <main+0x790>
					  shifted_bit = (data_10[i+4] >> 7) & 1;
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	3304      	adds	r3, #4
 80012de:	4a6f      	ldr	r2, [pc, #444]	; (800149c <main+0x90c>)
 80012e0:	5cd3      	ldrb	r3, [r2, r3]
 80012e2:	09db      	lsrs	r3, r3, #7
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b6c      	ldr	r3, [pc, #432]	; (8001498 <main+0x908>)
 80012e8:	701a      	strb	r2, [r3, #0]
					  data_10[i]<<=1;
 80012ea:	4a6c      	ldr	r2, [pc, #432]	; (800149c <main+0x90c>)
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	4413      	add	r3, r2
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	b2d9      	uxtb	r1, r3
 80012f6:	4a69      	ldr	r2, [pc, #420]	; (800149c <main+0x90c>)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	4413      	add	r3, r2
 80012fc:	460a      	mov	r2, r1
 80012fe:	701a      	strb	r2, [r3, #0]
					  data_10[i]|=shifted_bit;
 8001300:	4a66      	ldr	r2, [pc, #408]	; (800149c <main+0x90c>)
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	4413      	add	r3, r2
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	4b63      	ldr	r3, [pc, #396]	; (8001498 <main+0x908>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4313      	orrs	r3, r2
 800130e:	b2d9      	uxtb	r1, r3
 8001310:	4a62      	ldr	r2, [pc, #392]	; (800149c <main+0x90c>)
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	4413      	add	r3, r2
 8001316:	460a      	mov	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
				  for(int i =0;i<12;i++){
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	3301      	adds	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	2b0b      	cmp	r3, #11
 8001324:	ddd9      	ble.n	80012da <main+0x74a>
				  }
				  for(int i =0;i<12;i++){
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
 800132a:	e022      	b.n	8001372 <main+0x7e2>
					  shifted_bit = (data_01[i+4] >> 7) & 1;
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	3304      	adds	r3, #4
 8001330:	4a5b      	ldr	r2, [pc, #364]	; (80014a0 <main+0x910>)
 8001332:	5cd3      	ldrb	r3, [r2, r3]
 8001334:	09db      	lsrs	r3, r3, #7
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b57      	ldr	r3, [pc, #348]	; (8001498 <main+0x908>)
 800133a:	701a      	strb	r2, [r3, #0]
					  data_01[i]<<=1;
 800133c:	4a58      	ldr	r2, [pc, #352]	; (80014a0 <main+0x910>)
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	b2d9      	uxtb	r1, r3
 8001348:	4a55      	ldr	r2, [pc, #340]	; (80014a0 <main+0x910>)
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	4413      	add	r3, r2
 800134e:	460a      	mov	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
					  data_01[i]|=shifted_bit;
 8001352:	4a53      	ldr	r2, [pc, #332]	; (80014a0 <main+0x910>)
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	4413      	add	r3, r2
 8001358:	781a      	ldrb	r2, [r3, #0]
 800135a:	4b4f      	ldr	r3, [pc, #316]	; (8001498 <main+0x908>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	b2d9      	uxtb	r1, r3
 8001362:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <main+0x910>)
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	4413      	add	r3, r2
 8001368:	460a      	mov	r2, r1
 800136a:	701a      	strb	r2, [r3, #0]
				  for(int i =0;i<12;i++){
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	3301      	adds	r3, #1
 8001370:	623b      	str	r3, [r7, #32]
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	2b0b      	cmp	r3, #11
 8001376:	ddd9      	ble.n	800132c <main+0x79c>
				  }
				  for(int i =0;i<12;i++){
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	e022      	b.n	80013c4 <main+0x834>
					  shifted_bit = (data_00[i+4] >> 7) & 1;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	4a42      	ldr	r2, [pc, #264]	; (800148c <main+0x8fc>)
 8001384:	5cd3      	ldrb	r3, [r2, r3]
 8001386:	09db      	lsrs	r3, r3, #7
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b43      	ldr	r3, [pc, #268]	; (8001498 <main+0x908>)
 800138c:	701a      	strb	r2, [r3, #0]
					  data_00[i]<<=1;
 800138e:	4a3f      	ldr	r2, [pc, #252]	; (800148c <main+0x8fc>)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	b2d9      	uxtb	r1, r3
 800139a:	4a3c      	ldr	r2, [pc, #240]	; (800148c <main+0x8fc>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	4413      	add	r3, r2
 80013a0:	460a      	mov	r2, r1
 80013a2:	701a      	strb	r2, [r3, #0]
					  data_00[i]|=shifted_bit;
 80013a4:	4a39      	ldr	r2, [pc, #228]	; (800148c <main+0x8fc>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	4413      	add	r3, r2
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <main+0x908>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b2d9      	uxtb	r1, r3
 80013b4:	4a35      	ldr	r2, [pc, #212]	; (800148c <main+0x8fc>)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	4413      	add	r3, r2
 80013ba:	460a      	mov	r2, r1
 80013bc:	701a      	strb	r2, [r3, #0]
				  for(int i =0;i<12;i++){
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0b      	cmp	r3, #11
 80013c8:	ddd9      	ble.n	800137e <main+0x7ee>





				  for(int i =0;i<3;i++){
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	e017      	b.n	8001400 <main+0x870>
					  data_11[12+i]<<=1;
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	330c      	adds	r3, #12
 80013d4:	4a2f      	ldr	r2, [pc, #188]	; (8001494 <main+0x904>)
 80013d6:	5cd2      	ldrb	r2, [r2, r3]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	330c      	adds	r3, #12
 80013dc:	0052      	lsls	r2, r2, #1
 80013de:	b2d1      	uxtb	r1, r2
 80013e0:	4a2c      	ldr	r2, [pc, #176]	; (8001494 <main+0x904>)
 80013e2:	54d1      	strb	r1, [r2, r3]
					  data_11[12+i]|=0b00000001;
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	330c      	adds	r3, #12
 80013e8:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <main+0x904>)
 80013ea:	5cd2      	ldrb	r2, [r2, r3]
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	330c      	adds	r3, #12
 80013f0:	f042 0201 	orr.w	r2, r2, #1
 80013f4:	b2d1      	uxtb	r1, r2
 80013f6:	4a27      	ldr	r2, [pc, #156]	; (8001494 <main+0x904>)
 80013f8:	54d1      	strb	r1, [r2, r3]
				  for(int i =0;i<3;i++){
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	3301      	adds	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b02      	cmp	r3, #2
 8001404:	dde4      	ble.n	80013d0 <main+0x840>
				  }
				  for(int i =0;i<3;i++){
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e017      	b.n	800143c <main+0x8ac>
					  data_10[12+i]<<=1;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	330c      	adds	r3, #12
 8001410:	4a22      	ldr	r2, [pc, #136]	; (800149c <main+0x90c>)
 8001412:	5cd2      	ldrb	r2, [r2, r3]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	330c      	adds	r3, #12
 8001418:	0052      	lsls	r2, r2, #1
 800141a:	b2d1      	uxtb	r1, r2
 800141c:	4a1f      	ldr	r2, [pc, #124]	; (800149c <main+0x90c>)
 800141e:	54d1      	strb	r1, [r2, r3]
					  data_10[12+i]|=0b00000001;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	330c      	adds	r3, #12
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <main+0x90c>)
 8001426:	5cd2      	ldrb	r2, [r2, r3]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	330c      	adds	r3, #12
 800142c:	f042 0201 	orr.w	r2, r2, #1
 8001430:	b2d1      	uxtb	r1, r2
 8001432:	4a1a      	ldr	r2, [pc, #104]	; (800149c <main+0x90c>)
 8001434:	54d1      	strb	r1, [r2, r3]
				  for(int i =0;i<3;i++){
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2b02      	cmp	r3, #2
 8001440:	dde4      	ble.n	800140c <main+0x87c>
				  }
				  for(int i =0;i<3;i++){
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	e017      	b.n	8001478 <main+0x8e8>
					  data_01[12+i]<<=1;
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	330c      	adds	r3, #12
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <main+0x910>)
 800144e:	5cd2      	ldrb	r2, [r2, r3]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	330c      	adds	r3, #12
 8001454:	0052      	lsls	r2, r2, #1
 8001456:	b2d1      	uxtb	r1, r2
 8001458:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <main+0x910>)
 800145a:	54d1      	strb	r1, [r2, r3]
					  data_01[12+i]|=0b00000001;
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	330c      	adds	r3, #12
 8001460:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <main+0x910>)
 8001462:	5cd2      	ldrb	r2, [r2, r3]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	330c      	adds	r3, #12
 8001468:	f042 0201 	orr.w	r2, r2, #1
 800146c:	b2d1      	uxtb	r1, r2
 800146e:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <main+0x910>)
 8001470:	54d1      	strb	r1, [r2, r3]
				  for(int i =0;i<3;i++){
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	3301      	adds	r3, #1
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	2b02      	cmp	r3, #2
 800147c:	dde4      	ble.n	8001448 <main+0x8b8>
				  }
				  for(int i =0;i<3;i++){
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	e027      	b.n	80014d4 <main+0x944>
 8001484:	200000c0 	.word	0x200000c0
 8001488:	200000c4 	.word	0x200000c4
 800148c:	20000998 	.word	0x20000998
 8001490:	200009a9 	.word	0x200009a9
 8001494:	200000d4 	.word	0x200000d4
 8001498:	200009a8 	.word	0x200009a8
 800149c:	200009ac 	.word	0x200009ac
 80014a0:	20000920 	.word	0x20000920
					  data_00[12+i]<<=1;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	330c      	adds	r3, #12
 80014a8:	4aa9      	ldr	r2, [pc, #676]	; (8001750 <main+0xbc0>)
 80014aa:	5cd2      	ldrb	r2, [r2, r3]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	330c      	adds	r3, #12
 80014b0:	0052      	lsls	r2, r2, #1
 80014b2:	b2d1      	uxtb	r1, r2
 80014b4:	4aa6      	ldr	r2, [pc, #664]	; (8001750 <main+0xbc0>)
 80014b6:	54d1      	strb	r1, [r2, r3]
					  data_00[12+i]|=0b00000001;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	330c      	adds	r3, #12
 80014bc:	4aa4      	ldr	r2, [pc, #656]	; (8001750 <main+0xbc0>)
 80014be:	5cd2      	ldrb	r2, [r2, r3]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	330c      	adds	r3, #12
 80014c4:	f042 0201 	orr.w	r2, r2, #1
 80014c8:	b2d1      	uxtb	r1, r2
 80014ca:	4aa1      	ldr	r2, [pc, #644]	; (8001750 <main+0xbc0>)
 80014cc:	54d1      	strb	r1, [r2, r3]
				  for(int i =0;i<3;i++){
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3301      	adds	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	dde4      	ble.n	80014a4 <main+0x914>
				  }



				  if(row%4==0){
 80014da:	4b9e      	ldr	r3, [pc, #632]	; (8001754 <main+0xbc4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d12c      	bne.n	8001540 <main+0x9b0>

					  shifted_bit =((diodes_byte <<col%8)>>7) & 1;
 80014e6:	4b9c      	ldr	r3, [pc, #624]	; (8001758 <main+0xbc8>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4b9b      	ldr	r3, [pc, #620]	; (800175c <main+0xbcc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	425a      	negs	r2, r3
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	f002 0207 	and.w	r2, r2, #7
 80014fa:	bf58      	it	pl
 80014fc:	4253      	negpl	r3, r2
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	11db      	asrs	r3, r3, #7
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b94      	ldr	r3, [pc, #592]	; (8001760 <main+0xbd0>)
 800150e:	701a      	strb	r2, [r3, #0]
					  shifted_bit|=0b11111110;
 8001510:	4b93      	ldr	r3, [pc, #588]	; (8001760 <main+0xbd0>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f063 0301 	orn	r3, r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b91      	ldr	r3, [pc, #580]	; (8001760 <main+0xbd0>)
 800151c:	701a      	strb	r2, [r3, #0]
					  data_11[12+row/4]&=shifted_bit;
 800151e:	4b8d      	ldr	r3, [pc, #564]	; (8001754 <main+0xbc4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	da00      	bge.n	8001528 <main+0x998>
 8001526:	3303      	adds	r3, #3
 8001528:	109b      	asrs	r3, r3, #2
 800152a:	f103 020c 	add.w	r2, r3, #12
 800152e:	498d      	ldr	r1, [pc, #564]	; (8001764 <main+0xbd4>)
 8001530:	5c89      	ldrb	r1, [r1, r2]
 8001532:	4a8b      	ldr	r2, [pc, #556]	; (8001760 <main+0xbd0>)
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	330c      	adds	r3, #12
 8001538:	400a      	ands	r2, r1
 800153a:	b2d1      	uxtb	r1, r2
 800153c:	4a89      	ldr	r2, [pc, #548]	; (8001764 <main+0xbd4>)
 800153e:	54d1      	strb	r1, [r2, r3]
				  }
				  if(row%4==1){
 8001540:	4b84      	ldr	r3, [pc, #528]	; (8001754 <main+0xbc4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	425a      	negs	r2, r3
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	f002 0203 	and.w	r2, r2, #3
 800154e:	bf58      	it	pl
 8001550:	4253      	negpl	r3, r2
 8001552:	2b01      	cmp	r3, #1
 8001554:	d12c      	bne.n	80015b0 <main+0xa20>

					  shifted_bit =((diodes_byte <<col%8)>>7) & 1;
 8001556:	4b80      	ldr	r3, [pc, #512]	; (8001758 <main+0xbc8>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	4b7f      	ldr	r3, [pc, #508]	; (800175c <main+0xbcc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	425a      	negs	r2, r3
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	f002 0207 	and.w	r2, r2, #7
 800156a:	bf58      	it	pl
 800156c:	4253      	negpl	r3, r2
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	11db      	asrs	r3, r3, #7
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b78      	ldr	r3, [pc, #480]	; (8001760 <main+0xbd0>)
 800157e:	701a      	strb	r2, [r3, #0]
					  shifted_bit|=0b11111110;
 8001580:	4b77      	ldr	r3, [pc, #476]	; (8001760 <main+0xbd0>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	f063 0301 	orn	r3, r3, #1
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b75      	ldr	r3, [pc, #468]	; (8001760 <main+0xbd0>)
 800158c:	701a      	strb	r2, [r3, #0]
					  data_01[12+row/4]&=shifted_bit;
 800158e:	4b71      	ldr	r3, [pc, #452]	; (8001754 <main+0xbc4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	da00      	bge.n	8001598 <main+0xa08>
 8001596:	3303      	adds	r3, #3
 8001598:	109b      	asrs	r3, r3, #2
 800159a:	f103 020c 	add.w	r2, r3, #12
 800159e:	4972      	ldr	r1, [pc, #456]	; (8001768 <main+0xbd8>)
 80015a0:	5c89      	ldrb	r1, [r1, r2]
 80015a2:	4a6f      	ldr	r2, [pc, #444]	; (8001760 <main+0xbd0>)
 80015a4:	7812      	ldrb	r2, [r2, #0]
 80015a6:	330c      	adds	r3, #12
 80015a8:	400a      	ands	r2, r1
 80015aa:	b2d1      	uxtb	r1, r2
 80015ac:	4a6e      	ldr	r2, [pc, #440]	; (8001768 <main+0xbd8>)
 80015ae:	54d1      	strb	r1, [r2, r3]
				  }
				  if(row%4==2){
 80015b0:	4b68      	ldr	r3, [pc, #416]	; (8001754 <main+0xbc4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	425a      	negs	r2, r3
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	f002 0203 	and.w	r2, r2, #3
 80015be:	bf58      	it	pl
 80015c0:	4253      	negpl	r3, r2
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d12c      	bne.n	8001620 <main+0xa90>

					  shifted_bit =((diodes_byte <<col%8)>>7) & 1;
 80015c6:	4b64      	ldr	r3, [pc, #400]	; (8001758 <main+0xbc8>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	4b63      	ldr	r3, [pc, #396]	; (800175c <main+0xbcc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	425a      	negs	r2, r3
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	f002 0207 	and.w	r2, r2, #7
 80015da:	bf58      	it	pl
 80015dc:	4253      	negpl	r3, r2
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	11db      	asrs	r3, r3, #7
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <main+0xbd0>)
 80015ee:	701a      	strb	r2, [r3, #0]
					  shifted_bit|=0b11111110;
 80015f0:	4b5b      	ldr	r3, [pc, #364]	; (8001760 <main+0xbd0>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	f063 0301 	orn	r3, r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b59      	ldr	r3, [pc, #356]	; (8001760 <main+0xbd0>)
 80015fc:	701a      	strb	r2, [r3, #0]
					  data_10[12+row/4]&=shifted_bit;
 80015fe:	4b55      	ldr	r3, [pc, #340]	; (8001754 <main+0xbc4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	da00      	bge.n	8001608 <main+0xa78>
 8001606:	3303      	adds	r3, #3
 8001608:	109b      	asrs	r3, r3, #2
 800160a:	f103 020c 	add.w	r2, r3, #12
 800160e:	4957      	ldr	r1, [pc, #348]	; (800176c <main+0xbdc>)
 8001610:	5c89      	ldrb	r1, [r1, r2]
 8001612:	4a53      	ldr	r2, [pc, #332]	; (8001760 <main+0xbd0>)
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	330c      	adds	r3, #12
 8001618:	400a      	ands	r2, r1
 800161a:	b2d1      	uxtb	r1, r2
 800161c:	4a53      	ldr	r2, [pc, #332]	; (800176c <main+0xbdc>)
 800161e:	54d1      	strb	r1, [r2, r3]
				  }
				  if(row%4==3){
 8001620:	4b4c      	ldr	r3, [pc, #304]	; (8001754 <main+0xbc4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	425a      	negs	r2, r3
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	f002 0203 	and.w	r2, r2, #3
 800162e:	bf58      	it	pl
 8001630:	4253      	negpl	r3, r2
 8001632:	2b03      	cmp	r3, #3
 8001634:	d12c      	bne.n	8001690 <main+0xb00>

					  shifted_bit =((diodes_byte <<col%8)>>7) & 1;
 8001636:	4b48      	ldr	r3, [pc, #288]	; (8001758 <main+0xbc8>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4619      	mov	r1, r3
 800163c:	4b47      	ldr	r3, [pc, #284]	; (800175c <main+0xbcc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	425a      	negs	r2, r3
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	f002 0207 	and.w	r2, r2, #7
 800164a:	bf58      	it	pl
 800164c:	4253      	negpl	r3, r2
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	11db      	asrs	r3, r3, #7
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b40      	ldr	r3, [pc, #256]	; (8001760 <main+0xbd0>)
 800165e:	701a      	strb	r2, [r3, #0]
					  shifted_bit|=0b11111110;
 8001660:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <main+0xbd0>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	f063 0301 	orn	r3, r3, #1
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <main+0xbd0>)
 800166c:	701a      	strb	r2, [r3, #0]
					  data_00[12+row/4]&=shifted_bit;
 800166e:	4b39      	ldr	r3, [pc, #228]	; (8001754 <main+0xbc4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	da00      	bge.n	8001678 <main+0xae8>
 8001676:	3303      	adds	r3, #3
 8001678:	109b      	asrs	r3, r3, #2
 800167a:	f103 020c 	add.w	r2, r3, #12
 800167e:	4934      	ldr	r1, [pc, #208]	; (8001750 <main+0xbc0>)
 8001680:	5c89      	ldrb	r1, [r1, r2]
 8001682:	4a37      	ldr	r2, [pc, #220]	; (8001760 <main+0xbd0>)
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	330c      	adds	r3, #12
 8001688:	400a      	ands	r2, r1
 800168a:	b2d1      	uxtb	r1, r2
 800168c:	4a30      	ldr	r2, [pc, #192]	; (8001750 <main+0xbc0>)
 800168e:	54d1      	strb	r1, [r2, r3]
			  }



		  }
		  time+=0.01;
 8001690:	4b37      	ldr	r3, [pc, #220]	; (8001770 <main+0xbe0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fefb 	bl	8000490 <__aeabi_f2d>
 800169a:	a32b      	add	r3, pc, #172	; (adr r3, 8001748 <main+0xbb8>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe fd98 	bl	80001d4 <__adddf3>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fa20 	bl	8000af0 <__aeabi_d2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <main+0xbe0>)
 80016b4:	6013      	str	r3, [r2, #0]




	  //	//смена значений A и B
	      A = (AB_counter % 2 == 0) ? 1 : 0;
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <main+0xbe4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf0c      	ite	eq
 80016c2:	2301      	moveq	r3, #1
 80016c4:	2300      	movne	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <main+0xbe8>)
 80016cc:	601a      	str	r2, [r3, #0]
	      B = (AB_counter / 2 % 2 == 0) ? 1 : 0;
 80016ce:	4b29      	ldr	r3, [pc, #164]	; (8001774 <main+0xbe4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0fda      	lsrs	r2, r3, #31
 80016d4:	4413      	add	r3, r2
 80016d6:	105b      	asrs	r3, r3, #1
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <main+0xbec>)
 80016ea:	601a      	str	r2, [r3, #0]
	      AB_counter = (AB_counter + 1) % 4;
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <main+0xbe4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	3301      	adds	r3, #1
 80016f2:	425a      	negs	r2, r3
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	f002 0203 	and.w	r2, r2, #3
 80016fc:	bf58      	it	pl
 80016fe:	4253      	negpl	r3, r2
 8001700:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <main+0xbe4>)
 8001702:	6013      	str	r3, [r2, #0]



	  HAL_GPIO_WritePin(NOE_GPIO_Port, NOE_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800170a:	481d      	ldr	r0, [pc, #116]	; (8001780 <main+0xbf0>)
 800170c:	f000 fe8a 	bl	8002424 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, A);
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <main+0xbe8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	2120      	movs	r1, #32
 800171a:	481a      	ldr	r0, [pc, #104]	; (8001784 <main+0xbf4>)
 800171c:	f000 fe82 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, B);
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <main+0xbec>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	2102      	movs	r1, #2
 800172a:	4817      	ldr	r0, [pc, #92]	; (8001788 <main+0xbf8>)
 800172c:	f000 fe7a 	bl	8002424 <HAL_GPIO_WritePin>

      //Отправка данных в зависимости от уровней A и B
      if(A==1 && B==1){
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <main+0xbe8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d12f      	bne.n	8001798 <main+0xc08>
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <main+0xbec>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d12b      	bne.n	8001798 <main+0xc08>
 8001740:	e024      	b.n	800178c <main+0xbfc>
 8001742:	bf00      	nop
 8001744:	f3af 8000 	nop.w
 8001748:	47ae147b 	.word	0x47ae147b
 800174c:	3f847ae1 	.word	0x3f847ae1
 8001750:	20000998 	.word	0x20000998
 8001754:	200000c0 	.word	0x200000c0
 8001758:	200009a9 	.word	0x200009a9
 800175c:	200000c4 	.word	0x200000c4
 8001760:	200009a8 	.word	0x200009a8
 8001764:	200000d4 	.word	0x200000d4
 8001768:	20000920 	.word	0x20000920
 800176c:	200009ac 	.word	0x200009ac
 8001770:	20000000 	.word	0x20000000
 8001774:	200000c8 	.word	0x200000c8
 8001778:	2000014c 	.word	0x2000014c
 800177c:	20000994 	.word	0x20000994
 8001780:	48001000 	.word	0x48001000
 8001784:	48000800 	.word	0x48000800
 8001788:	48000400 	.word	0x48000400
      	HAL_SPI_Transmit(&hspi2, &data_11, 16,10);
 800178c:	230a      	movs	r3, #10
 800178e:	2210      	movs	r2, #16
 8001790:	4921      	ldr	r1, [pc, #132]	; (8001818 <main+0xc88>)
 8001792:	4822      	ldr	r0, [pc, #136]	; (800181c <main+0xc8c>)
 8001794:	f001 fff7 	bl	8003786 <HAL_SPI_Transmit>
      }
      if(A==0 && B==1){
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <main+0xc90>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <main+0xc24>
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <main+0xc94>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d105      	bne.n	80017b4 <main+0xc24>
      	HAL_SPI_Transmit(&hspi2, &data_01, 16,10);
 80017a8:	230a      	movs	r3, #10
 80017aa:	2210      	movs	r2, #16
 80017ac:	491e      	ldr	r1, [pc, #120]	; (8001828 <main+0xc98>)
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <main+0xc8c>)
 80017b0:	f001 ffe9 	bl	8003786 <HAL_SPI_Transmit>
      }
      if(A==1 && B==0){
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <main+0xc90>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d109      	bne.n	80017d0 <main+0xc40>
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <main+0xc94>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d105      	bne.n	80017d0 <main+0xc40>
      	HAL_SPI_Transmit(&hspi2, &data_10, 16,10);
 80017c4:	230a      	movs	r3, #10
 80017c6:	2210      	movs	r2, #16
 80017c8:	4918      	ldr	r1, [pc, #96]	; (800182c <main+0xc9c>)
 80017ca:	4814      	ldr	r0, [pc, #80]	; (800181c <main+0xc8c>)
 80017cc:	f001 ffdb 	bl	8003786 <HAL_SPI_Transmit>
      }
      if(A==0 && B==0){
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <main+0xc90>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <main+0xc5c>
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <main+0xc94>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d105      	bne.n	80017ec <main+0xc5c>
      	HAL_SPI_Transmit(&hspi2, &data_00, 16,10);
 80017e0:	230a      	movs	r3, #10
 80017e2:	2210      	movs	r2, #16
 80017e4:	4912      	ldr	r1, [pc, #72]	; (8001830 <main+0xca0>)
 80017e6:	480d      	ldr	r0, [pc, #52]	; (800181c <main+0xc8c>)
 80017e8:	f001 ffcd 	bl	8003786 <HAL_SPI_Transmit>
      }

	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	4810      	ldr	r0, [pc, #64]	; (8001834 <main+0xca4>)
 80017f2:	f000 fe17 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	480e      	ldr	r0, [pc, #56]	; (8001834 <main+0xca4>)
 80017fc:	f000 fe12 	bl	8002424 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(NOE_GPIO_Port, NOE_Pin, GPIO_PIN_SET);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001806:	480b      	ldr	r0, [pc, #44]	; (8001834 <main+0xca4>)
 8001808:	f000 fe0c 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800180c:	2001      	movs	r0, #1
 800180e:	f000 fb6d 	bl	8001eec <HAL_Delay>
  {
 8001812:	f7ff ba37 	b.w	8000c84 <main+0xf4>
 8001816:	bf00      	nop
 8001818:	200000d4 	.word	0x200000d4
 800181c:	200000e8 	.word	0x200000e8
 8001820:	2000014c 	.word	0x2000014c
 8001824:	20000994 	.word	0x20000994
 8001828:	20000920 	.word	0x20000920
 800182c:	200009ac 	.word	0x200009ac
 8001830:	20000998 	.word	0x20000998
 8001834:	48001000 	.word	0x48001000

08001838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b090      	sub	sp, #64	; 0x40
 800183c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183e:	f107 0318 	add.w	r3, r7, #24
 8001842:	2228      	movs	r2, #40	; 0x28
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f002 faa0 	bl	8003d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800185a:	2301      	movs	r3, #1
 800185c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800185e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001862:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001868:	2301      	movs	r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186c:	2302      	movs	r3, #2
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001876:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fde7 	bl	8002454 <HAL_RCC_OscConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800188c:	f000 f970 	bl	8001b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001890:	230f      	movs	r3, #15
 8001892:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001894:	2302      	movs	r3, #2
 8001896:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800189c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2102      	movs	r1, #2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f001 fcda 	bl	8003264 <HAL_RCC_ClockConfig>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018b6:	f000 f95b 	bl	8001b70 <Error_Handler>
  }
}
 80018ba:	bf00      	nop
 80018bc:	3740      	adds	r7, #64	; 0x40
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <MX_SPI1_Init+0x74>)
 80018ca:	4a1c      	ldr	r2, [pc, #112]	; (800193c <MX_SPI1_Init+0x78>)
 80018cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <MX_SPI1_Init+0x74>)
 80018d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <MX_SPI1_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <MX_SPI1_Init+0x74>)
 80018de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_SPI1_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_SPI1_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_SPI1_Init+0x74>)
 80018f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_SPI1_Init+0x74>)
 80018fa:	2208      	movs	r2, #8
 80018fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_SPI1_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_SPI1_Init+0x74>)
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_SPI1_Init+0x74>)
 800190c:	2200      	movs	r2, #0
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_SPI1_Init+0x74>)
 8001912:	2207      	movs	r2, #7
 8001914:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_SPI1_Init+0x74>)
 8001918:	2200      	movs	r2, #0
 800191a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_SPI1_Init+0x74>)
 800191e:	2208      	movs	r2, #8
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_SPI1_Init+0x74>)
 8001924:	f001 fe84 	bl	8003630 <HAL_SPI_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800192e:	f000 f91f 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000a00 	.word	0x20000a00
 800193c:	40013000 	.word	0x40013000

08001940 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_SPI2_Init+0x74>)
 8001946:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <MX_SPI2_Init+0x78>)
 8001948:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <MX_SPI2_Init+0x74>)
 800194c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001950:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_SPI2_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <MX_SPI2_Init+0x74>)
 800195a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800195e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_SPI2_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_SPI2_Init+0x74>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_SPI2_Init+0x74>)
 800196e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001972:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_SPI2_Init+0x74>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_SPI2_Init+0x74>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_SPI2_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_SPI2_Init+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_SPI2_Init+0x74>)
 800198e:	2207      	movs	r2, #7
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <MX_SPI2_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_SPI2_Init+0x74>)
 800199a:	2208      	movs	r2, #8
 800199c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_SPI2_Init+0x74>)
 80019a0:	f001 fe46 	bl	8003630 <HAL_SPI_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80019aa:	f000 f8e1 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200000e8 	.word	0x200000e8
 80019b8:	40003800 	.word	0x40003800

080019bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MX_SPI3_Init+0x74>)
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <MX_SPI3_Init+0x78>)
 80019c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_SPI3_Init+0x74>)
 80019c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_SPI3_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_SPI3_Init+0x74>)
 80019d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_SPI3_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <MX_SPI3_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_SPI3_Init+0x74>)
 80019ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_SPI3_Init+0x74>)
 80019f2:	2208      	movs	r2, #8
 80019f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_SPI3_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_SPI3_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <MX_SPI3_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_SPI3_Init+0x74>)
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MX_SPI3_Init+0x74>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_SPI3_Init+0x74>)
 8001a16:	2208      	movs	r2, #8
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_SPI3_Init+0x74>)
 8001a1c:	f001 fe08 	bl	8003630 <HAL_SPI_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001a26:	f000 f8a3 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000930 	.word	0x20000930
 8001a34:	40003c00 	.word	0x40003c00

08001a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a4e:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4a43      	ldr	r2, [pc, #268]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a58:	6153      	str	r3, [r2, #20]
 8001a5a:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a70:	6153      	str	r3, [r2, #20]
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7e:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4a37      	ldr	r2, [pc, #220]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001a84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a88:	6153      	str	r3, [r2, #20]
 8001a8a:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a31      	ldr	r2, [pc, #196]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6153      	str	r3, [r2, #20]
 8001aa2:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4a2b      	ldr	r2, [pc, #172]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab8:	6153      	str	r3, [r2, #20]
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2120      	movs	r1, #32
 8001aca:	4826      	ldr	r0, [pc, #152]	; (8001b64 <MX_GPIO_Init+0x12c>)
 8001acc:	f000 fcaa 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	4824      	ldr	r0, [pc, #144]	; (8001b68 <MX_GPIO_Init+0x130>)
 8001ad6:	f000 fca5 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SCLK_Pin|NOE_Pin|NOE1_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 6128 	mov.w	r1, #2688	; 0xa80
 8001ae0:	4822      	ldr	r0, [pc, #136]	; (8001b6c <MX_GPIO_Init+0x134>)
 8001ae2:	f000 fc9f 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afc:	f000 fb00 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : A_Pin */
  GPIO_InitStruct.Pin = A_Pin;
 8001b00:	2320      	movs	r3, #32
 8001b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	4813      	ldr	r0, [pc, #76]	; (8001b64 <MX_GPIO_Init+0x12c>)
 8001b18:	f000 faf2 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Pin */
  GPIO_InitStruct.Pin = B_Pin;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_GPIO_Init+0x130>)
 8001b34:	f000 fae4 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin NOE_Pin NOE1_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|NOE_Pin|NOE1_Pin;
 8001b38:	f44f 6328 	mov.w	r3, #2688	; 0xa80
 8001b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4806      	ldr	r0, [pc, #24]	; (8001b6c <MX_GPIO_Init+0x134>)
 8001b52:	f000 fad5 	bl	8002100 <HAL_GPIO_Init>

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	48000800 	.word	0x48000800
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	48001000 	.word	0x48001000

08001b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b74:	b672      	cpsid	i
}
 8001b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <Error_Handler+0x8>
	...

08001b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_MspInit+0x44>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_MspInit+0x44>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6193      	str	r3, [r2, #24]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_MspInit+0x44>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_MspInit+0x44>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_MspInit+0x44>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	61d3      	str	r3, [r2, #28]
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_MspInit+0x44>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	; 0x38
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a55      	ldr	r2, [pc, #340]	; (8001d38 <HAL_SPI_MspInit+0x174>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d129      	bne.n	8001c3a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001be6:	4b55      	ldr	r3, [pc, #340]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4a54      	ldr	r2, [pc, #336]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf0:	6193      	str	r3, [r2, #24]
 8001bf2:	4b52      	ldr	r3, [pc, #328]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfa:	623b      	str	r3, [r7, #32]
 8001bfc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	4a4e      	ldr	r2, [pc, #312]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c08:	6153      	str	r3, [r2, #20]
 8001c0a:	4b4c      	ldr	r3, [pc, #304]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c16:	23a0      	movs	r3, #160	; 0xa0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c26:	2305      	movs	r3, #5
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c34:	f000 fa64 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c38:	e079      	b.n	8001d2e <HAL_SPI_MspInit+0x16a>
  else if(hspi->Instance==SPI2)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a40      	ldr	r2, [pc, #256]	; (8001d40 <HAL_SPI_MspInit+0x17c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d146      	bne.n	8001cd2 <HAL_SPI_MspInit+0x10e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	4a3c      	ldr	r2, [pc, #240]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4e:	61d3      	str	r3, [r2, #28]
 8001c50:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c5c:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	4a36      	ldr	r2, [pc, #216]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001c62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c66:	6153      	str	r3, [r2, #20]
 8001c68:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	4a30      	ldr	r2, [pc, #192]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7e:	6153      	str	r3, [r2, #20]
 8001c80:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4826      	ldr	r0, [pc, #152]	; (8001d44 <HAL_SPI_MspInit+0x180>)
 8001caa:	f000 fa29 	bl	8002100 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cc0:	2305      	movs	r3, #5
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	481f      	ldr	r0, [pc, #124]	; (8001d48 <HAL_SPI_MspInit+0x184>)
 8001ccc:	f000 fa18 	bl	8002100 <HAL_GPIO_Init>
}
 8001cd0:	e02d      	b.n	8001d2e <HAL_SPI_MspInit+0x16a>
  else if(hspi->Instance==SPI3)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <HAL_SPI_MspInit+0x188>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d128      	bne.n	8001d2e <HAL_SPI_MspInit+0x16a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce6:	61d3      	str	r3, [r2, #28]
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001cfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cfe:	6153      	str	r3, [r2, #20]
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_SPI_MspInit+0x178>)
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001d0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d1e:	2306      	movs	r3, #6
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d26:	4619      	mov	r1, r3
 8001d28:	4809      	ldr	r0, [pc, #36]	; (8001d50 <HAL_SPI_MspInit+0x18c>)
 8001d2a:	f000 f9e9 	bl	8002100 <HAL_GPIO_Init>
}
 8001d2e:	bf00      	nop
 8001d30:	3738      	adds	r7, #56	; 0x38
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40013000 	.word	0x40013000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40003800 	.word	0x40003800
 8001d44:	48001400 	.word	0x48001400
 8001d48:	48000400 	.word	0x48000400
 8001d4c:	40003c00 	.word	0x40003c00
 8001d50:	48000800 	.word	0x48000800

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <NMI_Handler+0x4>

08001d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <HardFault_Handler+0x4>

08001d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <MemManage_Handler+0x4>

08001d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <BusFault_Handler+0x4>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <UsageFault_Handler+0x4>

08001d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da0:	f000 f884 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <SystemInit+0x20>)
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <SystemInit+0x20>)
 8001db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e04 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dd0:	f7ff ffea 	bl	8001da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd4:	480c      	ldr	r0, [pc, #48]	; (8001e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dd6:	490d      	ldr	r1, [pc, #52]	; (8001e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <LoopForever+0xe>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ddc:	e002      	b.n	8001de4 <LoopCopyDataInit>

08001dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de2:	3304      	adds	r3, #4

08001de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de8:	d3f9      	bcc.n	8001dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dec:	4c0a      	ldr	r4, [pc, #40]	; (8001e18 <LoopForever+0x16>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df0:	e001      	b.n	8001df6 <LoopFillZerobss>

08001df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df4:	3204      	adds	r2, #4

08001df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df8:	d3fb      	bcc.n	8001df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dfa:	f001 ffa3 	bl	8003d44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dfe:	f7fe fec7 	bl	8000b90 <main>

08001e02 <LoopForever>:

LoopForever:
    b LoopForever
 8001e02:	e7fe      	b.n	8001e02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e04:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e0c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001e10:	08006068 	.word	0x08006068
  ldr r2, =_sbss
 8001e14:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001e18:	20001244 	.word	0x20001244

08001e1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e1c:	e7fe      	b.n	8001e1c <ADC1_2_IRQHandler>
	...

08001e20 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_Init+0x28>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_Init+0x28>)
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 f931 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	200f      	movs	r0, #15
 8001e38:	f000 f808 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff fe9e 	bl	8001b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000

08001e4c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x54>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x58>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f93b 	bl	80020e6 <HAL_SYSTICK_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00e      	b.n	8001e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d80a      	bhi.n	8001e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f000 f911 	bl	80020ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_InitTick+0x5c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000020 	.word	0x20000020
 8001ea4:	20000028 	.word	0x20000028
 8001ea8:	20000024 	.word	0x20000024

08001eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000028 	.word	0x20000028
 8001ed0:	20001240 	.word	0x20001240

08001ed4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20001240 	.word	0x20001240

08001eec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff ffee 	bl	8001ed4 <HAL_GetTick>
 8001ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d005      	beq.n	8001f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_Delay+0x44>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f12:	bf00      	nop
 8001f14:	f7ff ffde 	bl	8001ed4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f7      	bhi.n	8001f14 <HAL_Delay+0x28>
  {
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000028 	.word	0x20000028

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f66:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	60d3      	str	r3, [r2, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	; (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002064:	d301      	bcc.n	800206a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002066:	2301      	movs	r3, #1
 8002068:	e00f      	b.n	800208a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <SysTick_Config+0x40>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002072:	210f      	movs	r1, #15
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f7ff ff8e 	bl	8001f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <SysTick_Config+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <SysTick_Config+0x40>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff47 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c0:	f7ff ff5c 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 80020c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f7ff ff8e 	bl	8001fec <NVIC_EncodePriority>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff5d 	bl	8001f98 <__NVIC_SetPriority>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffb0 	bl	8002054 <SysTick_Config>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210e:	e154      	b.n	80023ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8146 	beq.w	80023b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d005      	beq.n	8002140 <HAL_GPIO_Init+0x40>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d130      	bne.n	80021a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002176:	2201      	movs	r2, #1
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	f003 0201 	and.w	r2, r3, #1
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d017      	beq.n	80021de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d123      	bne.n	8002232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	6939      	ldr	r1, [r7, #16]
 800222e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0203 	and.w	r2, r3, #3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80a0 	beq.w	80023b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002274:	4b58      	ldr	r3, [pc, #352]	; (80023d8 <HAL_GPIO_Init+0x2d8>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a57      	ldr	r2, [pc, #348]	; (80023d8 <HAL_GPIO_Init+0x2d8>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b55      	ldr	r3, [pc, #340]	; (80023d8 <HAL_GPIO_Init+0x2d8>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800228c:	4a53      	ldr	r2, [pc, #332]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022b6:	d019      	beq.n	80022ec <HAL_GPIO_Init+0x1ec>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a49      	ldr	r2, [pc, #292]	; (80023e0 <HAL_GPIO_Init+0x2e0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <HAL_GPIO_Init+0x1e8>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a48      	ldr	r2, [pc, #288]	; (80023e4 <HAL_GPIO_Init+0x2e4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00d      	beq.n	80022e4 <HAL_GPIO_Init+0x1e4>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_GPIO_Init+0x2e8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d007      	beq.n	80022e0 <HAL_GPIO_Init+0x1e0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a46      	ldr	r2, [pc, #280]	; (80023ec <HAL_GPIO_Init+0x2ec>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_GPIO_Init+0x1dc>
 80022d8:	2304      	movs	r3, #4
 80022da:	e008      	b.n	80022ee <HAL_GPIO_Init+0x1ee>
 80022dc:	2305      	movs	r3, #5
 80022de:	e006      	b.n	80022ee <HAL_GPIO_Init+0x1ee>
 80022e0:	2303      	movs	r3, #3
 80022e2:	e004      	b.n	80022ee <HAL_GPIO_Init+0x1ee>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e002      	b.n	80022ee <HAL_GPIO_Init+0x1ee>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_GPIO_Init+0x1ee>
 80022ec:	2300      	movs	r3, #0
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	f002 0203 	and.w	r2, r2, #3
 80022f4:	0092      	lsls	r2, r2, #2
 80022f6:	4093      	lsls	r3, r2
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022fe:	4937      	ldr	r1, [pc, #220]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230c:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <HAL_GPIO_Init+0x2f0>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002330:	4a2f      	ldr	r2, [pc, #188]	; (80023f0 <HAL_GPIO_Init+0x2f0>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002336:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_GPIO_Init+0x2f0>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800235a:	4a25      	ldr	r2, [pc, #148]	; (80023f0 <HAL_GPIO_Init+0x2f0>)
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002360:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <HAL_GPIO_Init+0x2f0>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	43db      	mvns	r3, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002384:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <HAL_GPIO_Init+0x2f0>)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238a:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_GPIO_Init+0x2f0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023ae:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <HAL_GPIO_Init+0x2f0>)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3301      	adds	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f47f aea3 	bne.w	8002110 <HAL_GPIO_Init+0x10>
  }
}
 80023ca:	bf00      	nop
 80023cc:	bf00      	nop
 80023ce:	371c      	adds	r7, #28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40010000 	.word	0x40010000
 80023e0:	48000400 	.word	0x48000400
 80023e4:	48000800 	.word	0x48000800
 80023e8:	48000c00 	.word	0x48000c00
 80023ec:	48001000 	.word	0x48001000
 80023f0:	40010400 	.word	0x40010400

080023f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	e001      	b.n	8002416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002440:	e002      	b.n	8002448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800245a:	af00      	add	r7, sp, #0
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	f000 bef4 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 816a 	beq.w	8002752 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800247e:	4bb3      	ldr	r3, [pc, #716]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d00c      	beq.n	80024a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800248a:	4bb0      	ldr	r3, [pc, #704]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b08      	cmp	r3, #8
 8002494:	d159      	bne.n	800254a <HAL_RCC_OscConfig+0xf6>
 8002496:	4bad      	ldr	r3, [pc, #692]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a2:	d152      	bne.n	800254a <HAL_RCC_OscConfig+0xf6>
 80024a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d102      	bne.n	80024d6 <HAL_RCC_OscConfig+0x82>
 80024d0:	4b9e      	ldr	r3, [pc, #632]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0xae>
 80024d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024da:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80024ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024fe:	4b93      	ldr	r3, [pc, #588]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002506:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800250a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800250e:	fa92 f2a2 	rbit	r2, r2
 8002512:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002516:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800251a:	fab2 f282 	clz	r2, r2
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f042 0220 	orr.w	r2, r2, #32
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	f002 021f 	and.w	r2, r2, #31
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 810c 	beq.w	8002750 <HAL_RCC_OscConfig+0x2fc>
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 8106 	bne.w	8002750 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	f000 be86 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002554:	d106      	bne.n	8002564 <HAL_RCC_OscConfig+0x110>
 8002556:	4b7d      	ldr	r3, [pc, #500]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7c      	ldr	r2, [pc, #496]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e030      	b.n	80025c6 <HAL_RCC_OscConfig+0x172>
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x134>
 800256e:	4b77      	ldr	r3, [pc, #476]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a76      	ldr	r2, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b74      	ldr	r3, [pc, #464]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a73      	ldr	r2, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e01e      	b.n	80025c6 <HAL_RCC_OscConfig+0x172>
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002592:	d10c      	bne.n	80025ae <HAL_RCC_OscConfig+0x15a>
 8002594:	4b6d      	ldr	r3, [pc, #436]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a6c      	ldr	r2, [pc, #432]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 800259a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a69      	ldr	r2, [pc, #420]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	e00b      	b.n	80025c6 <HAL_RCC_OscConfig+0x172>
 80025ae:	4b67      	ldr	r3, [pc, #412]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a66      	ldr	r2, [pc, #408]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b64      	ldr	r3, [pc, #400]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a63      	ldr	r2, [pc, #396]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025c6:	4b61      	ldr	r3, [pc, #388]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	f023 020f 	bic.w	r2, r3, #15
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	495d      	ldr	r1, [pc, #372]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d059      	beq.n	8002698 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7ff fc76 	bl	8001ed4 <HAL_GetTick>
 80025e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ee:	f7ff fc71 	bl	8001ed4 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d902      	bls.n	8002604 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	f000 be29 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
 8002604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002608:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002618:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d102      	bne.n	8002636 <HAL_RCC_OscConfig+0x1e2>
 8002630:	4b46      	ldr	r3, [pc, #280]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x20e>
 8002636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800264a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800264e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002652:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800265e:	4b3b      	ldr	r3, [pc, #236]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002666:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800266a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800266e:	fa92 f2a2 	rbit	r2, r2
 8002672:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002676:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f042 0220 	orr.w	r2, r2, #32
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f002 021f 	and.w	r2, r2, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ab      	beq.n	80025ee <HAL_RCC_OscConfig+0x19a>
 8002696:	e05c      	b.n	8002752 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7ff fc1c 	bl	8001ed4 <HAL_GetTick>
 800269c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a2:	f7ff fc17 	bl	8001ed4 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d902      	bls.n	80026b8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	f000 bdcf 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
 80026b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80026cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_OscConfig+0x296>
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x2c2>
 80026ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002702:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002706:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800271a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800271e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002722:	fa92 f2a2 	rbit	r2, r2
 8002726:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800272a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f042 0220 	orr.w	r2, r2, #32
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f002 021f 	and.w	r2, r2, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1ab      	bne.n	80026a2 <HAL_RCC_OscConfig+0x24e>
 800274a:	e002      	b.n	8002752 <HAL_RCC_OscConfig+0x2fe>
 800274c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 816f 	beq.w	8002a40 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002762:	4bd0      	ldr	r3, [pc, #832]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800276e:	4bcd      	ldr	r3, [pc, #820]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d16c      	bne.n	8002854 <HAL_RCC_OscConfig+0x400>
 800277a:	4bca      	ldr	r3, [pc, #808]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d166      	bne.n	8002854 <HAL_RCC_OscConfig+0x400>
 8002786:	2302      	movs	r3, #2
 8002788:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002798:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d102      	bne.n	80027b6 <HAL_RCC_OscConfig+0x362>
 80027b0:	4bbc      	ldr	r3, [pc, #752]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	e013      	b.n	80027de <HAL_RCC_OscConfig+0x38a>
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027c8:	2302      	movs	r3, #2
 80027ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027da:	4bb2      	ldr	r3, [pc, #712]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	2202      	movs	r2, #2
 80027e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80027e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027e8:	fa92 f2a2 	rbit	r2, r2
 80027ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80027f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f042 0220 	orr.w	r2, r2, #32
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f002 021f 	and.w	r2, r2, #31
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d007      	beq.n	8002820 <HAL_RCC_OscConfig+0x3cc>
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d002      	beq.n	8002820 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f000 bd1b 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4ba0      	ldr	r3, [pc, #640]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	21f8      	movs	r1, #248	; 0xf8
 8002830:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002838:	fa91 f1a1 	rbit	r1, r1
 800283c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002840:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002844:	fab1 f181 	clz	r1, r1
 8002848:	b2c9      	uxtb	r1, r1
 800284a:	408b      	lsls	r3, r1
 800284c:	4995      	ldr	r1, [pc, #596]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	e0f5      	b.n	8002a40 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8085 	beq.w	800296a <HAL_RCC_OscConfig+0x516>
 8002860:	2301      	movs	r3, #1
 8002862:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002872:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002880:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	461a      	mov	r2, r3
 8002888:	2301      	movs	r3, #1
 800288a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7ff fb22 	bl	8001ed4 <HAL_GetTick>
 8002890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002896:	f7ff fb1d 	bl	8001ed4 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	f000 bcd5 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
 80028ac:	2302      	movs	r3, #2
 80028ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80028be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_OscConfig+0x488>
 80028d6:	4b73      	ldr	r3, [pc, #460]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e013      	b.n	8002904 <HAL_RCC_OscConfig+0x4b0>
 80028dc:	2302      	movs	r3, #2
 80028de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002900:	4b68      	ldr	r3, [pc, #416]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	2202      	movs	r2, #2
 8002906:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800290a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800290e:	fa92 f2a2 	rbit	r2, r2
 8002912:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002916:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 021f 	and.w	r2, r2, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0af      	beq.n	8002896 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b5b      	ldr	r3, [pc, #364]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	21f8      	movs	r1, #248	; 0xf8
 8002946:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800294e:	fa91 f1a1 	rbit	r1, r1
 8002952:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002956:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800295a:	fab1 f181 	clz	r1, r1
 800295e:	b2c9      	uxtb	r1, r1
 8002960:	408b      	lsls	r3, r1
 8002962:	4950      	ldr	r1, [pc, #320]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
 8002968:	e06a      	b.n	8002a40 <HAL_RCC_OscConfig+0x5ec>
 800296a:	2301      	movs	r3, #1
 800296c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800297c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800298a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	461a      	mov	r2, r3
 8002992:	2300      	movs	r3, #0
 8002994:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7ff fa9d 	bl	8001ed4 <HAL_GetTick>
 800299a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a0:	f7ff fa98 	bl	8001ed4 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d902      	bls.n	80029b6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f000 bc50 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
 80029b6:	2302      	movs	r3, #2
 80029b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80029c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029cc:	fab3 f383 	clz	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d102      	bne.n	80029e6 <HAL_RCC_OscConfig+0x592>
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	e013      	b.n	8002a0e <HAL_RCC_OscConfig+0x5ba>
 80029e6:	2302      	movs	r3, #2
 80029e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029f8:	2302      	movs	r3, #2
 80029fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002a14:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a18:	fa92 f2a2 	rbit	r2, r2
 8002a1c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002a20:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a24:	fab2 f282 	clz	r2, r2
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	f042 0220 	orr.w	r2, r2, #32
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	f002 021f 	and.w	r2, r2, #31
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1af      	bne.n	80029a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80da 	beq.w	8002c04 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d069      	beq.n	8002b2e <HAL_RCC_OscConfig+0x6da>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x654>)
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2301      	movs	r3, #1
 8002a82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a84:	f7ff fa26 	bl	8001ed4 <HAL_GetTick>
 8002a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8c:	e00e      	b.n	8002aac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8e:	f7ff fa21 	bl	8001ed4 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d906      	bls.n	8002aac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e3d9      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	10908120 	.word	0x10908120
 8002aac:	2302      	movs	r3, #2
 8002aae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002abe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f2a3 	rbit	r2, r3
 8002ad0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ada:	2202      	movs	r2, #2
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fa93 f2a3 	rbit	r2, r3
 8002ae8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002aec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	4ba5      	ldr	r3, [pc, #660]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002af6:	2102      	movs	r1, #2
 8002af8:	6019      	str	r1, [r3, #0]
 8002afa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f1a3 	rbit	r1, r3
 8002b04:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b08:	6019      	str	r1, [r3, #0]
  return result;
 8002b0a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0b0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x63a>
 8002b2c:	e06a      	b.n	8002c04 <HAL_RCC_OscConfig+0x7b0>
 8002b2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	fa93 f2a3 	rbit	r2, r3
 8002b40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b44:	601a      	str	r2, [r3, #0]
  return result;
 8002b46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b4a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b8c      	ldr	r3, [pc, #560]	; (8002d88 <HAL_RCC_OscConfig+0x934>)
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7ff f9b8 	bl	8001ed4 <HAL_GetTick>
 8002b64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b68:	e009      	b.n	8002b7e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6a:	f7ff f9b3 	bl	8001ed4 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e36b      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002b7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b82:	2202      	movs	r2, #2
 8002b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fa93 f2a3 	rbit	r2, r3
 8002ba8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	fa93 f2a3 	rbit	r2, r3
 8002bc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc6:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bce:	2102      	movs	r1, #2
 8002bd0:	6019      	str	r1, [r3, #0]
 8002bd2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fa93 f1a3 	rbit	r1, r3
 8002bdc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002be0:	6019      	str	r1, [r3, #0]
  return result;
 8002be2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1b2      	bne.n	8002b6a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8158 	beq.w	8002ec4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1a:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d112      	bne.n	8002c4c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	4a56      	ldr	r2, [pc, #344]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	61d3      	str	r3, [r2, #28]
 8002c32:	4b54      	ldr	r3, [pc, #336]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <HAL_RCC_OscConfig+0x938>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11a      	bne.n	8002c8e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c58:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <HAL_RCC_OscConfig+0x938>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4b      	ldr	r2, [pc, #300]	; (8002d8c <HAL_RCC_OscConfig+0x938>)
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c64:	f7ff f936 	bl	8001ed4 <HAL_GetTick>
 8002c68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e009      	b.n	8002c82 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7ff f931 	bl	8001ed4 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e2e9      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c82:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <HAL_RCC_OscConfig+0x938>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0ef      	beq.n	8002c6e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x852>
 8002c98:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a39      	ldr	r2, [pc, #228]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e02f      	b.n	8002d06 <HAL_RCC_OscConfig+0x8b2>
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10c      	bne.n	8002cca <HAL_RCC_OscConfig+0x876>
 8002cb0:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a33      	ldr	r2, [pc, #204]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	6213      	str	r3, [r2, #32]
 8002cc8:	e01d      	b.n	8002d06 <HAL_RCC_OscConfig+0x8b2>
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCC_OscConfig+0x89a>
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a2a      	ldr	r2, [pc, #168]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6213      	str	r3, [r2, #32]
 8002ce0:	4b28      	ldr	r3, [pc, #160]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a27      	ldr	r2, [pc, #156]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	e00b      	b.n	8002d06 <HAL_RCC_OscConfig+0x8b2>
 8002cee:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a24      	ldr	r2, [pc, #144]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d06b      	beq.n	8002de8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d10:	f7ff f8e0 	bl	8001ed4 <HAL_GetTick>
 8002d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	e00b      	b.n	8002d32 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7ff f8db 	bl	8001ed4 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e291      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002d32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d36:	2202      	movs	r2, #2
 8002d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	fa93 f2a3 	rbit	r2, r3
 8002d44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d4e:	2202      	movs	r2, #2
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	fa93 f2a3 	rbit	r2, r3
 8002d5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d60:	601a      	str	r2, [r3, #0]
  return result;
 8002d62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f043 0302 	orr.w	r3, r3, #2
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d109      	bne.n	8002d90 <HAL_RCC_OscConfig+0x93c>
 8002d7c:	4b01      	ldr	r3, [pc, #4]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	e014      	b.n	8002dac <HAL_RCC_OscConfig+0x958>
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	10908120 	.word	0x10908120
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d94:	2202      	movs	r2, #2
 8002d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	fa93 f2a3 	rbit	r2, r3
 8002da2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	4bbb      	ldr	r3, [pc, #748]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002db0:	2102      	movs	r1, #2
 8002db2:	6011      	str	r1, [r2, #0]
 8002db4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	fa92 f1a2 	rbit	r1, r2
 8002dbe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002dc2:	6011      	str	r1, [r2, #0]
  return result;
 8002dc4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d099      	beq.n	8002d1a <HAL_RCC_OscConfig+0x8c6>
 8002de6:	e063      	b.n	8002eb0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7ff f874 	bl	8001ed4 <HAL_GetTick>
 8002dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df0:	e00b      	b.n	8002e0a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7ff f86f 	bl	8001ed4 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e225      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002e0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e0e:	2202      	movs	r2, #2
 8002e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e26:	2202      	movs	r2, #2
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	fa93 f2a3 	rbit	r2, r3
 8002e34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e38:	601a      	str	r2, [r3, #0]
  return result;
 8002e3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d102      	bne.n	8002e5a <HAL_RCC_OscConfig+0xa06>
 8002e54:	4b90      	ldr	r3, [pc, #576]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	e00d      	b.n	8002e76 <HAL_RCC_OscConfig+0xa22>
 8002e5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e5e:	2202      	movs	r2, #2
 8002e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	4b89      	ldr	r3, [pc, #548]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	6011      	str	r1, [r2, #0]
 8002e7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	fa92 f1a2 	rbit	r1, r2
 8002e88:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e8c:	6011      	str	r1, [r2, #0]
  return result;
 8002e8e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f002 021f 	and.w	r2, r2, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1a0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b77      	ldr	r3, [pc, #476]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	4a76      	ldr	r2, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 81c2 	beq.w	8003254 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed0:	4b71      	ldr	r3, [pc, #452]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	f000 819c 	beq.w	8003216 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	f040 8114 	bne.w	8003112 <HAL_RCC_OscConfig+0xcbe>
 8002eea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002eee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f02:	601a      	str	r2, [r3, #0]
  return result;
 8002f04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe ffd8 	bl	8001ed4 <HAL_GetTick>
 8002f24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f28:	e009      	b.n	8002f3e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fe ffd3 	bl	8001ed4 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e18b      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002f3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	fa93 f2a3 	rbit	r2, r3
 8002f52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f56:	601a      	str	r2, [r3, #0]
  return result;
 8002f58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d102      	bne.n	8002f78 <HAL_RCC_OscConfig+0xb24>
 8002f72:	4b49      	ldr	r3, [pc, #292]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	e01b      	b.n	8002fb0 <HAL_RCC_OscConfig+0xb5c>
 8002f78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	fa93 f2a3 	rbit	r2, r3
 8002fa6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fb8:	6011      	str	r1, [r2, #0]
 8002fba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	fa92 f1a2 	rbit	r1, r2
 8002fc4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002fc8:	6011      	str	r1, [r2, #0]
  return result;
 8002fca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	fab2 f282 	clz	r2, r2
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f042 0220 	orr.w	r2, r2, #32
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	f002 021f 	and.w	r2, r2, #31
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d19e      	bne.n	8002f2a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fec:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	430b      	orrs	r3, r1
 8003002:	4925      	ldr	r1, [pc, #148]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
 8003008:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800300c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f2a3 	rbit	r2, r3
 800301c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003020:	601a      	str	r2, [r3, #0]
  return result;
 8003022:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003026:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003032:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	461a      	mov	r2, r3
 800303a:	2301      	movs	r3, #1
 800303c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fe ff49 	bl	8001ed4 <HAL_GetTick>
 8003042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003046:	e009      	b.n	800305c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003048:	f7fe ff44 	bl	8001ed4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0fc      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 800305c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003074:	601a      	str	r2, [r3, #0]
  return result;
 8003076:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800307a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_OscConfig+0xc48>
 8003090:	4b01      	ldr	r3, [pc, #4]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	e01e      	b.n	80030d4 <HAL_RCC_OscConfig+0xc80>
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f2a3 	rbit	r2, r3
 80030b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	fa93 f2a3 	rbit	r2, r3
 80030ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	4b63      	ldr	r3, [pc, #396]	; (8003260 <HAL_RCC_OscConfig+0xe0c>)
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030dc:	6011      	str	r1, [r2, #0]
 80030de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	fa92 f1a2 	rbit	r1, r2
 80030e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030ec:	6011      	str	r1, [r2, #0]
  return result;
 80030ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	fab2 f282 	clz	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f002 021f 	and.w	r2, r2, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f202 	lsl.w	r2, r1, r2
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d09b      	beq.n	8003048 <HAL_RCC_OscConfig+0xbf4>
 8003110:	e0a0      	b.n	8003254 <HAL_RCC_OscConfig+0xe00>
 8003112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003116:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800311a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f2a3 	rbit	r2, r3
 8003126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800312a:	601a      	str	r2, [r3, #0]
  return result;
 800312c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003130:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800313c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	461a      	mov	r2, r3
 8003144:	2300      	movs	r3, #0
 8003146:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fe fec4 	bl	8001ed4 <HAL_GetTick>
 800314c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003150:	e009      	b.n	8003166 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003152:	f7fe febf 	bl	8001ed4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e077      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8003166:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800316a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800316e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	fa93 f2a3 	rbit	r2, r3
 800317a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800317e:	601a      	str	r2, [r3, #0]
  return result;
 8003180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003184:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d102      	bne.n	80031a0 <HAL_RCC_OscConfig+0xd4c>
 800319a:	4b31      	ldr	r3, [pc, #196]	; (8003260 <HAL_RCC_OscConfig+0xe0c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	e01b      	b.n	80031d8 <HAL_RCC_OscConfig+0xd84>
 80031a0:	f107 0320 	add.w	r3, r7, #32
 80031a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f107 0320 	add.w	r3, r7, #32
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	fa93 f2a3 	rbit	r2, r3
 80031b4:	f107 031c 	add.w	r3, r7, #28
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f107 0318 	add.w	r3, r7, #24
 80031be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f107 0318 	add.w	r3, r7, #24
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	fa93 f2a3 	rbit	r2, r3
 80031ce:	f107 0314 	add.w	r3, r7, #20
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	4b22      	ldr	r3, [pc, #136]	; (8003260 <HAL_RCC_OscConfig+0xe0c>)
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	f107 0210 	add.w	r2, r7, #16
 80031dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031e0:	6011      	str	r1, [r2, #0]
 80031e2:	f107 0210 	add.w	r2, r7, #16
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	fa92 f1a2 	rbit	r1, r2
 80031ec:	f107 020c 	add.w	r2, r7, #12
 80031f0:	6011      	str	r1, [r2, #0]
  return result;
 80031f2:	f107 020c 	add.w	r2, r7, #12
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	fab2 f282 	clz	r2, r2
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	f042 0220 	orr.w	r2, r2, #32
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	f002 021f 	and.w	r2, r2, #31
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d19e      	bne.n	8003152 <HAL_RCC_OscConfig+0xcfe>
 8003214:	e01e      	b.n	8003254 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e018      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_RCC_OscConfig+0xe0c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800322c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	429a      	cmp	r2, r3
 800323c:	d108      	bne.n	8003250 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800323e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003242:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000

08003264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b09e      	sub	sp, #120	; 0x78
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e162      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b90      	ldr	r3, [pc, #576]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d910      	bls.n	80032ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b8d      	ldr	r3, [pc, #564]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 0207 	bic.w	r2, r3, #7
 8003292:	498b      	ldr	r1, [pc, #556]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b89      	ldr	r3, [pc, #548]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e14a      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b82      	ldr	r3, [pc, #520]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	497f      	ldr	r1, [pc, #508]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80dc 	beq.w	8003490 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d13c      	bne.n	800335a <HAL_RCC_ClockConfig+0xf6>
 80032e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d102      	bne.n	800330a <HAL_RCC_ClockConfig+0xa6>
 8003304:	4b6f      	ldr	r3, [pc, #444]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	e00f      	b.n	800332a <HAL_RCC_ClockConfig+0xc6>
 800330a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	667b      	str	r3, [r7, #100]	; 0x64
 8003318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331c:	663b      	str	r3, [r7, #96]	; 0x60
 800331e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003326:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800332e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003332:	fa92 f2a2 	rbit	r2, r2
 8003336:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003338:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0220 	orr.w	r2, r2, #32
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d17b      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0f3      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d13c      	bne.n	80033dc <HAL_RCC_ClockConfig+0x178>
 8003362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003366:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d102      	bne.n	800338c <HAL_RCC_ClockConfig+0x128>
 8003386:	4b4f      	ldr	r3, [pc, #316]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	e00f      	b.n	80033ac <HAL_RCC_ClockConfig+0x148>
 800338c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003390:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	647b      	str	r3, [r7, #68]	; 0x44
 800339a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800339e:	643b      	str	r3, [r7, #64]	; 0x40
 80033a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a8:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80033b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033b4:	fa92 f2a2 	rbit	r2, r2
 80033b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033bc:	fab2 f282 	clz	r2, r2
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	f042 0220 	orr.w	r2, r2, #32
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f002 021f 	and.w	r2, r2, #31
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f202 	lsl.w	r2, r1, r2
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d13a      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0b2      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
 80033dc:	2302      	movs	r3, #2
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d102      	bne.n	8003404 <HAL_RCC_ClockConfig+0x1a0>
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	e00d      	b.n	8003420 <HAL_RCC_ClockConfig+0x1bc>
 8003404:	2302      	movs	r3, #2
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	2302      	movs	r3, #2
 8003412:	623b      	str	r3, [r7, #32]
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2202      	movs	r2, #2
 8003422:	61ba      	str	r2, [r7, #24]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	fa92 f2a2 	rbit	r2, r2
 800342a:	617a      	str	r2, [r7, #20]
  return result;
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	fab2 f282 	clz	r2, r2
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f042 0220 	orr.w	r2, r2, #32
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f002 021f 	and.w	r2, r2, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e079      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	491a      	ldr	r1, [pc, #104]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003460:	f7fe fd38 	bl	8001ed4 <HAL_GetTick>
 8003464:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7fe fd34 	bl	8001ed4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e061      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 020c 	and.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1eb      	bne.n	8003468 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d214      	bcs.n	80034c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 0207 	bic.w	r2, r3, #7
 80034a6:	4906      	ldr	r1, [pc, #24]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e040      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
 80034c0:	40022000 	.word	0x40022000
 80034c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	491a      	ldr	r1, [pc, #104]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4912      	ldr	r1, [pc, #72]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003506:	f000 f829 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800350a:	4601      	mov	r1, r0
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003514:	22f0      	movs	r2, #240	; 0xf0
 8003516:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	fa92 f2a2 	rbit	r2, r2
 800351e:	60fa      	str	r2, [r7, #12]
  return result;
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	fab2 f282 	clz	r2, r2
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	40d3      	lsrs	r3, r2
 800352a:	4a09      	ldr	r2, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x2ec>)
 800352c:	5cd3      	ldrb	r3, [r2, r3]
 800352e:	fa21 f303 	lsr.w	r3, r1, r3
 8003532:	4a08      	ldr	r2, [pc, #32]	; (8003554 <HAL_RCC_ClockConfig+0x2f0>)
 8003534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_RCC_ClockConfig+0x2f4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe fc86 	bl	8001e4c <HAL_InitTick>
  
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3778      	adds	r7, #120	; 0x78
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	08005e10 	.word	0x08005e10
 8003554:	20000020 	.word	0x20000020
 8003558:	20000024 	.word	0x20000024

0800355c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800355c:	b480      	push	{r7}
 800355e:	b08b      	sub	sp, #44	; 0x2c
 8003560:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003576:	4b29      	ldr	r3, [pc, #164]	; (800361c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d002      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x30>
 8003586:	2b08      	cmp	r3, #8
 8003588:	d003      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x36>
 800358a:	e03c      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800358c:	4b24      	ldr	r3, [pc, #144]	; (8003620 <HAL_RCC_GetSysClockFreq+0xc4>)
 800358e:	623b      	str	r3, [r7, #32]
      break;
 8003590:	e03c      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003598:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800359c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	fa92 f2a2 	rbit	r2, r2
 80035a4:	607a      	str	r2, [r7, #4]
  return result;
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	fab2 f282 	clz	r2, r2
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	40d3      	lsrs	r3, r2
 80035b0:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	220f      	movs	r2, #15
 80035c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	fa92 f2a2 	rbit	r2, r2
 80035c8:	60fa      	str	r2, [r7, #12]
  return result;
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	fab2 f282 	clz	r2, r2
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	40d3      	lsrs	r3, r2
 80035d4:	4a14      	ldr	r2, [pc, #80]	; (8003628 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035e4:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
 80035f4:	e004      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	4a0c      	ldr	r2, [pc, #48]	; (800362c <HAL_RCC_GetSysClockFreq+0xd0>)
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	623b      	str	r3, [r7, #32]
      break;
 8003604:	e002      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003608:	623b      	str	r3, [r7, #32]
      break;
 800360a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360c:	6a3b      	ldr	r3, [r7, #32]
}
 800360e:	4618      	mov	r0, r3
 8003610:	372c      	adds	r7, #44	; 0x2c
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	007a1200 	.word	0x007a1200
 8003624:	08005e20 	.word	0x08005e20
 8003628:	08005e30 	.word	0x08005e30
 800362c:	003d0900 	.word	0x003d0900

08003630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e09d      	b.n	800377e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003652:	d009      	beq.n	8003668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	61da      	str	r2, [r3, #28]
 800365a:	e005      	b.n	8003668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe fa9e 	bl	8001bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036a8:	d902      	bls.n	80036b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e002      	b.n	80036b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80036be:	d007      	beq.n	80036d0 <HAL_SPI_Init+0xa0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036c8:	d002      	beq.n	80036d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	ea42 0103 	orr.w	r1, r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	0c1b      	lsrs	r3, r3, #16
 800372c:	f003 0204 	and.w	r2, r3, #4
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800374c:	ea42 0103 	orr.w	r1, r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800376c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b088      	sub	sp, #32
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_SPI_Transmit+0x22>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e15f      	b.n	8003a68 <HAL_SPI_Transmit+0x2e2>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037b0:	f7fe fb90 	bl	8001ed4 <HAL_GetTick>
 80037b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d002      	beq.n	80037cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
 80037c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037ca:	e148      	b.n	8003a5e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_SPI_Transmit+0x52>
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037dc:	e13f      	b.n	8003a5e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2203      	movs	r2, #3
 80037e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	88fa      	ldrh	r2, [r7, #6]
 80037f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003828:	d10f      	bne.n	800384a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003838:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003848:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d007      	beq.n	8003868 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003866:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003870:	d94f      	bls.n	8003912 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_SPI_Transmit+0xfa>
 800387a:	8afb      	ldrh	r3, [r7, #22]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d142      	bne.n	8003906 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	881a      	ldrh	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	1c9a      	adds	r2, r3, #2
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038a4:	e02f      	b.n	8003906 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d112      	bne.n	80038da <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	881a      	ldrh	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	1c9a      	adds	r2, r3, #2
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038d8:	e015      	b.n	8003906 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038da:	f7fe fafb 	bl	8001ed4 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d803      	bhi.n	80038f2 <HAL_SPI_Transmit+0x16c>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d102      	bne.n	80038f8 <HAL_SPI_Transmit+0x172>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d106      	bne.n	8003906 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003904:	e0ab      	b.n	8003a5e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1ca      	bne.n	80038a6 <HAL_SPI_Transmit+0x120>
 8003910:	e080      	b.n	8003a14 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_SPI_Transmit+0x19a>
 800391a:	8afb      	ldrh	r3, [r7, #22]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d174      	bne.n	8003a0a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d912      	bls.n	8003950 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	881a      	ldrh	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	1c9a      	adds	r2, r3, #2
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b02      	subs	r3, #2
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800394e:	e05c      	b.n	8003a0a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	330c      	adds	r3, #12
 800395a:	7812      	ldrb	r2, [r2, #0]
 800395c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003976:	e048      	b.n	8003a0a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b02      	cmp	r3, #2
 8003984:	d12b      	bne.n	80039de <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d912      	bls.n	80039b6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	1c9a      	adds	r2, r3, #2
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b02      	subs	r3, #2
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039b4:	e029      	b.n	8003a0a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	7812      	ldrb	r2, [r2, #0]
 80039c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039dc:	e015      	b.n	8003a0a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039de:	f7fe fa79 	bl	8001ed4 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d803      	bhi.n	80039f6 <HAL_SPI_Transmit+0x270>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d102      	bne.n	80039fc <HAL_SPI_Transmit+0x276>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003a08:	e029      	b.n	8003a5e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1b1      	bne.n	8003978 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	6839      	ldr	r1, [r7, #0]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f947 	bl	8003cac <SPI_EndRxTxTransaction>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e003      	b.n	8003a5e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a80:	f7fe fa28 	bl	8001ed4 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a90:	f7fe fa20 	bl	8001ed4 <HAL_GetTick>
 8003a94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a96:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	015b      	lsls	r3, r3, #5
 8003a9c:	0d1b      	lsrs	r3, r3, #20
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	fb02 f303 	mul.w	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aa6:	e054      	b.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d050      	beq.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ab0:	f7fe fa10 	bl	8001ed4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d902      	bls.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d13d      	bne.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ad4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ade:	d111      	bne.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae8:	d004      	beq.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af2:	d107      	bne.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b0c:	d10f      	bne.n	8003b2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e017      	b.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d19b      	bne.n	8003aa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000020 	.word	0x20000020

08003b80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b92:	f7fe f99f 	bl	8001ed4 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003ba2:	f7fe f997 	bl	8001ed4 <HAL_GetTick>
 8003ba6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bb0:	4b3d      	ldr	r3, [pc, #244]	; (8003ca8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	00da      	lsls	r2, r3, #3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	0d1b      	lsrs	r3, r3, #20
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003bc8:	e060      	b.n	8003c8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bd0:	d107      	bne.n	8003be2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d050      	beq.n	8003c8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bea:	f7fe f973 	bl	8001ed4 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d902      	bls.n	8003c00 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d13d      	bne.n	8003c7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c18:	d111      	bne.n	8003c3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c22:	d004      	beq.n	8003c2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2c:	d107      	bne.n	8003c3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c46:	d10f      	bne.n	8003c68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e010      	b.n	8003c9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d196      	bne.n	8003bca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3728      	adds	r7, #40	; 0x28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000020 	.word	0x20000020

08003cac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f7ff ff5b 	bl	8003b80 <SPI_WaitFifoStateUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e027      	b.n	8003d30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2180      	movs	r1, #128	; 0x80
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7ff fec0 	bl	8003a70 <SPI_WaitFlagStateUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e014      	b.n	8003d30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff ff34 	bl	8003b80 <SPI_WaitFifoStateUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e000      	b.n	8003d30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <__errno>:
 8003d38:	4b01      	ldr	r3, [pc, #4]	; (8003d40 <__errno+0x8>)
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	2000002c 	.word	0x2000002c

08003d44 <__libc_init_array>:
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	4d0d      	ldr	r5, [pc, #52]	; (8003d7c <__libc_init_array+0x38>)
 8003d48:	4c0d      	ldr	r4, [pc, #52]	; (8003d80 <__libc_init_array+0x3c>)
 8003d4a:	1b64      	subs	r4, r4, r5
 8003d4c:	10a4      	asrs	r4, r4, #2
 8003d4e:	2600      	movs	r6, #0
 8003d50:	42a6      	cmp	r6, r4
 8003d52:	d109      	bne.n	8003d68 <__libc_init_array+0x24>
 8003d54:	4d0b      	ldr	r5, [pc, #44]	; (8003d84 <__libc_init_array+0x40>)
 8003d56:	4c0c      	ldr	r4, [pc, #48]	; (8003d88 <__libc_init_array+0x44>)
 8003d58:	f002 f84c 	bl	8005df4 <_init>
 8003d5c:	1b64      	subs	r4, r4, r5
 8003d5e:	10a4      	asrs	r4, r4, #2
 8003d60:	2600      	movs	r6, #0
 8003d62:	42a6      	cmp	r6, r4
 8003d64:	d105      	bne.n	8003d72 <__libc_init_array+0x2e>
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6c:	4798      	blx	r3
 8003d6e:	3601      	adds	r6, #1
 8003d70:	e7ee      	b.n	8003d50 <__libc_init_array+0xc>
 8003d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d76:	4798      	blx	r3
 8003d78:	3601      	adds	r6, #1
 8003d7a:	e7f2      	b.n	8003d62 <__libc_init_array+0x1e>
 8003d7c:	08006060 	.word	0x08006060
 8003d80:	08006060 	.word	0x08006060
 8003d84:	08006060 	.word	0x08006060
 8003d88:	08006064 	.word	0x08006064

08003d8c <memset>:
 8003d8c:	4402      	add	r2, r0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d100      	bne.n	8003d96 <memset+0xa>
 8003d94:	4770      	bx	lr
 8003d96:	f803 1b01 	strb.w	r1, [r3], #1
 8003d9a:	e7f9      	b.n	8003d90 <memset+0x4>
 8003d9c:	0000      	movs	r0, r0
	...

08003da0 <cos>:
 8003da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003da2:	ec53 2b10 	vmov	r2, r3, d0
 8003da6:	4824      	ldr	r0, [pc, #144]	; (8003e38 <cos+0x98>)
 8003da8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003dac:	4281      	cmp	r1, r0
 8003dae:	dc06      	bgt.n	8003dbe <cos+0x1e>
 8003db0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8003e30 <cos+0x90>
 8003db4:	f001 f9a8 	bl	8005108 <__kernel_cos>
 8003db8:	ec51 0b10 	vmov	r0, r1, d0
 8003dbc:	e007      	b.n	8003dce <cos+0x2e>
 8003dbe:	481f      	ldr	r0, [pc, #124]	; (8003e3c <cos+0x9c>)
 8003dc0:	4281      	cmp	r1, r0
 8003dc2:	dd09      	ble.n	8003dd8 <cos+0x38>
 8003dc4:	ee10 0a10 	vmov	r0, s0
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f7fc fa01 	bl	80001d0 <__aeabi_dsub>
 8003dce:	ec41 0b10 	vmov	d0, r0, r1
 8003dd2:	b005      	add	sp, #20
 8003dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dd8:	4668      	mov	r0, sp
 8003dda:	f000 fed5 	bl	8004b88 <__ieee754_rem_pio2>
 8003dde:	f000 0003 	and.w	r0, r0, #3
 8003de2:	2801      	cmp	r0, #1
 8003de4:	d007      	beq.n	8003df6 <cos+0x56>
 8003de6:	2802      	cmp	r0, #2
 8003de8:	d012      	beq.n	8003e10 <cos+0x70>
 8003dea:	b9c0      	cbnz	r0, 8003e1e <cos+0x7e>
 8003dec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003df0:	ed9d 0b00 	vldr	d0, [sp]
 8003df4:	e7de      	b.n	8003db4 <cos+0x14>
 8003df6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003dfa:	ed9d 0b00 	vldr	d0, [sp]
 8003dfe:	f001 fd8b 	bl	8005918 <__kernel_sin>
 8003e02:	ec53 2b10 	vmov	r2, r3, d0
 8003e06:	ee10 0a10 	vmov	r0, s0
 8003e0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003e0e:	e7de      	b.n	8003dce <cos+0x2e>
 8003e10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003e14:	ed9d 0b00 	vldr	d0, [sp]
 8003e18:	f001 f976 	bl	8005108 <__kernel_cos>
 8003e1c:	e7f1      	b.n	8003e02 <cos+0x62>
 8003e1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003e22:	ed9d 0b00 	vldr	d0, [sp]
 8003e26:	2001      	movs	r0, #1
 8003e28:	f001 fd76 	bl	8005918 <__kernel_sin>
 8003e2c:	e7c4      	b.n	8003db8 <cos+0x18>
 8003e2e:	bf00      	nop
	...
 8003e38:	3fe921fb 	.word	0x3fe921fb
 8003e3c:	7fefffff 	.word	0x7fefffff

08003e40 <round>:
 8003e40:	ec51 0b10 	vmov	r0, r1, d0
 8003e44:	b570      	push	{r4, r5, r6, lr}
 8003e46:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8003e4a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8003e4e:	2c13      	cmp	r4, #19
 8003e50:	ee10 2a10 	vmov	r2, s0
 8003e54:	460b      	mov	r3, r1
 8003e56:	dc19      	bgt.n	8003e8c <round+0x4c>
 8003e58:	2c00      	cmp	r4, #0
 8003e5a:	da09      	bge.n	8003e70 <round+0x30>
 8003e5c:	3401      	adds	r4, #1
 8003e5e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8003e62:	d103      	bne.n	8003e6c <round+0x2c>
 8003e64:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003e68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	e028      	b.n	8003ec2 <round+0x82>
 8003e70:	4d15      	ldr	r5, [pc, #84]	; (8003ec8 <round+0x88>)
 8003e72:	4125      	asrs	r5, r4
 8003e74:	ea01 0605 	and.w	r6, r1, r5
 8003e78:	4332      	orrs	r2, r6
 8003e7a:	d00e      	beq.n	8003e9a <round+0x5a>
 8003e7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e80:	fa42 f404 	asr.w	r4, r2, r4
 8003e84:	4423      	add	r3, r4
 8003e86:	ea23 0305 	bic.w	r3, r3, r5
 8003e8a:	e7ef      	b.n	8003e6c <round+0x2c>
 8003e8c:	2c33      	cmp	r4, #51	; 0x33
 8003e8e:	dd07      	ble.n	8003ea0 <round+0x60>
 8003e90:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003e94:	d101      	bne.n	8003e9a <round+0x5a>
 8003e96:	f7fc f99d 	bl	80001d4 <__adddf3>
 8003e9a:	ec41 0b10 	vmov	d0, r0, r1
 8003e9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ea0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8003ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8003ea8:	40f5      	lsrs	r5, r6
 8003eaa:	4228      	tst	r0, r5
 8003eac:	d0f5      	beq.n	8003e9a <round+0x5a>
 8003eae:	2101      	movs	r1, #1
 8003eb0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8003eb4:	fa01 f404 	lsl.w	r4, r1, r4
 8003eb8:	1912      	adds	r2, r2, r4
 8003eba:	bf28      	it	cs
 8003ebc:	185b      	addcs	r3, r3, r1
 8003ebe:	ea22 0105 	bic.w	r1, r2, r5
 8003ec2:	4608      	mov	r0, r1
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	e7e8      	b.n	8003e9a <round+0x5a>
 8003ec8:	000fffff 	.word	0x000fffff
 8003ecc:	00000000 	.word	0x00000000

08003ed0 <sin>:
 8003ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ed2:	ec53 2b10 	vmov	r2, r3, d0
 8003ed6:	4826      	ldr	r0, [pc, #152]	; (8003f70 <sin+0xa0>)
 8003ed8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003edc:	4281      	cmp	r1, r0
 8003ede:	dc07      	bgt.n	8003ef0 <sin+0x20>
 8003ee0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003f68 <sin+0x98>
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f001 fd17 	bl	8005918 <__kernel_sin>
 8003eea:	ec51 0b10 	vmov	r0, r1, d0
 8003eee:	e007      	b.n	8003f00 <sin+0x30>
 8003ef0:	4820      	ldr	r0, [pc, #128]	; (8003f74 <sin+0xa4>)
 8003ef2:	4281      	cmp	r1, r0
 8003ef4:	dd09      	ble.n	8003f0a <sin+0x3a>
 8003ef6:	ee10 0a10 	vmov	r0, s0
 8003efa:	4619      	mov	r1, r3
 8003efc:	f7fc f968 	bl	80001d0 <__aeabi_dsub>
 8003f00:	ec41 0b10 	vmov	d0, r0, r1
 8003f04:	b005      	add	sp, #20
 8003f06:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f0a:	4668      	mov	r0, sp
 8003f0c:	f000 fe3c 	bl	8004b88 <__ieee754_rem_pio2>
 8003f10:	f000 0003 	and.w	r0, r0, #3
 8003f14:	2801      	cmp	r0, #1
 8003f16:	d008      	beq.n	8003f2a <sin+0x5a>
 8003f18:	2802      	cmp	r0, #2
 8003f1a:	d00d      	beq.n	8003f38 <sin+0x68>
 8003f1c:	b9d0      	cbnz	r0, 8003f54 <sin+0x84>
 8003f1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f22:	ed9d 0b00 	vldr	d0, [sp]
 8003f26:	2001      	movs	r0, #1
 8003f28:	e7dd      	b.n	8003ee6 <sin+0x16>
 8003f2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f2e:	ed9d 0b00 	vldr	d0, [sp]
 8003f32:	f001 f8e9 	bl	8005108 <__kernel_cos>
 8003f36:	e7d8      	b.n	8003eea <sin+0x1a>
 8003f38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f3c:	ed9d 0b00 	vldr	d0, [sp]
 8003f40:	2001      	movs	r0, #1
 8003f42:	f001 fce9 	bl	8005918 <__kernel_sin>
 8003f46:	ec53 2b10 	vmov	r2, r3, d0
 8003f4a:	ee10 0a10 	vmov	r0, s0
 8003f4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003f52:	e7d5      	b.n	8003f00 <sin+0x30>
 8003f54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f58:	ed9d 0b00 	vldr	d0, [sp]
 8003f5c:	f001 f8d4 	bl	8005108 <__kernel_cos>
 8003f60:	e7f1      	b.n	8003f46 <sin+0x76>
 8003f62:	bf00      	nop
 8003f64:	f3af 8000 	nop.w
	...
 8003f70:	3fe921fb 	.word	0x3fe921fb
 8003f74:	7fefffff 	.word	0x7fefffff

08003f78 <pow>:
 8003f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f7c:	ec59 8b10 	vmov	r8, r9, d0
 8003f80:	ec57 6b11 	vmov	r6, r7, d1
 8003f84:	f000 f8dc 	bl	8004140 <__ieee754_pow>
 8003f88:	4b4e      	ldr	r3, [pc, #312]	; (80040c4 <pow+0x14c>)
 8003f8a:	f993 3000 	ldrsb.w	r3, [r3]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	ec55 4b10 	vmov	r4, r5, d0
 8003f94:	d015      	beq.n	8003fc2 <pow+0x4a>
 8003f96:	4632      	mov	r2, r6
 8003f98:	463b      	mov	r3, r7
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	4639      	mov	r1, r7
 8003f9e:	f7fc fd69 	bl	8000a74 <__aeabi_dcmpun>
 8003fa2:	b970      	cbnz	r0, 8003fc2 <pow+0x4a>
 8003fa4:	4642      	mov	r2, r8
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	4640      	mov	r0, r8
 8003faa:	4649      	mov	r1, r9
 8003fac:	f7fc fd62 	bl	8000a74 <__aeabi_dcmpun>
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	b148      	cbz	r0, 8003fca <pow+0x52>
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	4639      	mov	r1, r7
 8003fba:	f7fc fd29 	bl	8000a10 <__aeabi_dcmpeq>
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d17d      	bne.n	80040be <pow+0x146>
 8003fc2:	ec45 4b10 	vmov	d0, r4, r5
 8003fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fca:	4640      	mov	r0, r8
 8003fcc:	4649      	mov	r1, r9
 8003fce:	f7fc fd1f 	bl	8000a10 <__aeabi_dcmpeq>
 8003fd2:	b1e0      	cbz	r0, 800400e <pow+0x96>
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	4630      	mov	r0, r6
 8003fda:	4639      	mov	r1, r7
 8003fdc:	f7fc fd18 	bl	8000a10 <__aeabi_dcmpeq>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d16c      	bne.n	80040be <pow+0x146>
 8003fe4:	ec47 6b10 	vmov	d0, r6, r7
 8003fe8:	f001 fd5d 	bl	8005aa6 <finite>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d0e8      	beq.n	8003fc2 <pow+0x4a>
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	4639      	mov	r1, r7
 8003ff8:	f7fc fd14 	bl	8000a24 <__aeabi_dcmplt>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d0e0      	beq.n	8003fc2 <pow+0x4a>
 8004000:	f7ff fe9a 	bl	8003d38 <__errno>
 8004004:	2321      	movs	r3, #33	; 0x21
 8004006:	6003      	str	r3, [r0, #0]
 8004008:	2400      	movs	r4, #0
 800400a:	4d2f      	ldr	r5, [pc, #188]	; (80040c8 <pow+0x150>)
 800400c:	e7d9      	b.n	8003fc2 <pow+0x4a>
 800400e:	ec45 4b10 	vmov	d0, r4, r5
 8004012:	f001 fd48 	bl	8005aa6 <finite>
 8004016:	bbb8      	cbnz	r0, 8004088 <pow+0x110>
 8004018:	ec49 8b10 	vmov	d0, r8, r9
 800401c:	f001 fd43 	bl	8005aa6 <finite>
 8004020:	b390      	cbz	r0, 8004088 <pow+0x110>
 8004022:	ec47 6b10 	vmov	d0, r6, r7
 8004026:	f001 fd3e 	bl	8005aa6 <finite>
 800402a:	b368      	cbz	r0, 8004088 <pow+0x110>
 800402c:	4622      	mov	r2, r4
 800402e:	462b      	mov	r3, r5
 8004030:	4620      	mov	r0, r4
 8004032:	4629      	mov	r1, r5
 8004034:	f7fc fd1e 	bl	8000a74 <__aeabi_dcmpun>
 8004038:	b160      	cbz	r0, 8004054 <pow+0xdc>
 800403a:	f7ff fe7d 	bl	8003d38 <__errno>
 800403e:	2321      	movs	r3, #33	; 0x21
 8004040:	6003      	str	r3, [r0, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	2300      	movs	r3, #0
 8004046:	4610      	mov	r0, r2
 8004048:	4619      	mov	r1, r3
 800404a:	f7fc fba3 	bl	8000794 <__aeabi_ddiv>
 800404e:	4604      	mov	r4, r0
 8004050:	460d      	mov	r5, r1
 8004052:	e7b6      	b.n	8003fc2 <pow+0x4a>
 8004054:	f7ff fe70 	bl	8003d38 <__errno>
 8004058:	2322      	movs	r3, #34	; 0x22
 800405a:	6003      	str	r3, [r0, #0]
 800405c:	2200      	movs	r2, #0
 800405e:	2300      	movs	r3, #0
 8004060:	4640      	mov	r0, r8
 8004062:	4649      	mov	r1, r9
 8004064:	f7fc fcde 	bl	8000a24 <__aeabi_dcmplt>
 8004068:	2400      	movs	r4, #0
 800406a:	b158      	cbz	r0, 8004084 <pow+0x10c>
 800406c:	ec47 6b10 	vmov	d0, r6, r7
 8004070:	f001 fdae 	bl	8005bd0 <rint>
 8004074:	4632      	mov	r2, r6
 8004076:	ec51 0b10 	vmov	r0, r1, d0
 800407a:	463b      	mov	r3, r7
 800407c:	f7fc fcc8 	bl	8000a10 <__aeabi_dcmpeq>
 8004080:	2800      	cmp	r0, #0
 8004082:	d0c2      	beq.n	800400a <pow+0x92>
 8004084:	4d11      	ldr	r5, [pc, #68]	; (80040cc <pow+0x154>)
 8004086:	e79c      	b.n	8003fc2 <pow+0x4a>
 8004088:	2200      	movs	r2, #0
 800408a:	2300      	movs	r3, #0
 800408c:	4620      	mov	r0, r4
 800408e:	4629      	mov	r1, r5
 8004090:	f7fc fcbe 	bl	8000a10 <__aeabi_dcmpeq>
 8004094:	2800      	cmp	r0, #0
 8004096:	d094      	beq.n	8003fc2 <pow+0x4a>
 8004098:	ec49 8b10 	vmov	d0, r8, r9
 800409c:	f001 fd03 	bl	8005aa6 <finite>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d08e      	beq.n	8003fc2 <pow+0x4a>
 80040a4:	ec47 6b10 	vmov	d0, r6, r7
 80040a8:	f001 fcfd 	bl	8005aa6 <finite>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d088      	beq.n	8003fc2 <pow+0x4a>
 80040b0:	f7ff fe42 	bl	8003d38 <__errno>
 80040b4:	2322      	movs	r3, #34	; 0x22
 80040b6:	6003      	str	r3, [r0, #0]
 80040b8:	2400      	movs	r4, #0
 80040ba:	2500      	movs	r5, #0
 80040bc:	e781      	b.n	8003fc2 <pow+0x4a>
 80040be:	4d04      	ldr	r5, [pc, #16]	; (80040d0 <pow+0x158>)
 80040c0:	2400      	movs	r4, #0
 80040c2:	e77e      	b.n	8003fc2 <pow+0x4a>
 80040c4:	20000090 	.word	0x20000090
 80040c8:	fff00000 	.word	0xfff00000
 80040cc:	7ff00000 	.word	0x7ff00000
 80040d0:	3ff00000 	.word	0x3ff00000

080040d4 <sqrt>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	ed2d 8b02 	vpush	{d8}
 80040da:	ec55 4b10 	vmov	r4, r5, d0
 80040de:	f000 ff5d 	bl	8004f9c <__ieee754_sqrt>
 80040e2:	4b15      	ldr	r3, [pc, #84]	; (8004138 <sqrt+0x64>)
 80040e4:	eeb0 8a40 	vmov.f32	s16, s0
 80040e8:	eef0 8a60 	vmov.f32	s17, s1
 80040ec:	f993 3000 	ldrsb.w	r3, [r3]
 80040f0:	3301      	adds	r3, #1
 80040f2:	d019      	beq.n	8004128 <sqrt+0x54>
 80040f4:	4622      	mov	r2, r4
 80040f6:	462b      	mov	r3, r5
 80040f8:	4620      	mov	r0, r4
 80040fa:	4629      	mov	r1, r5
 80040fc:	f7fc fcba 	bl	8000a74 <__aeabi_dcmpun>
 8004100:	b990      	cbnz	r0, 8004128 <sqrt+0x54>
 8004102:	2200      	movs	r2, #0
 8004104:	2300      	movs	r3, #0
 8004106:	4620      	mov	r0, r4
 8004108:	4629      	mov	r1, r5
 800410a:	f7fc fc8b 	bl	8000a24 <__aeabi_dcmplt>
 800410e:	b158      	cbz	r0, 8004128 <sqrt+0x54>
 8004110:	f7ff fe12 	bl	8003d38 <__errno>
 8004114:	2321      	movs	r3, #33	; 0x21
 8004116:	6003      	str	r3, [r0, #0]
 8004118:	2200      	movs	r2, #0
 800411a:	2300      	movs	r3, #0
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	f7fc fb38 	bl	8000794 <__aeabi_ddiv>
 8004124:	ec41 0b18 	vmov	d8, r0, r1
 8004128:	eeb0 0a48 	vmov.f32	s0, s16
 800412c:	eef0 0a68 	vmov.f32	s1, s17
 8004130:	ecbd 8b02 	vpop	{d8}
 8004134:	bd38      	pop	{r3, r4, r5, pc}
 8004136:	bf00      	nop
 8004138:	20000090 	.word	0x20000090
 800413c:	00000000 	.word	0x00000000

08004140 <__ieee754_pow>:
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	ed2d 8b06 	vpush	{d8-d10}
 8004148:	b08d      	sub	sp, #52	; 0x34
 800414a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800414e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8004152:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004156:	ea56 0100 	orrs.w	r1, r6, r0
 800415a:	ec53 2b10 	vmov	r2, r3, d0
 800415e:	f000 84d1 	beq.w	8004b04 <__ieee754_pow+0x9c4>
 8004162:	497f      	ldr	r1, [pc, #508]	; (8004360 <__ieee754_pow+0x220>)
 8004164:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8004168:	428c      	cmp	r4, r1
 800416a:	ee10 8a10 	vmov	r8, s0
 800416e:	4699      	mov	r9, r3
 8004170:	dc09      	bgt.n	8004186 <__ieee754_pow+0x46>
 8004172:	d103      	bne.n	800417c <__ieee754_pow+0x3c>
 8004174:	b97a      	cbnz	r2, 8004196 <__ieee754_pow+0x56>
 8004176:	42a6      	cmp	r6, r4
 8004178:	dd02      	ble.n	8004180 <__ieee754_pow+0x40>
 800417a:	e00c      	b.n	8004196 <__ieee754_pow+0x56>
 800417c:	428e      	cmp	r6, r1
 800417e:	dc02      	bgt.n	8004186 <__ieee754_pow+0x46>
 8004180:	428e      	cmp	r6, r1
 8004182:	d110      	bne.n	80041a6 <__ieee754_pow+0x66>
 8004184:	b178      	cbz	r0, 80041a6 <__ieee754_pow+0x66>
 8004186:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800418a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800418e:	ea54 0308 	orrs.w	r3, r4, r8
 8004192:	f000 84b7 	beq.w	8004b04 <__ieee754_pow+0x9c4>
 8004196:	4873      	ldr	r0, [pc, #460]	; (8004364 <__ieee754_pow+0x224>)
 8004198:	b00d      	add	sp, #52	; 0x34
 800419a:	ecbd 8b06 	vpop	{d8-d10}
 800419e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a2:	f001 bd0d 	b.w	8005bc0 <nan>
 80041a6:	f1b9 0f00 	cmp.w	r9, #0
 80041aa:	da36      	bge.n	800421a <__ieee754_pow+0xda>
 80041ac:	496e      	ldr	r1, [pc, #440]	; (8004368 <__ieee754_pow+0x228>)
 80041ae:	428e      	cmp	r6, r1
 80041b0:	dc51      	bgt.n	8004256 <__ieee754_pow+0x116>
 80041b2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80041b6:	428e      	cmp	r6, r1
 80041b8:	f340 84af 	ble.w	8004b1a <__ieee754_pow+0x9da>
 80041bc:	1531      	asrs	r1, r6, #20
 80041be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80041c2:	2914      	cmp	r1, #20
 80041c4:	dd0f      	ble.n	80041e6 <__ieee754_pow+0xa6>
 80041c6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80041ca:	fa20 fc01 	lsr.w	ip, r0, r1
 80041ce:	fa0c f101 	lsl.w	r1, ip, r1
 80041d2:	4281      	cmp	r1, r0
 80041d4:	f040 84a1 	bne.w	8004b1a <__ieee754_pow+0x9da>
 80041d8:	f00c 0c01 	and.w	ip, ip, #1
 80041dc:	f1cc 0102 	rsb	r1, ip, #2
 80041e0:	9100      	str	r1, [sp, #0]
 80041e2:	b180      	cbz	r0, 8004206 <__ieee754_pow+0xc6>
 80041e4:	e059      	b.n	800429a <__ieee754_pow+0x15a>
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d155      	bne.n	8004296 <__ieee754_pow+0x156>
 80041ea:	f1c1 0114 	rsb	r1, r1, #20
 80041ee:	fa46 fc01 	asr.w	ip, r6, r1
 80041f2:	fa0c f101 	lsl.w	r1, ip, r1
 80041f6:	42b1      	cmp	r1, r6
 80041f8:	f040 848c 	bne.w	8004b14 <__ieee754_pow+0x9d4>
 80041fc:	f00c 0c01 	and.w	ip, ip, #1
 8004200:	f1cc 0102 	rsb	r1, ip, #2
 8004204:	9100      	str	r1, [sp, #0]
 8004206:	4959      	ldr	r1, [pc, #356]	; (800436c <__ieee754_pow+0x22c>)
 8004208:	428e      	cmp	r6, r1
 800420a:	d12d      	bne.n	8004268 <__ieee754_pow+0x128>
 800420c:	2f00      	cmp	r7, #0
 800420e:	da79      	bge.n	8004304 <__ieee754_pow+0x1c4>
 8004210:	4956      	ldr	r1, [pc, #344]	; (800436c <__ieee754_pow+0x22c>)
 8004212:	2000      	movs	r0, #0
 8004214:	f7fc fabe 	bl	8000794 <__aeabi_ddiv>
 8004218:	e016      	b.n	8004248 <__ieee754_pow+0x108>
 800421a:	2100      	movs	r1, #0
 800421c:	9100      	str	r1, [sp, #0]
 800421e:	2800      	cmp	r0, #0
 8004220:	d13b      	bne.n	800429a <__ieee754_pow+0x15a>
 8004222:	494f      	ldr	r1, [pc, #316]	; (8004360 <__ieee754_pow+0x220>)
 8004224:	428e      	cmp	r6, r1
 8004226:	d1ee      	bne.n	8004206 <__ieee754_pow+0xc6>
 8004228:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800422c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004230:	ea53 0308 	orrs.w	r3, r3, r8
 8004234:	f000 8466 	beq.w	8004b04 <__ieee754_pow+0x9c4>
 8004238:	4b4d      	ldr	r3, [pc, #308]	; (8004370 <__ieee754_pow+0x230>)
 800423a:	429c      	cmp	r4, r3
 800423c:	dd0d      	ble.n	800425a <__ieee754_pow+0x11a>
 800423e:	2f00      	cmp	r7, #0
 8004240:	f280 8464 	bge.w	8004b0c <__ieee754_pow+0x9cc>
 8004244:	2000      	movs	r0, #0
 8004246:	2100      	movs	r1, #0
 8004248:	ec41 0b10 	vmov	d0, r0, r1
 800424c:	b00d      	add	sp, #52	; 0x34
 800424e:	ecbd 8b06 	vpop	{d8-d10}
 8004252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004256:	2102      	movs	r1, #2
 8004258:	e7e0      	b.n	800421c <__ieee754_pow+0xdc>
 800425a:	2f00      	cmp	r7, #0
 800425c:	daf2      	bge.n	8004244 <__ieee754_pow+0x104>
 800425e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8004262:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004266:	e7ef      	b.n	8004248 <__ieee754_pow+0x108>
 8004268:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800426c:	d104      	bne.n	8004278 <__ieee754_pow+0x138>
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	f7fc f965 	bl	8000540 <__aeabi_dmul>
 8004276:	e7e7      	b.n	8004248 <__ieee754_pow+0x108>
 8004278:	493e      	ldr	r1, [pc, #248]	; (8004374 <__ieee754_pow+0x234>)
 800427a:	428f      	cmp	r7, r1
 800427c:	d10d      	bne.n	800429a <__ieee754_pow+0x15a>
 800427e:	f1b9 0f00 	cmp.w	r9, #0
 8004282:	db0a      	blt.n	800429a <__ieee754_pow+0x15a>
 8004284:	ec43 2b10 	vmov	d0, r2, r3
 8004288:	b00d      	add	sp, #52	; 0x34
 800428a:	ecbd 8b06 	vpop	{d8-d10}
 800428e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004292:	f000 be83 	b.w	8004f9c <__ieee754_sqrt>
 8004296:	2100      	movs	r1, #0
 8004298:	9100      	str	r1, [sp, #0]
 800429a:	ec43 2b10 	vmov	d0, r2, r3
 800429e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80042a2:	f001 fbf7 	bl	8005a94 <fabs>
 80042a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042aa:	ec51 0b10 	vmov	r0, r1, d0
 80042ae:	f1b8 0f00 	cmp.w	r8, #0
 80042b2:	d12a      	bne.n	800430a <__ieee754_pow+0x1ca>
 80042b4:	b12c      	cbz	r4, 80042c2 <__ieee754_pow+0x182>
 80042b6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800436c <__ieee754_pow+0x22c>
 80042ba:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80042be:	45e6      	cmp	lr, ip
 80042c0:	d123      	bne.n	800430a <__ieee754_pow+0x1ca>
 80042c2:	2f00      	cmp	r7, #0
 80042c4:	da05      	bge.n	80042d2 <__ieee754_pow+0x192>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	2000      	movs	r0, #0
 80042cc:	4927      	ldr	r1, [pc, #156]	; (800436c <__ieee754_pow+0x22c>)
 80042ce:	f7fc fa61 	bl	8000794 <__aeabi_ddiv>
 80042d2:	f1b9 0f00 	cmp.w	r9, #0
 80042d6:	dab7      	bge.n	8004248 <__ieee754_pow+0x108>
 80042d8:	9b00      	ldr	r3, [sp, #0]
 80042da:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80042de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80042e2:	4323      	orrs	r3, r4
 80042e4:	d108      	bne.n	80042f8 <__ieee754_pow+0x1b8>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4610      	mov	r0, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	f7fb ff6f 	bl	80001d0 <__aeabi_dsub>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	e78d      	b.n	8004214 <__ieee754_pow+0xd4>
 80042f8:	9b00      	ldr	r3, [sp, #0]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d1a4      	bne.n	8004248 <__ieee754_pow+0x108>
 80042fe:	4602      	mov	r2, r0
 8004300:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004304:	4610      	mov	r0, r2
 8004306:	4619      	mov	r1, r3
 8004308:	e79e      	b.n	8004248 <__ieee754_pow+0x108>
 800430a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800430e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8004312:	950a      	str	r5, [sp, #40]	; 0x28
 8004314:	9d00      	ldr	r5, [sp, #0]
 8004316:	46ac      	mov	ip, r5
 8004318:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800431a:	ea5c 0505 	orrs.w	r5, ip, r5
 800431e:	d0e4      	beq.n	80042ea <__ieee754_pow+0x1aa>
 8004320:	4b15      	ldr	r3, [pc, #84]	; (8004378 <__ieee754_pow+0x238>)
 8004322:	429e      	cmp	r6, r3
 8004324:	f340 80fc 	ble.w	8004520 <__ieee754_pow+0x3e0>
 8004328:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800432c:	429e      	cmp	r6, r3
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <__ieee754_pow+0x230>)
 8004330:	dd07      	ble.n	8004342 <__ieee754_pow+0x202>
 8004332:	429c      	cmp	r4, r3
 8004334:	dc0a      	bgt.n	800434c <__ieee754_pow+0x20c>
 8004336:	2f00      	cmp	r7, #0
 8004338:	da84      	bge.n	8004244 <__ieee754_pow+0x104>
 800433a:	a307      	add	r3, pc, #28	; (adr r3, 8004358 <__ieee754_pow+0x218>)
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	e795      	b.n	800426e <__ieee754_pow+0x12e>
 8004342:	429c      	cmp	r4, r3
 8004344:	dbf7      	blt.n	8004336 <__ieee754_pow+0x1f6>
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <__ieee754_pow+0x22c>)
 8004348:	429c      	cmp	r4, r3
 800434a:	dd17      	ble.n	800437c <__ieee754_pow+0x23c>
 800434c:	2f00      	cmp	r7, #0
 800434e:	dcf4      	bgt.n	800433a <__ieee754_pow+0x1fa>
 8004350:	e778      	b.n	8004244 <__ieee754_pow+0x104>
 8004352:	bf00      	nop
 8004354:	f3af 8000 	nop.w
 8004358:	8800759c 	.word	0x8800759c
 800435c:	7e37e43c 	.word	0x7e37e43c
 8004360:	7ff00000 	.word	0x7ff00000
 8004364:	08005e40 	.word	0x08005e40
 8004368:	433fffff 	.word	0x433fffff
 800436c:	3ff00000 	.word	0x3ff00000
 8004370:	3fefffff 	.word	0x3fefffff
 8004374:	3fe00000 	.word	0x3fe00000
 8004378:	41e00000 	.word	0x41e00000
 800437c:	4b64      	ldr	r3, [pc, #400]	; (8004510 <__ieee754_pow+0x3d0>)
 800437e:	2200      	movs	r2, #0
 8004380:	f7fb ff26 	bl	80001d0 <__aeabi_dsub>
 8004384:	a356      	add	r3, pc, #344	; (adr r3, 80044e0 <__ieee754_pow+0x3a0>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	4604      	mov	r4, r0
 800438c:	460d      	mov	r5, r1
 800438e:	f7fc f8d7 	bl	8000540 <__aeabi_dmul>
 8004392:	a355      	add	r3, pc, #340	; (adr r3, 80044e8 <__ieee754_pow+0x3a8>)
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	4606      	mov	r6, r0
 800439a:	460f      	mov	r7, r1
 800439c:	4620      	mov	r0, r4
 800439e:	4629      	mov	r1, r5
 80043a0:	f7fc f8ce 	bl	8000540 <__aeabi_dmul>
 80043a4:	4b5b      	ldr	r3, [pc, #364]	; (8004514 <__ieee754_pow+0x3d4>)
 80043a6:	4682      	mov	sl, r0
 80043a8:	468b      	mov	fp, r1
 80043aa:	2200      	movs	r2, #0
 80043ac:	4620      	mov	r0, r4
 80043ae:	4629      	mov	r1, r5
 80043b0:	f7fc f8c6 	bl	8000540 <__aeabi_dmul>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	a14d      	add	r1, pc, #308	; (adr r1, 80044f0 <__ieee754_pow+0x3b0>)
 80043ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043be:	f7fb ff07 	bl	80001d0 <__aeabi_dsub>
 80043c2:	4622      	mov	r2, r4
 80043c4:	462b      	mov	r3, r5
 80043c6:	f7fc f8bb 	bl	8000540 <__aeabi_dmul>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	2000      	movs	r0, #0
 80043d0:	4951      	ldr	r1, [pc, #324]	; (8004518 <__ieee754_pow+0x3d8>)
 80043d2:	f7fb fefd 	bl	80001d0 <__aeabi_dsub>
 80043d6:	4622      	mov	r2, r4
 80043d8:	4680      	mov	r8, r0
 80043da:	4689      	mov	r9, r1
 80043dc:	462b      	mov	r3, r5
 80043de:	4620      	mov	r0, r4
 80043e0:	4629      	mov	r1, r5
 80043e2:	f7fc f8ad 	bl	8000540 <__aeabi_dmul>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4640      	mov	r0, r8
 80043ec:	4649      	mov	r1, r9
 80043ee:	f7fc f8a7 	bl	8000540 <__aeabi_dmul>
 80043f2:	a341      	add	r3, pc, #260	; (adr r3, 80044f8 <__ieee754_pow+0x3b8>)
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f7fc f8a2 	bl	8000540 <__aeabi_dmul>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4650      	mov	r0, sl
 8004402:	4659      	mov	r1, fp
 8004404:	f7fb fee4 	bl	80001d0 <__aeabi_dsub>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4680      	mov	r8, r0
 800440e:	4689      	mov	r9, r1
 8004410:	4630      	mov	r0, r6
 8004412:	4639      	mov	r1, r7
 8004414:	f7fb fede 	bl	80001d4 <__adddf3>
 8004418:	2400      	movs	r4, #0
 800441a:	4632      	mov	r2, r6
 800441c:	463b      	mov	r3, r7
 800441e:	4620      	mov	r0, r4
 8004420:	460d      	mov	r5, r1
 8004422:	f7fb fed5 	bl	80001d0 <__aeabi_dsub>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4640      	mov	r0, r8
 800442c:	4649      	mov	r1, r9
 800442e:	f7fb fecf 	bl	80001d0 <__aeabi_dsub>
 8004432:	9b00      	ldr	r3, [sp, #0]
 8004434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004436:	3b01      	subs	r3, #1
 8004438:	4313      	orrs	r3, r2
 800443a:	4682      	mov	sl, r0
 800443c:	468b      	mov	fp, r1
 800443e:	f040 81f1 	bne.w	8004824 <__ieee754_pow+0x6e4>
 8004442:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8004500 <__ieee754_pow+0x3c0>
 8004446:	eeb0 8a47 	vmov.f32	s16, s14
 800444a:	eef0 8a67 	vmov.f32	s17, s15
 800444e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004452:	2600      	movs	r6, #0
 8004454:	4632      	mov	r2, r6
 8004456:	463b      	mov	r3, r7
 8004458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800445c:	f7fb feb8 	bl	80001d0 <__aeabi_dsub>
 8004460:	4622      	mov	r2, r4
 8004462:	462b      	mov	r3, r5
 8004464:	f7fc f86c 	bl	8000540 <__aeabi_dmul>
 8004468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800446c:	4680      	mov	r8, r0
 800446e:	4689      	mov	r9, r1
 8004470:	4650      	mov	r0, sl
 8004472:	4659      	mov	r1, fp
 8004474:	f7fc f864 	bl	8000540 <__aeabi_dmul>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4640      	mov	r0, r8
 800447e:	4649      	mov	r1, r9
 8004480:	f7fb fea8 	bl	80001d4 <__adddf3>
 8004484:	4632      	mov	r2, r6
 8004486:	463b      	mov	r3, r7
 8004488:	4680      	mov	r8, r0
 800448a:	4689      	mov	r9, r1
 800448c:	4620      	mov	r0, r4
 800448e:	4629      	mov	r1, r5
 8004490:	f7fc f856 	bl	8000540 <__aeabi_dmul>
 8004494:	460b      	mov	r3, r1
 8004496:	4604      	mov	r4, r0
 8004498:	460d      	mov	r5, r1
 800449a:	4602      	mov	r2, r0
 800449c:	4649      	mov	r1, r9
 800449e:	4640      	mov	r0, r8
 80044a0:	f7fb fe98 	bl	80001d4 <__adddf3>
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <__ieee754_pow+0x3dc>)
 80044a6:	4299      	cmp	r1, r3
 80044a8:	ec45 4b19 	vmov	d9, r4, r5
 80044ac:	4606      	mov	r6, r0
 80044ae:	460f      	mov	r7, r1
 80044b0:	468b      	mov	fp, r1
 80044b2:	f340 82fe 	ble.w	8004ab2 <__ieee754_pow+0x972>
 80044b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80044ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80044be:	4303      	orrs	r3, r0
 80044c0:	f000 81f0 	beq.w	80048a4 <__ieee754_pow+0x764>
 80044c4:	a310      	add	r3, pc, #64	; (adr r3, 8004508 <__ieee754_pow+0x3c8>)
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	ec51 0b18 	vmov	r0, r1, d8
 80044ce:	f7fc f837 	bl	8000540 <__aeabi_dmul>
 80044d2:	a30d      	add	r3, pc, #52	; (adr r3, 8004508 <__ieee754_pow+0x3c8>)
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	e6cb      	b.n	8004272 <__ieee754_pow+0x132>
 80044da:	bf00      	nop
 80044dc:	f3af 8000 	nop.w
 80044e0:	60000000 	.word	0x60000000
 80044e4:	3ff71547 	.word	0x3ff71547
 80044e8:	f85ddf44 	.word	0xf85ddf44
 80044ec:	3e54ae0b 	.word	0x3e54ae0b
 80044f0:	55555555 	.word	0x55555555
 80044f4:	3fd55555 	.word	0x3fd55555
 80044f8:	652b82fe 	.word	0x652b82fe
 80044fc:	3ff71547 	.word	0x3ff71547
 8004500:	00000000 	.word	0x00000000
 8004504:	bff00000 	.word	0xbff00000
 8004508:	8800759c 	.word	0x8800759c
 800450c:	7e37e43c 	.word	0x7e37e43c
 8004510:	3ff00000 	.word	0x3ff00000
 8004514:	3fd00000 	.word	0x3fd00000
 8004518:	3fe00000 	.word	0x3fe00000
 800451c:	408fffff 	.word	0x408fffff
 8004520:	4bd7      	ldr	r3, [pc, #860]	; (8004880 <__ieee754_pow+0x740>)
 8004522:	ea03 0309 	and.w	r3, r3, r9
 8004526:	2200      	movs	r2, #0
 8004528:	b92b      	cbnz	r3, 8004536 <__ieee754_pow+0x3f6>
 800452a:	4bd6      	ldr	r3, [pc, #856]	; (8004884 <__ieee754_pow+0x744>)
 800452c:	f7fc f808 	bl	8000540 <__aeabi_dmul>
 8004530:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004534:	460c      	mov	r4, r1
 8004536:	1523      	asrs	r3, r4, #20
 8004538:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800453c:	4413      	add	r3, r2
 800453e:	9309      	str	r3, [sp, #36]	; 0x24
 8004540:	4bd1      	ldr	r3, [pc, #836]	; (8004888 <__ieee754_pow+0x748>)
 8004542:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004546:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800454a:	429c      	cmp	r4, r3
 800454c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004550:	dd08      	ble.n	8004564 <__ieee754_pow+0x424>
 8004552:	4bce      	ldr	r3, [pc, #824]	; (800488c <__ieee754_pow+0x74c>)
 8004554:	429c      	cmp	r4, r3
 8004556:	f340 8163 	ble.w	8004820 <__ieee754_pow+0x6e0>
 800455a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800455c:	3301      	adds	r3, #1
 800455e:	9309      	str	r3, [sp, #36]	; 0x24
 8004560:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004564:	2400      	movs	r4, #0
 8004566:	00e3      	lsls	r3, r4, #3
 8004568:	930b      	str	r3, [sp, #44]	; 0x2c
 800456a:	4bc9      	ldr	r3, [pc, #804]	; (8004890 <__ieee754_pow+0x750>)
 800456c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004570:	ed93 7b00 	vldr	d7, [r3]
 8004574:	4629      	mov	r1, r5
 8004576:	ec53 2b17 	vmov	r2, r3, d7
 800457a:	eeb0 8a47 	vmov.f32	s16, s14
 800457e:	eef0 8a67 	vmov.f32	s17, s15
 8004582:	4682      	mov	sl, r0
 8004584:	f7fb fe24 	bl	80001d0 <__aeabi_dsub>
 8004588:	4652      	mov	r2, sl
 800458a:	4606      	mov	r6, r0
 800458c:	460f      	mov	r7, r1
 800458e:	462b      	mov	r3, r5
 8004590:	ec51 0b18 	vmov	r0, r1, d8
 8004594:	f7fb fe1e 	bl	80001d4 <__adddf3>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	2000      	movs	r0, #0
 800459e:	49bd      	ldr	r1, [pc, #756]	; (8004894 <__ieee754_pow+0x754>)
 80045a0:	f7fc f8f8 	bl	8000794 <__aeabi_ddiv>
 80045a4:	ec41 0b19 	vmov	d9, r0, r1
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4630      	mov	r0, r6
 80045ae:	4639      	mov	r1, r7
 80045b0:	f7fb ffc6 	bl	8000540 <__aeabi_dmul>
 80045b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80045b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80045bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045c0:	2300      	movs	r3, #0
 80045c2:	9304      	str	r3, [sp, #16]
 80045c4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80045c8:	46ab      	mov	fp, r5
 80045ca:	106d      	asrs	r5, r5, #1
 80045cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80045d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80045d4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80045d8:	2200      	movs	r2, #0
 80045da:	4640      	mov	r0, r8
 80045dc:	4649      	mov	r1, r9
 80045de:	4614      	mov	r4, r2
 80045e0:	461d      	mov	r5, r3
 80045e2:	f7fb ffad 	bl	8000540 <__aeabi_dmul>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4630      	mov	r0, r6
 80045ec:	4639      	mov	r1, r7
 80045ee:	f7fb fdef 	bl	80001d0 <__aeabi_dsub>
 80045f2:	ec53 2b18 	vmov	r2, r3, d8
 80045f6:	4606      	mov	r6, r0
 80045f8:	460f      	mov	r7, r1
 80045fa:	4620      	mov	r0, r4
 80045fc:	4629      	mov	r1, r5
 80045fe:	f7fb fde7 	bl	80001d0 <__aeabi_dsub>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4650      	mov	r0, sl
 8004608:	4659      	mov	r1, fp
 800460a:	f7fb fde1 	bl	80001d0 <__aeabi_dsub>
 800460e:	4642      	mov	r2, r8
 8004610:	464b      	mov	r3, r9
 8004612:	f7fb ff95 	bl	8000540 <__aeabi_dmul>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4630      	mov	r0, r6
 800461c:	4639      	mov	r1, r7
 800461e:	f7fb fdd7 	bl	80001d0 <__aeabi_dsub>
 8004622:	ec53 2b19 	vmov	r2, r3, d9
 8004626:	f7fb ff8b 	bl	8000540 <__aeabi_dmul>
 800462a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800462e:	ec41 0b18 	vmov	d8, r0, r1
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	f7fb ff83 	bl	8000540 <__aeabi_dmul>
 800463a:	a37d      	add	r3, pc, #500	; (adr r3, 8004830 <__ieee754_pow+0x6f0>)
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	4604      	mov	r4, r0
 8004642:	460d      	mov	r5, r1
 8004644:	f7fb ff7c 	bl	8000540 <__aeabi_dmul>
 8004648:	a37b      	add	r3, pc, #492	; (adr r3, 8004838 <__ieee754_pow+0x6f8>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f7fb fdc1 	bl	80001d4 <__adddf3>
 8004652:	4622      	mov	r2, r4
 8004654:	462b      	mov	r3, r5
 8004656:	f7fb ff73 	bl	8000540 <__aeabi_dmul>
 800465a:	a379      	add	r3, pc, #484	; (adr r3, 8004840 <__ieee754_pow+0x700>)
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f7fb fdb8 	bl	80001d4 <__adddf3>
 8004664:	4622      	mov	r2, r4
 8004666:	462b      	mov	r3, r5
 8004668:	f7fb ff6a 	bl	8000540 <__aeabi_dmul>
 800466c:	a376      	add	r3, pc, #472	; (adr r3, 8004848 <__ieee754_pow+0x708>)
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f7fb fdaf 	bl	80001d4 <__adddf3>
 8004676:	4622      	mov	r2, r4
 8004678:	462b      	mov	r3, r5
 800467a:	f7fb ff61 	bl	8000540 <__aeabi_dmul>
 800467e:	a374      	add	r3, pc, #464	; (adr r3, 8004850 <__ieee754_pow+0x710>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fb fda6 	bl	80001d4 <__adddf3>
 8004688:	4622      	mov	r2, r4
 800468a:	462b      	mov	r3, r5
 800468c:	f7fb ff58 	bl	8000540 <__aeabi_dmul>
 8004690:	a371      	add	r3, pc, #452	; (adr r3, 8004858 <__ieee754_pow+0x718>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f7fb fd9d 	bl	80001d4 <__adddf3>
 800469a:	4622      	mov	r2, r4
 800469c:	4606      	mov	r6, r0
 800469e:	460f      	mov	r7, r1
 80046a0:	462b      	mov	r3, r5
 80046a2:	4620      	mov	r0, r4
 80046a4:	4629      	mov	r1, r5
 80046a6:	f7fb ff4b 	bl	8000540 <__aeabi_dmul>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4630      	mov	r0, r6
 80046b0:	4639      	mov	r1, r7
 80046b2:	f7fb ff45 	bl	8000540 <__aeabi_dmul>
 80046b6:	4642      	mov	r2, r8
 80046b8:	4604      	mov	r4, r0
 80046ba:	460d      	mov	r5, r1
 80046bc:	464b      	mov	r3, r9
 80046be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046c2:	f7fb fd87 	bl	80001d4 <__adddf3>
 80046c6:	ec53 2b18 	vmov	r2, r3, d8
 80046ca:	f7fb ff39 	bl	8000540 <__aeabi_dmul>
 80046ce:	4622      	mov	r2, r4
 80046d0:	462b      	mov	r3, r5
 80046d2:	f7fb fd7f 	bl	80001d4 <__adddf3>
 80046d6:	4642      	mov	r2, r8
 80046d8:	4682      	mov	sl, r0
 80046da:	468b      	mov	fp, r1
 80046dc:	464b      	mov	r3, r9
 80046de:	4640      	mov	r0, r8
 80046e0:	4649      	mov	r1, r9
 80046e2:	f7fb ff2d 	bl	8000540 <__aeabi_dmul>
 80046e6:	4b6c      	ldr	r3, [pc, #432]	; (8004898 <__ieee754_pow+0x758>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	4606      	mov	r6, r0
 80046ec:	460f      	mov	r7, r1
 80046ee:	f7fb fd71 	bl	80001d4 <__adddf3>
 80046f2:	4652      	mov	r2, sl
 80046f4:	465b      	mov	r3, fp
 80046f6:	f7fb fd6d 	bl	80001d4 <__adddf3>
 80046fa:	9c04      	ldr	r4, [sp, #16]
 80046fc:	460d      	mov	r5, r1
 80046fe:	4622      	mov	r2, r4
 8004700:	460b      	mov	r3, r1
 8004702:	4640      	mov	r0, r8
 8004704:	4649      	mov	r1, r9
 8004706:	f7fb ff1b 	bl	8000540 <__aeabi_dmul>
 800470a:	4b63      	ldr	r3, [pc, #396]	; (8004898 <__ieee754_pow+0x758>)
 800470c:	4680      	mov	r8, r0
 800470e:	4689      	mov	r9, r1
 8004710:	2200      	movs	r2, #0
 8004712:	4620      	mov	r0, r4
 8004714:	4629      	mov	r1, r5
 8004716:	f7fb fd5b 	bl	80001d0 <__aeabi_dsub>
 800471a:	4632      	mov	r2, r6
 800471c:	463b      	mov	r3, r7
 800471e:	f7fb fd57 	bl	80001d0 <__aeabi_dsub>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4650      	mov	r0, sl
 8004728:	4659      	mov	r1, fp
 800472a:	f7fb fd51 	bl	80001d0 <__aeabi_dsub>
 800472e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004732:	f7fb ff05 	bl	8000540 <__aeabi_dmul>
 8004736:	4622      	mov	r2, r4
 8004738:	4606      	mov	r6, r0
 800473a:	460f      	mov	r7, r1
 800473c:	462b      	mov	r3, r5
 800473e:	ec51 0b18 	vmov	r0, r1, d8
 8004742:	f7fb fefd 	bl	8000540 <__aeabi_dmul>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4630      	mov	r0, r6
 800474c:	4639      	mov	r1, r7
 800474e:	f7fb fd41 	bl	80001d4 <__adddf3>
 8004752:	4606      	mov	r6, r0
 8004754:	460f      	mov	r7, r1
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4640      	mov	r0, r8
 800475c:	4649      	mov	r1, r9
 800475e:	f7fb fd39 	bl	80001d4 <__adddf3>
 8004762:	9c04      	ldr	r4, [sp, #16]
 8004764:	a33e      	add	r3, pc, #248	; (adr r3, 8004860 <__ieee754_pow+0x720>)
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	4620      	mov	r0, r4
 800476c:	460d      	mov	r5, r1
 800476e:	f7fb fee7 	bl	8000540 <__aeabi_dmul>
 8004772:	4642      	mov	r2, r8
 8004774:	ec41 0b18 	vmov	d8, r0, r1
 8004778:	464b      	mov	r3, r9
 800477a:	4620      	mov	r0, r4
 800477c:	4629      	mov	r1, r5
 800477e:	f7fb fd27 	bl	80001d0 <__aeabi_dsub>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4630      	mov	r0, r6
 8004788:	4639      	mov	r1, r7
 800478a:	f7fb fd21 	bl	80001d0 <__aeabi_dsub>
 800478e:	a336      	add	r3, pc, #216	; (adr r3, 8004868 <__ieee754_pow+0x728>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f7fb fed4 	bl	8000540 <__aeabi_dmul>
 8004798:	a335      	add	r3, pc, #212	; (adr r3, 8004870 <__ieee754_pow+0x730>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	4606      	mov	r6, r0
 80047a0:	460f      	mov	r7, r1
 80047a2:	4620      	mov	r0, r4
 80047a4:	4629      	mov	r1, r5
 80047a6:	f7fb fecb 	bl	8000540 <__aeabi_dmul>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4630      	mov	r0, r6
 80047b0:	4639      	mov	r1, r7
 80047b2:	f7fb fd0f 	bl	80001d4 <__adddf3>
 80047b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047b8:	4b38      	ldr	r3, [pc, #224]	; (800489c <__ieee754_pow+0x75c>)
 80047ba:	4413      	add	r3, r2
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f7fb fd08 	bl	80001d4 <__adddf3>
 80047c4:	4682      	mov	sl, r0
 80047c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047c8:	468b      	mov	fp, r1
 80047ca:	f7fb fe4f 	bl	800046c <__aeabi_i2d>
 80047ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047d0:	4b33      	ldr	r3, [pc, #204]	; (80048a0 <__ieee754_pow+0x760>)
 80047d2:	4413      	add	r3, r2
 80047d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047d8:	4606      	mov	r6, r0
 80047da:	460f      	mov	r7, r1
 80047dc:	4652      	mov	r2, sl
 80047de:	465b      	mov	r3, fp
 80047e0:	ec51 0b18 	vmov	r0, r1, d8
 80047e4:	f7fb fcf6 	bl	80001d4 <__adddf3>
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	f7fb fcf2 	bl	80001d4 <__adddf3>
 80047f0:	4632      	mov	r2, r6
 80047f2:	463b      	mov	r3, r7
 80047f4:	f7fb fcee 	bl	80001d4 <__adddf3>
 80047f8:	9c04      	ldr	r4, [sp, #16]
 80047fa:	4632      	mov	r2, r6
 80047fc:	463b      	mov	r3, r7
 80047fe:	4620      	mov	r0, r4
 8004800:	460d      	mov	r5, r1
 8004802:	f7fb fce5 	bl	80001d0 <__aeabi_dsub>
 8004806:	4642      	mov	r2, r8
 8004808:	464b      	mov	r3, r9
 800480a:	f7fb fce1 	bl	80001d0 <__aeabi_dsub>
 800480e:	ec53 2b18 	vmov	r2, r3, d8
 8004812:	f7fb fcdd 	bl	80001d0 <__aeabi_dsub>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4650      	mov	r0, sl
 800481c:	4659      	mov	r1, fp
 800481e:	e606      	b.n	800442e <__ieee754_pow+0x2ee>
 8004820:	2401      	movs	r4, #1
 8004822:	e6a0      	b.n	8004566 <__ieee754_pow+0x426>
 8004824:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004878 <__ieee754_pow+0x738>
 8004828:	e60d      	b.n	8004446 <__ieee754_pow+0x306>
 800482a:	bf00      	nop
 800482c:	f3af 8000 	nop.w
 8004830:	4a454eef 	.word	0x4a454eef
 8004834:	3fca7e28 	.word	0x3fca7e28
 8004838:	93c9db65 	.word	0x93c9db65
 800483c:	3fcd864a 	.word	0x3fcd864a
 8004840:	a91d4101 	.word	0xa91d4101
 8004844:	3fd17460 	.word	0x3fd17460
 8004848:	518f264d 	.word	0x518f264d
 800484c:	3fd55555 	.word	0x3fd55555
 8004850:	db6fabff 	.word	0xdb6fabff
 8004854:	3fdb6db6 	.word	0x3fdb6db6
 8004858:	33333303 	.word	0x33333303
 800485c:	3fe33333 	.word	0x3fe33333
 8004860:	e0000000 	.word	0xe0000000
 8004864:	3feec709 	.word	0x3feec709
 8004868:	dc3a03fd 	.word	0xdc3a03fd
 800486c:	3feec709 	.word	0x3feec709
 8004870:	145b01f5 	.word	0x145b01f5
 8004874:	be3e2fe0 	.word	0xbe3e2fe0
 8004878:	00000000 	.word	0x00000000
 800487c:	3ff00000 	.word	0x3ff00000
 8004880:	7ff00000 	.word	0x7ff00000
 8004884:	43400000 	.word	0x43400000
 8004888:	0003988e 	.word	0x0003988e
 800488c:	000bb679 	.word	0x000bb679
 8004890:	08005e48 	.word	0x08005e48
 8004894:	3ff00000 	.word	0x3ff00000
 8004898:	40080000 	.word	0x40080000
 800489c:	08005e68 	.word	0x08005e68
 80048a0:	08005e58 	.word	0x08005e58
 80048a4:	a3b5      	add	r3, pc, #724	; (adr r3, 8004b7c <__ieee754_pow+0xa3c>)
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	4640      	mov	r0, r8
 80048ac:	4649      	mov	r1, r9
 80048ae:	f7fb fc91 	bl	80001d4 <__adddf3>
 80048b2:	4622      	mov	r2, r4
 80048b4:	ec41 0b1a 	vmov	d10, r0, r1
 80048b8:	462b      	mov	r3, r5
 80048ba:	4630      	mov	r0, r6
 80048bc:	4639      	mov	r1, r7
 80048be:	f7fb fc87 	bl	80001d0 <__aeabi_dsub>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	ec51 0b1a 	vmov	r0, r1, d10
 80048ca:	f7fc f8c9 	bl	8000a60 <__aeabi_dcmpgt>
 80048ce:	2800      	cmp	r0, #0
 80048d0:	f47f adf8 	bne.w	80044c4 <__ieee754_pow+0x384>
 80048d4:	4aa4      	ldr	r2, [pc, #656]	; (8004b68 <__ieee754_pow+0xa28>)
 80048d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80048da:	4293      	cmp	r3, r2
 80048dc:	f340 810b 	ble.w	8004af6 <__ieee754_pow+0x9b6>
 80048e0:	151b      	asrs	r3, r3, #20
 80048e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80048e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80048ea:	fa4a f303 	asr.w	r3, sl, r3
 80048ee:	445b      	add	r3, fp
 80048f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80048f4:	4e9d      	ldr	r6, [pc, #628]	; (8004b6c <__ieee754_pow+0xa2c>)
 80048f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80048fa:	4116      	asrs	r6, r2
 80048fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004900:	2000      	movs	r0, #0
 8004902:	ea23 0106 	bic.w	r1, r3, r6
 8004906:	f1c2 0214 	rsb	r2, r2, #20
 800490a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800490e:	fa4a fa02 	asr.w	sl, sl, r2
 8004912:	f1bb 0f00 	cmp.w	fp, #0
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4620      	mov	r0, r4
 800491c:	4629      	mov	r1, r5
 800491e:	bfb8      	it	lt
 8004920:	f1ca 0a00 	rsblt	sl, sl, #0
 8004924:	f7fb fc54 	bl	80001d0 <__aeabi_dsub>
 8004928:	ec41 0b19 	vmov	d9, r0, r1
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	ec51 0b19 	vmov	r0, r1, d9
 8004934:	f7fb fc4e 	bl	80001d4 <__adddf3>
 8004938:	2400      	movs	r4, #0
 800493a:	a379      	add	r3, pc, #484	; (adr r3, 8004b20 <__ieee754_pow+0x9e0>)
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	4620      	mov	r0, r4
 8004942:	460d      	mov	r5, r1
 8004944:	f7fb fdfc 	bl	8000540 <__aeabi_dmul>
 8004948:	ec53 2b19 	vmov	r2, r3, d9
 800494c:	4606      	mov	r6, r0
 800494e:	460f      	mov	r7, r1
 8004950:	4620      	mov	r0, r4
 8004952:	4629      	mov	r1, r5
 8004954:	f7fb fc3c 	bl	80001d0 <__aeabi_dsub>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4640      	mov	r0, r8
 800495e:	4649      	mov	r1, r9
 8004960:	f7fb fc36 	bl	80001d0 <__aeabi_dsub>
 8004964:	a370      	add	r3, pc, #448	; (adr r3, 8004b28 <__ieee754_pow+0x9e8>)
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f7fb fde9 	bl	8000540 <__aeabi_dmul>
 800496e:	a370      	add	r3, pc, #448	; (adr r3, 8004b30 <__ieee754_pow+0x9f0>)
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	4680      	mov	r8, r0
 8004976:	4689      	mov	r9, r1
 8004978:	4620      	mov	r0, r4
 800497a:	4629      	mov	r1, r5
 800497c:	f7fb fde0 	bl	8000540 <__aeabi_dmul>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4640      	mov	r0, r8
 8004986:	4649      	mov	r1, r9
 8004988:	f7fb fc24 	bl	80001d4 <__adddf3>
 800498c:	4604      	mov	r4, r0
 800498e:	460d      	mov	r5, r1
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4630      	mov	r0, r6
 8004996:	4639      	mov	r1, r7
 8004998:	f7fb fc1c 	bl	80001d4 <__adddf3>
 800499c:	4632      	mov	r2, r6
 800499e:	463b      	mov	r3, r7
 80049a0:	4680      	mov	r8, r0
 80049a2:	4689      	mov	r9, r1
 80049a4:	f7fb fc14 	bl	80001d0 <__aeabi_dsub>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4620      	mov	r0, r4
 80049ae:	4629      	mov	r1, r5
 80049b0:	f7fb fc0e 	bl	80001d0 <__aeabi_dsub>
 80049b4:	4642      	mov	r2, r8
 80049b6:	4606      	mov	r6, r0
 80049b8:	460f      	mov	r7, r1
 80049ba:	464b      	mov	r3, r9
 80049bc:	4640      	mov	r0, r8
 80049be:	4649      	mov	r1, r9
 80049c0:	f7fb fdbe 	bl	8000540 <__aeabi_dmul>
 80049c4:	a35c      	add	r3, pc, #368	; (adr r3, 8004b38 <__ieee754_pow+0x9f8>)
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	4604      	mov	r4, r0
 80049cc:	460d      	mov	r5, r1
 80049ce:	f7fb fdb7 	bl	8000540 <__aeabi_dmul>
 80049d2:	a35b      	add	r3, pc, #364	; (adr r3, 8004b40 <__ieee754_pow+0xa00>)
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	f7fb fbfa 	bl	80001d0 <__aeabi_dsub>
 80049dc:	4622      	mov	r2, r4
 80049de:	462b      	mov	r3, r5
 80049e0:	f7fb fdae 	bl	8000540 <__aeabi_dmul>
 80049e4:	a358      	add	r3, pc, #352	; (adr r3, 8004b48 <__ieee754_pow+0xa08>)
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f7fb fbf3 	bl	80001d4 <__adddf3>
 80049ee:	4622      	mov	r2, r4
 80049f0:	462b      	mov	r3, r5
 80049f2:	f7fb fda5 	bl	8000540 <__aeabi_dmul>
 80049f6:	a356      	add	r3, pc, #344	; (adr r3, 8004b50 <__ieee754_pow+0xa10>)
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f7fb fbe8 	bl	80001d0 <__aeabi_dsub>
 8004a00:	4622      	mov	r2, r4
 8004a02:	462b      	mov	r3, r5
 8004a04:	f7fb fd9c 	bl	8000540 <__aeabi_dmul>
 8004a08:	a353      	add	r3, pc, #332	; (adr r3, 8004b58 <__ieee754_pow+0xa18>)
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f7fb fbe1 	bl	80001d4 <__adddf3>
 8004a12:	4622      	mov	r2, r4
 8004a14:	462b      	mov	r3, r5
 8004a16:	f7fb fd93 	bl	8000540 <__aeabi_dmul>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4640      	mov	r0, r8
 8004a20:	4649      	mov	r1, r9
 8004a22:	f7fb fbd5 	bl	80001d0 <__aeabi_dsub>
 8004a26:	4604      	mov	r4, r0
 8004a28:	460d      	mov	r5, r1
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4640      	mov	r0, r8
 8004a30:	4649      	mov	r1, r9
 8004a32:	f7fb fd85 	bl	8000540 <__aeabi_dmul>
 8004a36:	2200      	movs	r2, #0
 8004a38:	ec41 0b19 	vmov	d9, r0, r1
 8004a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a40:	4620      	mov	r0, r4
 8004a42:	4629      	mov	r1, r5
 8004a44:	f7fb fbc4 	bl	80001d0 <__aeabi_dsub>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	ec51 0b19 	vmov	r0, r1, d9
 8004a50:	f7fb fea0 	bl	8000794 <__aeabi_ddiv>
 8004a54:	4632      	mov	r2, r6
 8004a56:	4604      	mov	r4, r0
 8004a58:	460d      	mov	r5, r1
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	4649      	mov	r1, r9
 8004a60:	f7fb fd6e 	bl	8000540 <__aeabi_dmul>
 8004a64:	4632      	mov	r2, r6
 8004a66:	463b      	mov	r3, r7
 8004a68:	f7fb fbb4 	bl	80001d4 <__adddf3>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4620      	mov	r0, r4
 8004a72:	4629      	mov	r1, r5
 8004a74:	f7fb fbac 	bl	80001d0 <__aeabi_dsub>
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	f7fb fba8 	bl	80001d0 <__aeabi_dsub>
 8004a80:	460b      	mov	r3, r1
 8004a82:	4602      	mov	r2, r0
 8004a84:	493a      	ldr	r1, [pc, #232]	; (8004b70 <__ieee754_pow+0xa30>)
 8004a86:	2000      	movs	r0, #0
 8004a88:	f7fb fba2 	bl	80001d0 <__aeabi_dsub>
 8004a8c:	e9cd 0100 	strd	r0, r1, [sp]
 8004a90:	9b01      	ldr	r3, [sp, #4]
 8004a92:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a9a:	da2f      	bge.n	8004afc <__ieee754_pow+0x9bc>
 8004a9c:	4650      	mov	r0, sl
 8004a9e:	ed9d 0b00 	vldr	d0, [sp]
 8004aa2:	f001 f921 	bl	8005ce8 <scalbn>
 8004aa6:	ec51 0b10 	vmov	r0, r1, d0
 8004aaa:	ec53 2b18 	vmov	r2, r3, d8
 8004aae:	f7ff bbe0 	b.w	8004272 <__ieee754_pow+0x132>
 8004ab2:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <__ieee754_pow+0xa34>)
 8004ab4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004ab8:	429e      	cmp	r6, r3
 8004aba:	f77f af0b 	ble.w	80048d4 <__ieee754_pow+0x794>
 8004abe:	4b2e      	ldr	r3, [pc, #184]	; (8004b78 <__ieee754_pow+0xa38>)
 8004ac0:	440b      	add	r3, r1
 8004ac2:	4303      	orrs	r3, r0
 8004ac4:	d00b      	beq.n	8004ade <__ieee754_pow+0x99e>
 8004ac6:	a326      	add	r3, pc, #152	; (adr r3, 8004b60 <__ieee754_pow+0xa20>)
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	ec51 0b18 	vmov	r0, r1, d8
 8004ad0:	f7fb fd36 	bl	8000540 <__aeabi_dmul>
 8004ad4:	a322      	add	r3, pc, #136	; (adr r3, 8004b60 <__ieee754_pow+0xa20>)
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f7ff bbca 	b.w	8004272 <__ieee754_pow+0x132>
 8004ade:	4622      	mov	r2, r4
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	f7fb fb75 	bl	80001d0 <__aeabi_dsub>
 8004ae6:	4642      	mov	r2, r8
 8004ae8:	464b      	mov	r3, r9
 8004aea:	f7fb ffaf 	bl	8000a4c <__aeabi_dcmpge>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	f43f aef0 	beq.w	80048d4 <__ieee754_pow+0x794>
 8004af4:	e7e7      	b.n	8004ac6 <__ieee754_pow+0x986>
 8004af6:	f04f 0a00 	mov.w	sl, #0
 8004afa:	e717      	b.n	800492c <__ieee754_pow+0x7ec>
 8004afc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b00:	4619      	mov	r1, r3
 8004b02:	e7d2      	b.n	8004aaa <__ieee754_pow+0x96a>
 8004b04:	491a      	ldr	r1, [pc, #104]	; (8004b70 <__ieee754_pow+0xa30>)
 8004b06:	2000      	movs	r0, #0
 8004b08:	f7ff bb9e 	b.w	8004248 <__ieee754_pow+0x108>
 8004b0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b10:	f7ff bb9a 	b.w	8004248 <__ieee754_pow+0x108>
 8004b14:	9000      	str	r0, [sp, #0]
 8004b16:	f7ff bb76 	b.w	8004206 <__ieee754_pow+0xc6>
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	f7ff bb60 	b.w	80041e0 <__ieee754_pow+0xa0>
 8004b20:	00000000 	.word	0x00000000
 8004b24:	3fe62e43 	.word	0x3fe62e43
 8004b28:	fefa39ef 	.word	0xfefa39ef
 8004b2c:	3fe62e42 	.word	0x3fe62e42
 8004b30:	0ca86c39 	.word	0x0ca86c39
 8004b34:	be205c61 	.word	0xbe205c61
 8004b38:	72bea4d0 	.word	0x72bea4d0
 8004b3c:	3e663769 	.word	0x3e663769
 8004b40:	c5d26bf1 	.word	0xc5d26bf1
 8004b44:	3ebbbd41 	.word	0x3ebbbd41
 8004b48:	af25de2c 	.word	0xaf25de2c
 8004b4c:	3f11566a 	.word	0x3f11566a
 8004b50:	16bebd93 	.word	0x16bebd93
 8004b54:	3f66c16c 	.word	0x3f66c16c
 8004b58:	5555553e 	.word	0x5555553e
 8004b5c:	3fc55555 	.word	0x3fc55555
 8004b60:	c2f8f359 	.word	0xc2f8f359
 8004b64:	01a56e1f 	.word	0x01a56e1f
 8004b68:	3fe00000 	.word	0x3fe00000
 8004b6c:	000fffff 	.word	0x000fffff
 8004b70:	3ff00000 	.word	0x3ff00000
 8004b74:	4090cbff 	.word	0x4090cbff
 8004b78:	3f6f3400 	.word	0x3f6f3400
 8004b7c:	652b82fe 	.word	0x652b82fe
 8004b80:	3c971547 	.word	0x3c971547
 8004b84:	00000000 	.word	0x00000000

08004b88 <__ieee754_rem_pio2>:
 8004b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	ed2d 8b02 	vpush	{d8}
 8004b90:	ec55 4b10 	vmov	r4, r5, d0
 8004b94:	4bca      	ldr	r3, [pc, #808]	; (8004ec0 <__ieee754_rem_pio2+0x338>)
 8004b96:	b08b      	sub	sp, #44	; 0x2c
 8004b98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004b9c:	4598      	cmp	r8, r3
 8004b9e:	4682      	mov	sl, r0
 8004ba0:	9502      	str	r5, [sp, #8]
 8004ba2:	dc08      	bgt.n	8004bb6 <__ieee754_rem_pio2+0x2e>
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	ed80 0b00 	vstr	d0, [r0]
 8004bac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004bb0:	f04f 0b00 	mov.w	fp, #0
 8004bb4:	e028      	b.n	8004c08 <__ieee754_rem_pio2+0x80>
 8004bb6:	4bc3      	ldr	r3, [pc, #780]	; (8004ec4 <__ieee754_rem_pio2+0x33c>)
 8004bb8:	4598      	cmp	r8, r3
 8004bba:	dc78      	bgt.n	8004cae <__ieee754_rem_pio2+0x126>
 8004bbc:	9b02      	ldr	r3, [sp, #8]
 8004bbe:	4ec2      	ldr	r6, [pc, #776]	; (8004ec8 <__ieee754_rem_pio2+0x340>)
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	ee10 0a10 	vmov	r0, s0
 8004bc6:	a3b0      	add	r3, pc, #704	; (adr r3, 8004e88 <__ieee754_rem_pio2+0x300>)
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	4629      	mov	r1, r5
 8004bce:	dd39      	ble.n	8004c44 <__ieee754_rem_pio2+0xbc>
 8004bd0:	f7fb fafe 	bl	80001d0 <__aeabi_dsub>
 8004bd4:	45b0      	cmp	r8, r6
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	460d      	mov	r5, r1
 8004bda:	d01b      	beq.n	8004c14 <__ieee754_rem_pio2+0x8c>
 8004bdc:	a3ac      	add	r3, pc, #688	; (adr r3, 8004e90 <__ieee754_rem_pio2+0x308>)
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	f7fb faf5 	bl	80001d0 <__aeabi_dsub>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	e9ca 2300 	strd	r2, r3, [sl]
 8004bee:	4620      	mov	r0, r4
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	f7fb faed 	bl	80001d0 <__aeabi_dsub>
 8004bf6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004e90 <__ieee754_rem_pio2+0x308>)
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f7fb fae8 	bl	80001d0 <__aeabi_dsub>
 8004c00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004c04:	f04f 0b01 	mov.w	fp, #1
 8004c08:	4658      	mov	r0, fp
 8004c0a:	b00b      	add	sp, #44	; 0x2c
 8004c0c:	ecbd 8b02 	vpop	{d8}
 8004c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c14:	a3a0      	add	r3, pc, #640	; (adr r3, 8004e98 <__ieee754_rem_pio2+0x310>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f7fb fad9 	bl	80001d0 <__aeabi_dsub>
 8004c1e:	a3a0      	add	r3, pc, #640	; (adr r3, 8004ea0 <__ieee754_rem_pio2+0x318>)
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	4604      	mov	r4, r0
 8004c26:	460d      	mov	r5, r1
 8004c28:	f7fb fad2 	bl	80001d0 <__aeabi_dsub>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	e9ca 2300 	strd	r2, r3, [sl]
 8004c34:	4620      	mov	r0, r4
 8004c36:	4629      	mov	r1, r5
 8004c38:	f7fb faca 	bl	80001d0 <__aeabi_dsub>
 8004c3c:	a398      	add	r3, pc, #608	; (adr r3, 8004ea0 <__ieee754_rem_pio2+0x318>)
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	e7db      	b.n	8004bfc <__ieee754_rem_pio2+0x74>
 8004c44:	f7fb fac6 	bl	80001d4 <__adddf3>
 8004c48:	45b0      	cmp	r8, r6
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	460d      	mov	r5, r1
 8004c4e:	d016      	beq.n	8004c7e <__ieee754_rem_pio2+0xf6>
 8004c50:	a38f      	add	r3, pc, #572	; (adr r3, 8004e90 <__ieee754_rem_pio2+0x308>)
 8004c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c56:	f7fb fabd 	bl	80001d4 <__adddf3>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	e9ca 2300 	strd	r2, r3, [sl]
 8004c62:	4620      	mov	r0, r4
 8004c64:	4629      	mov	r1, r5
 8004c66:	f7fb fab3 	bl	80001d0 <__aeabi_dsub>
 8004c6a:	a389      	add	r3, pc, #548	; (adr r3, 8004e90 <__ieee754_rem_pio2+0x308>)
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f7fb fab0 	bl	80001d4 <__adddf3>
 8004c74:	f04f 3bff 	mov.w	fp, #4294967295
 8004c78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004c7c:	e7c4      	b.n	8004c08 <__ieee754_rem_pio2+0x80>
 8004c7e:	a386      	add	r3, pc, #536	; (adr r3, 8004e98 <__ieee754_rem_pio2+0x310>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb faa6 	bl	80001d4 <__adddf3>
 8004c88:	a385      	add	r3, pc, #532	; (adr r3, 8004ea0 <__ieee754_rem_pio2+0x318>)
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	4604      	mov	r4, r0
 8004c90:	460d      	mov	r5, r1
 8004c92:	f7fb fa9f 	bl	80001d4 <__adddf3>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	e9ca 2300 	strd	r2, r3, [sl]
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	f7fb fa95 	bl	80001d0 <__aeabi_dsub>
 8004ca6:	a37e      	add	r3, pc, #504	; (adr r3, 8004ea0 <__ieee754_rem_pio2+0x318>)
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	e7e0      	b.n	8004c70 <__ieee754_rem_pio2+0xe8>
 8004cae:	4b87      	ldr	r3, [pc, #540]	; (8004ecc <__ieee754_rem_pio2+0x344>)
 8004cb0:	4598      	cmp	r8, r3
 8004cb2:	f300 80d9 	bgt.w	8004e68 <__ieee754_rem_pio2+0x2e0>
 8004cb6:	f000 feed 	bl	8005a94 <fabs>
 8004cba:	ec55 4b10 	vmov	r4, r5, d0
 8004cbe:	ee10 0a10 	vmov	r0, s0
 8004cc2:	a379      	add	r3, pc, #484	; (adr r3, 8004ea8 <__ieee754_rem_pio2+0x320>)
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f7fb fc39 	bl	8000540 <__aeabi_dmul>
 8004cce:	4b80      	ldr	r3, [pc, #512]	; (8004ed0 <__ieee754_rem_pio2+0x348>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f7fb fa7f 	bl	80001d4 <__adddf3>
 8004cd6:	f7fb fee3 	bl	8000aa0 <__aeabi_d2iz>
 8004cda:	4683      	mov	fp, r0
 8004cdc:	f7fb fbc6 	bl	800046c <__aeabi_i2d>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	ec43 2b18 	vmov	d8, r2, r3
 8004ce8:	a367      	add	r3, pc, #412	; (adr r3, 8004e88 <__ieee754_rem_pio2+0x300>)
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f7fb fc27 	bl	8000540 <__aeabi_dmul>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	f7fb fa69 	bl	80001d0 <__aeabi_dsub>
 8004cfe:	a364      	add	r3, pc, #400	; (adr r3, 8004e90 <__ieee754_rem_pio2+0x308>)
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	4606      	mov	r6, r0
 8004d06:	460f      	mov	r7, r1
 8004d08:	ec51 0b18 	vmov	r0, r1, d8
 8004d0c:	f7fb fc18 	bl	8000540 <__aeabi_dmul>
 8004d10:	f1bb 0f1f 	cmp.w	fp, #31
 8004d14:	4604      	mov	r4, r0
 8004d16:	460d      	mov	r5, r1
 8004d18:	dc0d      	bgt.n	8004d36 <__ieee754_rem_pio2+0x1ae>
 8004d1a:	4b6e      	ldr	r3, [pc, #440]	; (8004ed4 <__ieee754_rem_pio2+0x34c>)
 8004d1c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d24:	4543      	cmp	r3, r8
 8004d26:	d006      	beq.n	8004d36 <__ieee754_rem_pio2+0x1ae>
 8004d28:	4622      	mov	r2, r4
 8004d2a:	462b      	mov	r3, r5
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	4639      	mov	r1, r7
 8004d30:	f7fb fa4e 	bl	80001d0 <__aeabi_dsub>
 8004d34:	e00f      	b.n	8004d56 <__ieee754_rem_pio2+0x1ce>
 8004d36:	462b      	mov	r3, r5
 8004d38:	4622      	mov	r2, r4
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	4639      	mov	r1, r7
 8004d3e:	f7fb fa47 	bl	80001d0 <__aeabi_dsub>
 8004d42:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004d46:	9303      	str	r3, [sp, #12]
 8004d48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004d4c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004d50:	f1b8 0f10 	cmp.w	r8, #16
 8004d54:	dc02      	bgt.n	8004d5c <__ieee754_rem_pio2+0x1d4>
 8004d56:	e9ca 0100 	strd	r0, r1, [sl]
 8004d5a:	e039      	b.n	8004dd0 <__ieee754_rem_pio2+0x248>
 8004d5c:	a34e      	add	r3, pc, #312	; (adr r3, 8004e98 <__ieee754_rem_pio2+0x310>)
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	ec51 0b18 	vmov	r0, r1, d8
 8004d66:	f7fb fbeb 	bl	8000540 <__aeabi_dmul>
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	460d      	mov	r5, r1
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4630      	mov	r0, r6
 8004d74:	4639      	mov	r1, r7
 8004d76:	f7fb fa2b 	bl	80001d0 <__aeabi_dsub>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4680      	mov	r8, r0
 8004d80:	4689      	mov	r9, r1
 8004d82:	4630      	mov	r0, r6
 8004d84:	4639      	mov	r1, r7
 8004d86:	f7fb fa23 	bl	80001d0 <__aeabi_dsub>
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	f7fb fa1f 	bl	80001d0 <__aeabi_dsub>
 8004d92:	a343      	add	r3, pc, #268	; (adr r3, 8004ea0 <__ieee754_rem_pio2+0x318>)
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	4604      	mov	r4, r0
 8004d9a:	460d      	mov	r5, r1
 8004d9c:	ec51 0b18 	vmov	r0, r1, d8
 8004da0:	f7fb fbce 	bl	8000540 <__aeabi_dmul>
 8004da4:	4622      	mov	r2, r4
 8004da6:	462b      	mov	r3, r5
 8004da8:	f7fb fa12 	bl	80001d0 <__aeabi_dsub>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4604      	mov	r4, r0
 8004db2:	460d      	mov	r5, r1
 8004db4:	4640      	mov	r0, r8
 8004db6:	4649      	mov	r1, r9
 8004db8:	f7fb fa0a 	bl	80001d0 <__aeabi_dsub>
 8004dbc:	9a03      	ldr	r2, [sp, #12]
 8004dbe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b31      	cmp	r3, #49	; 0x31
 8004dc6:	dc24      	bgt.n	8004e12 <__ieee754_rem_pio2+0x28a>
 8004dc8:	e9ca 0100 	strd	r0, r1, [sl]
 8004dcc:	4646      	mov	r6, r8
 8004dce:	464f      	mov	r7, r9
 8004dd0:	e9da 8900 	ldrd	r8, r9, [sl]
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	4642      	mov	r2, r8
 8004dd8:	464b      	mov	r3, r9
 8004dda:	4639      	mov	r1, r7
 8004ddc:	f7fb f9f8 	bl	80001d0 <__aeabi_dsub>
 8004de0:	462b      	mov	r3, r5
 8004de2:	4622      	mov	r2, r4
 8004de4:	f7fb f9f4 	bl	80001d0 <__aeabi_dsub>
 8004de8:	9b02      	ldr	r3, [sp, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004df0:	f6bf af0a 	bge.w	8004c08 <__ieee754_rem_pio2+0x80>
 8004df4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004df8:	f8ca 3004 	str.w	r3, [sl, #4]
 8004dfc:	f8ca 8000 	str.w	r8, [sl]
 8004e00:	f8ca 0008 	str.w	r0, [sl, #8]
 8004e04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e08:	f8ca 300c 	str.w	r3, [sl, #12]
 8004e0c:	f1cb 0b00 	rsb	fp, fp, #0
 8004e10:	e6fa      	b.n	8004c08 <__ieee754_rem_pio2+0x80>
 8004e12:	a327      	add	r3, pc, #156	; (adr r3, 8004eb0 <__ieee754_rem_pio2+0x328>)
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	ec51 0b18 	vmov	r0, r1, d8
 8004e1c:	f7fb fb90 	bl	8000540 <__aeabi_dmul>
 8004e20:	4604      	mov	r4, r0
 8004e22:	460d      	mov	r5, r1
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4640      	mov	r0, r8
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	f7fb f9d0 	bl	80001d0 <__aeabi_dsub>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4606      	mov	r6, r0
 8004e36:	460f      	mov	r7, r1
 8004e38:	4640      	mov	r0, r8
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	f7fb f9c8 	bl	80001d0 <__aeabi_dsub>
 8004e40:	4622      	mov	r2, r4
 8004e42:	462b      	mov	r3, r5
 8004e44:	f7fb f9c4 	bl	80001d0 <__aeabi_dsub>
 8004e48:	a31b      	add	r3, pc, #108	; (adr r3, 8004eb8 <__ieee754_rem_pio2+0x330>)
 8004e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4e:	4604      	mov	r4, r0
 8004e50:	460d      	mov	r5, r1
 8004e52:	ec51 0b18 	vmov	r0, r1, d8
 8004e56:	f7fb fb73 	bl	8000540 <__aeabi_dmul>
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	f7fb f9b7 	bl	80001d0 <__aeabi_dsub>
 8004e62:	4604      	mov	r4, r0
 8004e64:	460d      	mov	r5, r1
 8004e66:	e75f      	b.n	8004d28 <__ieee754_rem_pio2+0x1a0>
 8004e68:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <__ieee754_rem_pio2+0x350>)
 8004e6a:	4598      	cmp	r8, r3
 8004e6c:	dd36      	ble.n	8004edc <__ieee754_rem_pio2+0x354>
 8004e6e:	ee10 2a10 	vmov	r2, s0
 8004e72:	462b      	mov	r3, r5
 8004e74:	4620      	mov	r0, r4
 8004e76:	4629      	mov	r1, r5
 8004e78:	f7fb f9aa 	bl	80001d0 <__aeabi_dsub>
 8004e7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004e80:	e9ca 0100 	strd	r0, r1, [sl]
 8004e84:	e694      	b.n	8004bb0 <__ieee754_rem_pio2+0x28>
 8004e86:	bf00      	nop
 8004e88:	54400000 	.word	0x54400000
 8004e8c:	3ff921fb 	.word	0x3ff921fb
 8004e90:	1a626331 	.word	0x1a626331
 8004e94:	3dd0b461 	.word	0x3dd0b461
 8004e98:	1a600000 	.word	0x1a600000
 8004e9c:	3dd0b461 	.word	0x3dd0b461
 8004ea0:	2e037073 	.word	0x2e037073
 8004ea4:	3ba3198a 	.word	0x3ba3198a
 8004ea8:	6dc9c883 	.word	0x6dc9c883
 8004eac:	3fe45f30 	.word	0x3fe45f30
 8004eb0:	2e000000 	.word	0x2e000000
 8004eb4:	3ba3198a 	.word	0x3ba3198a
 8004eb8:	252049c1 	.word	0x252049c1
 8004ebc:	397b839a 	.word	0x397b839a
 8004ec0:	3fe921fb 	.word	0x3fe921fb
 8004ec4:	4002d97b 	.word	0x4002d97b
 8004ec8:	3ff921fb 	.word	0x3ff921fb
 8004ecc:	413921fb 	.word	0x413921fb
 8004ed0:	3fe00000 	.word	0x3fe00000
 8004ed4:	08005e78 	.word	0x08005e78
 8004ed8:	7fefffff 	.word	0x7fefffff
 8004edc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004ee0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004ee4:	ee10 0a10 	vmov	r0, s0
 8004ee8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004eec:	ee10 6a10 	vmov	r6, s0
 8004ef0:	460f      	mov	r7, r1
 8004ef2:	f7fb fdd5 	bl	8000aa0 <__aeabi_d2iz>
 8004ef6:	f7fb fab9 	bl	800046c <__aeabi_i2d>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4630      	mov	r0, r6
 8004f00:	4639      	mov	r1, r7
 8004f02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f06:	f7fb f963 	bl	80001d0 <__aeabi_dsub>
 8004f0a:	4b22      	ldr	r3, [pc, #136]	; (8004f94 <__ieee754_rem_pio2+0x40c>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f7fb fb17 	bl	8000540 <__aeabi_dmul>
 8004f12:	460f      	mov	r7, r1
 8004f14:	4606      	mov	r6, r0
 8004f16:	f7fb fdc3 	bl	8000aa0 <__aeabi_d2iz>
 8004f1a:	f7fb faa7 	bl	800046c <__aeabi_i2d>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	4630      	mov	r0, r6
 8004f24:	4639      	mov	r1, r7
 8004f26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f2a:	f7fb f951 	bl	80001d0 <__aeabi_dsub>
 8004f2e:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <__ieee754_rem_pio2+0x40c>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	f7fb fb05 	bl	8000540 <__aeabi_dmul>
 8004f36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f3a:	ad04      	add	r5, sp, #16
 8004f3c:	f04f 0803 	mov.w	r8, #3
 8004f40:	46a9      	mov	r9, r5
 8004f42:	2600      	movs	r6, #0
 8004f44:	2700      	movs	r7, #0
 8004f46:	4632      	mov	r2, r6
 8004f48:	463b      	mov	r3, r7
 8004f4a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004f4e:	46c3      	mov	fp, r8
 8004f50:	3d08      	subs	r5, #8
 8004f52:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f56:	f7fb fd5b 	bl	8000a10 <__aeabi_dcmpeq>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d1f3      	bne.n	8004f46 <__ieee754_rem_pio2+0x3be>
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <__ieee754_rem_pio2+0x410>)
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	2302      	movs	r3, #2
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	4622      	mov	r2, r4
 8004f68:	465b      	mov	r3, fp
 8004f6a:	4651      	mov	r1, sl
 8004f6c:	4648      	mov	r0, r9
 8004f6e:	f000 f993 	bl	8005298 <__kernel_rem_pio2>
 8004f72:	9b02      	ldr	r3, [sp, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	4683      	mov	fp, r0
 8004f78:	f6bf ae46 	bge.w	8004c08 <__ieee754_rem_pio2+0x80>
 8004f7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004f80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f84:	f8ca 3004 	str.w	r3, [sl, #4]
 8004f88:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004f8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f90:	e73a      	b.n	8004e08 <__ieee754_rem_pio2+0x280>
 8004f92:	bf00      	nop
 8004f94:	41700000 	.word	0x41700000
 8004f98:	08005ef8 	.word	0x08005ef8

08004f9c <__ieee754_sqrt>:
 8004f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa0:	ec55 4b10 	vmov	r4, r5, d0
 8004fa4:	4e56      	ldr	r6, [pc, #344]	; (8005100 <__ieee754_sqrt+0x164>)
 8004fa6:	43ae      	bics	r6, r5
 8004fa8:	ee10 0a10 	vmov	r0, s0
 8004fac:	ee10 3a10 	vmov	r3, s0
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	d110      	bne.n	8004fd8 <__ieee754_sqrt+0x3c>
 8004fb6:	ee10 2a10 	vmov	r2, s0
 8004fba:	462b      	mov	r3, r5
 8004fbc:	f7fb fac0 	bl	8000540 <__aeabi_dmul>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	f7fb f904 	bl	80001d4 <__adddf3>
 8004fcc:	4604      	mov	r4, r0
 8004fce:	460d      	mov	r5, r1
 8004fd0:	ec45 4b10 	vmov	d0, r4, r5
 8004fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd8:	2d00      	cmp	r5, #0
 8004fda:	dc10      	bgt.n	8004ffe <__ieee754_sqrt+0x62>
 8004fdc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004fe0:	4330      	orrs	r0, r6
 8004fe2:	d0f5      	beq.n	8004fd0 <__ieee754_sqrt+0x34>
 8004fe4:	b15d      	cbz	r5, 8004ffe <__ieee754_sqrt+0x62>
 8004fe6:	ee10 2a10 	vmov	r2, s0
 8004fea:	462b      	mov	r3, r5
 8004fec:	ee10 0a10 	vmov	r0, s0
 8004ff0:	f7fb f8ee 	bl	80001d0 <__aeabi_dsub>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	f7fb fbcc 	bl	8000794 <__aeabi_ddiv>
 8004ffc:	e7e6      	b.n	8004fcc <__ieee754_sqrt+0x30>
 8004ffe:	1509      	asrs	r1, r1, #20
 8005000:	d076      	beq.n	80050f0 <__ieee754_sqrt+0x154>
 8005002:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005006:	07ce      	lsls	r6, r1, #31
 8005008:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800500c:	bf5e      	ittt	pl
 800500e:	0fda      	lsrpl	r2, r3, #31
 8005010:	005b      	lslpl	r3, r3, #1
 8005012:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005016:	0fda      	lsrs	r2, r3, #31
 8005018:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800501c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005020:	2000      	movs	r0, #0
 8005022:	106d      	asrs	r5, r5, #1
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	f04f 0e16 	mov.w	lr, #22
 800502a:	4684      	mov	ip, r0
 800502c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005030:	eb0c 0401 	add.w	r4, ip, r1
 8005034:	4294      	cmp	r4, r2
 8005036:	bfde      	ittt	le
 8005038:	1b12      	suble	r2, r2, r4
 800503a:	eb04 0c01 	addle.w	ip, r4, r1
 800503e:	1840      	addle	r0, r0, r1
 8005040:	0052      	lsls	r2, r2, #1
 8005042:	f1be 0e01 	subs.w	lr, lr, #1
 8005046:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800504a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800504e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005052:	d1ed      	bne.n	8005030 <__ieee754_sqrt+0x94>
 8005054:	4671      	mov	r1, lr
 8005056:	2720      	movs	r7, #32
 8005058:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800505c:	4562      	cmp	r2, ip
 800505e:	eb04 060e 	add.w	r6, r4, lr
 8005062:	dc02      	bgt.n	800506a <__ieee754_sqrt+0xce>
 8005064:	d113      	bne.n	800508e <__ieee754_sqrt+0xf2>
 8005066:	429e      	cmp	r6, r3
 8005068:	d811      	bhi.n	800508e <__ieee754_sqrt+0xf2>
 800506a:	2e00      	cmp	r6, #0
 800506c:	eb06 0e04 	add.w	lr, r6, r4
 8005070:	da43      	bge.n	80050fa <__ieee754_sqrt+0x15e>
 8005072:	f1be 0f00 	cmp.w	lr, #0
 8005076:	db40      	blt.n	80050fa <__ieee754_sqrt+0x15e>
 8005078:	f10c 0801 	add.w	r8, ip, #1
 800507c:	eba2 020c 	sub.w	r2, r2, ip
 8005080:	429e      	cmp	r6, r3
 8005082:	bf88      	it	hi
 8005084:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005088:	1b9b      	subs	r3, r3, r6
 800508a:	4421      	add	r1, r4
 800508c:	46c4      	mov	ip, r8
 800508e:	0052      	lsls	r2, r2, #1
 8005090:	3f01      	subs	r7, #1
 8005092:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005096:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800509a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800509e:	d1dd      	bne.n	800505c <__ieee754_sqrt+0xc0>
 80050a0:	4313      	orrs	r3, r2
 80050a2:	d006      	beq.n	80050b2 <__ieee754_sqrt+0x116>
 80050a4:	1c4c      	adds	r4, r1, #1
 80050a6:	bf13      	iteet	ne
 80050a8:	3101      	addne	r1, #1
 80050aa:	3001      	addeq	r0, #1
 80050ac:	4639      	moveq	r1, r7
 80050ae:	f021 0101 	bicne.w	r1, r1, #1
 80050b2:	1043      	asrs	r3, r0, #1
 80050b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80050b8:	0849      	lsrs	r1, r1, #1
 80050ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80050be:	07c2      	lsls	r2, r0, #31
 80050c0:	bf48      	it	mi
 80050c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80050c6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80050ca:	460c      	mov	r4, r1
 80050cc:	463d      	mov	r5, r7
 80050ce:	e77f      	b.n	8004fd0 <__ieee754_sqrt+0x34>
 80050d0:	0ada      	lsrs	r2, r3, #11
 80050d2:	3815      	subs	r0, #21
 80050d4:	055b      	lsls	r3, r3, #21
 80050d6:	2a00      	cmp	r2, #0
 80050d8:	d0fa      	beq.n	80050d0 <__ieee754_sqrt+0x134>
 80050da:	02d7      	lsls	r7, r2, #11
 80050dc:	d50a      	bpl.n	80050f4 <__ieee754_sqrt+0x158>
 80050de:	f1c1 0420 	rsb	r4, r1, #32
 80050e2:	fa23 f404 	lsr.w	r4, r3, r4
 80050e6:	1e4d      	subs	r5, r1, #1
 80050e8:	408b      	lsls	r3, r1
 80050ea:	4322      	orrs	r2, r4
 80050ec:	1b41      	subs	r1, r0, r5
 80050ee:	e788      	b.n	8005002 <__ieee754_sqrt+0x66>
 80050f0:	4608      	mov	r0, r1
 80050f2:	e7f0      	b.n	80050d6 <__ieee754_sqrt+0x13a>
 80050f4:	0052      	lsls	r2, r2, #1
 80050f6:	3101      	adds	r1, #1
 80050f8:	e7ef      	b.n	80050da <__ieee754_sqrt+0x13e>
 80050fa:	46e0      	mov	r8, ip
 80050fc:	e7be      	b.n	800507c <__ieee754_sqrt+0xe0>
 80050fe:	bf00      	nop
 8005100:	7ff00000 	.word	0x7ff00000
 8005104:	00000000 	.word	0x00000000

08005108 <__kernel_cos>:
 8005108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510c:	ec57 6b10 	vmov	r6, r7, d0
 8005110:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005114:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005118:	ed8d 1b00 	vstr	d1, [sp]
 800511c:	da07      	bge.n	800512e <__kernel_cos+0x26>
 800511e:	ee10 0a10 	vmov	r0, s0
 8005122:	4639      	mov	r1, r7
 8005124:	f7fb fcbc 	bl	8000aa0 <__aeabi_d2iz>
 8005128:	2800      	cmp	r0, #0
 800512a:	f000 8088 	beq.w	800523e <__kernel_cos+0x136>
 800512e:	4632      	mov	r2, r6
 8005130:	463b      	mov	r3, r7
 8005132:	4630      	mov	r0, r6
 8005134:	4639      	mov	r1, r7
 8005136:	f7fb fa03 	bl	8000540 <__aeabi_dmul>
 800513a:	4b51      	ldr	r3, [pc, #324]	; (8005280 <__kernel_cos+0x178>)
 800513c:	2200      	movs	r2, #0
 800513e:	4604      	mov	r4, r0
 8005140:	460d      	mov	r5, r1
 8005142:	f7fb f9fd 	bl	8000540 <__aeabi_dmul>
 8005146:	a340      	add	r3, pc, #256	; (adr r3, 8005248 <__kernel_cos+0x140>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	4682      	mov	sl, r0
 800514e:	468b      	mov	fp, r1
 8005150:	4620      	mov	r0, r4
 8005152:	4629      	mov	r1, r5
 8005154:	f7fb f9f4 	bl	8000540 <__aeabi_dmul>
 8005158:	a33d      	add	r3, pc, #244	; (adr r3, 8005250 <__kernel_cos+0x148>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb f839 	bl	80001d4 <__adddf3>
 8005162:	4622      	mov	r2, r4
 8005164:	462b      	mov	r3, r5
 8005166:	f7fb f9eb 	bl	8000540 <__aeabi_dmul>
 800516a:	a33b      	add	r3, pc, #236	; (adr r3, 8005258 <__kernel_cos+0x150>)
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f7fb f82e 	bl	80001d0 <__aeabi_dsub>
 8005174:	4622      	mov	r2, r4
 8005176:	462b      	mov	r3, r5
 8005178:	f7fb f9e2 	bl	8000540 <__aeabi_dmul>
 800517c:	a338      	add	r3, pc, #224	; (adr r3, 8005260 <__kernel_cos+0x158>)
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f7fb f827 	bl	80001d4 <__adddf3>
 8005186:	4622      	mov	r2, r4
 8005188:	462b      	mov	r3, r5
 800518a:	f7fb f9d9 	bl	8000540 <__aeabi_dmul>
 800518e:	a336      	add	r3, pc, #216	; (adr r3, 8005268 <__kernel_cos+0x160>)
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	f7fb f81c 	bl	80001d0 <__aeabi_dsub>
 8005198:	4622      	mov	r2, r4
 800519a:	462b      	mov	r3, r5
 800519c:	f7fb f9d0 	bl	8000540 <__aeabi_dmul>
 80051a0:	a333      	add	r3, pc, #204	; (adr r3, 8005270 <__kernel_cos+0x168>)
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	f7fb f815 	bl	80001d4 <__adddf3>
 80051aa:	4622      	mov	r2, r4
 80051ac:	462b      	mov	r3, r5
 80051ae:	f7fb f9c7 	bl	8000540 <__aeabi_dmul>
 80051b2:	4622      	mov	r2, r4
 80051b4:	462b      	mov	r3, r5
 80051b6:	f7fb f9c3 	bl	8000540 <__aeabi_dmul>
 80051ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051be:	4604      	mov	r4, r0
 80051c0:	460d      	mov	r5, r1
 80051c2:	4630      	mov	r0, r6
 80051c4:	4639      	mov	r1, r7
 80051c6:	f7fb f9bb 	bl	8000540 <__aeabi_dmul>
 80051ca:	460b      	mov	r3, r1
 80051cc:	4602      	mov	r2, r0
 80051ce:	4629      	mov	r1, r5
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7fa fffd 	bl	80001d0 <__aeabi_dsub>
 80051d6:	4b2b      	ldr	r3, [pc, #172]	; (8005284 <__kernel_cos+0x17c>)
 80051d8:	4598      	cmp	r8, r3
 80051da:	4606      	mov	r6, r0
 80051dc:	460f      	mov	r7, r1
 80051de:	dc10      	bgt.n	8005202 <__kernel_cos+0xfa>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4650      	mov	r0, sl
 80051e6:	4659      	mov	r1, fp
 80051e8:	f7fa fff2 	bl	80001d0 <__aeabi_dsub>
 80051ec:	460b      	mov	r3, r1
 80051ee:	4926      	ldr	r1, [pc, #152]	; (8005288 <__kernel_cos+0x180>)
 80051f0:	4602      	mov	r2, r0
 80051f2:	2000      	movs	r0, #0
 80051f4:	f7fa ffec 	bl	80001d0 <__aeabi_dsub>
 80051f8:	ec41 0b10 	vmov	d0, r0, r1
 80051fc:	b003      	add	sp, #12
 80051fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005202:	4b22      	ldr	r3, [pc, #136]	; (800528c <__kernel_cos+0x184>)
 8005204:	4920      	ldr	r1, [pc, #128]	; (8005288 <__kernel_cos+0x180>)
 8005206:	4598      	cmp	r8, r3
 8005208:	bfcc      	ite	gt
 800520a:	4d21      	ldrgt	r5, [pc, #132]	; (8005290 <__kernel_cos+0x188>)
 800520c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005210:	2400      	movs	r4, #0
 8005212:	4622      	mov	r2, r4
 8005214:	462b      	mov	r3, r5
 8005216:	2000      	movs	r0, #0
 8005218:	f7fa ffda 	bl	80001d0 <__aeabi_dsub>
 800521c:	4622      	mov	r2, r4
 800521e:	4680      	mov	r8, r0
 8005220:	4689      	mov	r9, r1
 8005222:	462b      	mov	r3, r5
 8005224:	4650      	mov	r0, sl
 8005226:	4659      	mov	r1, fp
 8005228:	f7fa ffd2 	bl	80001d0 <__aeabi_dsub>
 800522c:	4632      	mov	r2, r6
 800522e:	463b      	mov	r3, r7
 8005230:	f7fa ffce 	bl	80001d0 <__aeabi_dsub>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4640      	mov	r0, r8
 800523a:	4649      	mov	r1, r9
 800523c:	e7da      	b.n	80051f4 <__kernel_cos+0xec>
 800523e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005278 <__kernel_cos+0x170>
 8005242:	e7db      	b.n	80051fc <__kernel_cos+0xf4>
 8005244:	f3af 8000 	nop.w
 8005248:	be8838d4 	.word	0xbe8838d4
 800524c:	bda8fae9 	.word	0xbda8fae9
 8005250:	bdb4b1c4 	.word	0xbdb4b1c4
 8005254:	3e21ee9e 	.word	0x3e21ee9e
 8005258:	809c52ad 	.word	0x809c52ad
 800525c:	3e927e4f 	.word	0x3e927e4f
 8005260:	19cb1590 	.word	0x19cb1590
 8005264:	3efa01a0 	.word	0x3efa01a0
 8005268:	16c15177 	.word	0x16c15177
 800526c:	3f56c16c 	.word	0x3f56c16c
 8005270:	5555554c 	.word	0x5555554c
 8005274:	3fa55555 	.word	0x3fa55555
 8005278:	00000000 	.word	0x00000000
 800527c:	3ff00000 	.word	0x3ff00000
 8005280:	3fe00000 	.word	0x3fe00000
 8005284:	3fd33332 	.word	0x3fd33332
 8005288:	3ff00000 	.word	0x3ff00000
 800528c:	3fe90000 	.word	0x3fe90000
 8005290:	3fd20000 	.word	0x3fd20000
 8005294:	00000000 	.word	0x00000000

08005298 <__kernel_rem_pio2>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	ed2d 8b02 	vpush	{d8}
 80052a0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80052a4:	f112 0f14 	cmn.w	r2, #20
 80052a8:	9308      	str	r3, [sp, #32]
 80052aa:	9101      	str	r1, [sp, #4]
 80052ac:	4bc6      	ldr	r3, [pc, #792]	; (80055c8 <__kernel_rem_pio2+0x330>)
 80052ae:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80052b0:	9009      	str	r0, [sp, #36]	; 0x24
 80052b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80052b6:	9304      	str	r3, [sp, #16]
 80052b8:	9b08      	ldr	r3, [sp, #32]
 80052ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80052be:	bfa8      	it	ge
 80052c0:	1ed4      	subge	r4, r2, #3
 80052c2:	9306      	str	r3, [sp, #24]
 80052c4:	bfb2      	itee	lt
 80052c6:	2400      	movlt	r4, #0
 80052c8:	2318      	movge	r3, #24
 80052ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80052ce:	f06f 0317 	mvn.w	r3, #23
 80052d2:	fb04 3303 	mla	r3, r4, r3, r3
 80052d6:	eb03 0a02 	add.w	sl, r3, r2
 80052da:	9b04      	ldr	r3, [sp, #16]
 80052dc:	9a06      	ldr	r2, [sp, #24]
 80052de:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80055b8 <__kernel_rem_pio2+0x320>
 80052e2:	eb03 0802 	add.w	r8, r3, r2
 80052e6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80052e8:	1aa7      	subs	r7, r4, r2
 80052ea:	ae20      	add	r6, sp, #128	; 0x80
 80052ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80052f0:	2500      	movs	r5, #0
 80052f2:	4545      	cmp	r5, r8
 80052f4:	dd18      	ble.n	8005328 <__kernel_rem_pio2+0x90>
 80052f6:	9b08      	ldr	r3, [sp, #32]
 80052f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80052fc:	aa20      	add	r2, sp, #128	; 0x80
 80052fe:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80055b8 <__kernel_rem_pio2+0x320>
 8005302:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005306:	f1c3 0301 	rsb	r3, r3, #1
 800530a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800530e:	9307      	str	r3, [sp, #28]
 8005310:	9b07      	ldr	r3, [sp, #28]
 8005312:	9a04      	ldr	r2, [sp, #16]
 8005314:	4443      	add	r3, r8
 8005316:	429a      	cmp	r2, r3
 8005318:	db2f      	blt.n	800537a <__kernel_rem_pio2+0xe2>
 800531a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800531e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005322:	462f      	mov	r7, r5
 8005324:	2600      	movs	r6, #0
 8005326:	e01b      	b.n	8005360 <__kernel_rem_pio2+0xc8>
 8005328:	42ef      	cmn	r7, r5
 800532a:	d407      	bmi.n	800533c <__kernel_rem_pio2+0xa4>
 800532c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005330:	f7fb f89c 	bl	800046c <__aeabi_i2d>
 8005334:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005338:	3501      	adds	r5, #1
 800533a:	e7da      	b.n	80052f2 <__kernel_rem_pio2+0x5a>
 800533c:	ec51 0b18 	vmov	r0, r1, d8
 8005340:	e7f8      	b.n	8005334 <__kernel_rem_pio2+0x9c>
 8005342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005346:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800534a:	f7fb f8f9 	bl	8000540 <__aeabi_dmul>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005356:	f7fa ff3d 	bl	80001d4 <__adddf3>
 800535a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800535e:	3601      	adds	r6, #1
 8005360:	9b06      	ldr	r3, [sp, #24]
 8005362:	429e      	cmp	r6, r3
 8005364:	f1a7 0708 	sub.w	r7, r7, #8
 8005368:	ddeb      	ble.n	8005342 <__kernel_rem_pio2+0xaa>
 800536a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800536e:	3508      	adds	r5, #8
 8005370:	ecab 7b02 	vstmia	fp!, {d7}
 8005374:	f108 0801 	add.w	r8, r8, #1
 8005378:	e7ca      	b.n	8005310 <__kernel_rem_pio2+0x78>
 800537a:	9b04      	ldr	r3, [sp, #16]
 800537c:	aa0c      	add	r2, sp, #48	; 0x30
 800537e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005382:	930b      	str	r3, [sp, #44]	; 0x2c
 8005384:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005386:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800538a:	9c04      	ldr	r4, [sp, #16]
 800538c:	930a      	str	r3, [sp, #40]	; 0x28
 800538e:	ab98      	add	r3, sp, #608	; 0x260
 8005390:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005394:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005398:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800539c:	f8cd b008 	str.w	fp, [sp, #8]
 80053a0:	4625      	mov	r5, r4
 80053a2:	2d00      	cmp	r5, #0
 80053a4:	dc78      	bgt.n	8005498 <__kernel_rem_pio2+0x200>
 80053a6:	ec47 6b10 	vmov	d0, r6, r7
 80053aa:	4650      	mov	r0, sl
 80053ac:	f000 fc9c 	bl	8005ce8 <scalbn>
 80053b0:	ec57 6b10 	vmov	r6, r7, d0
 80053b4:	2200      	movs	r2, #0
 80053b6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80053ba:	ee10 0a10 	vmov	r0, s0
 80053be:	4639      	mov	r1, r7
 80053c0:	f7fb f8be 	bl	8000540 <__aeabi_dmul>
 80053c4:	ec41 0b10 	vmov	d0, r0, r1
 80053c8:	f000 fb7a 	bl	8005ac0 <floor>
 80053cc:	4b7f      	ldr	r3, [pc, #508]	; (80055cc <__kernel_rem_pio2+0x334>)
 80053ce:	ec51 0b10 	vmov	r0, r1, d0
 80053d2:	2200      	movs	r2, #0
 80053d4:	f7fb f8b4 	bl	8000540 <__aeabi_dmul>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4630      	mov	r0, r6
 80053de:	4639      	mov	r1, r7
 80053e0:	f7fa fef6 	bl	80001d0 <__aeabi_dsub>
 80053e4:	460f      	mov	r7, r1
 80053e6:	4606      	mov	r6, r0
 80053e8:	f7fb fb5a 	bl	8000aa0 <__aeabi_d2iz>
 80053ec:	9007      	str	r0, [sp, #28]
 80053ee:	f7fb f83d 	bl	800046c <__aeabi_i2d>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4630      	mov	r0, r6
 80053f8:	4639      	mov	r1, r7
 80053fa:	f7fa fee9 	bl	80001d0 <__aeabi_dsub>
 80053fe:	f1ba 0f00 	cmp.w	sl, #0
 8005402:	4606      	mov	r6, r0
 8005404:	460f      	mov	r7, r1
 8005406:	dd70      	ble.n	80054ea <__kernel_rem_pio2+0x252>
 8005408:	1e62      	subs	r2, r4, #1
 800540a:	ab0c      	add	r3, sp, #48	; 0x30
 800540c:	9d07      	ldr	r5, [sp, #28]
 800540e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005412:	f1ca 0118 	rsb	r1, sl, #24
 8005416:	fa40 f301 	asr.w	r3, r0, r1
 800541a:	441d      	add	r5, r3
 800541c:	408b      	lsls	r3, r1
 800541e:	1ac0      	subs	r0, r0, r3
 8005420:	ab0c      	add	r3, sp, #48	; 0x30
 8005422:	9507      	str	r5, [sp, #28]
 8005424:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005428:	f1ca 0317 	rsb	r3, sl, #23
 800542c:	fa40 f303 	asr.w	r3, r0, r3
 8005430:	9302      	str	r3, [sp, #8]
 8005432:	9b02      	ldr	r3, [sp, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	dd66      	ble.n	8005506 <__kernel_rem_pio2+0x26e>
 8005438:	9b07      	ldr	r3, [sp, #28]
 800543a:	2200      	movs	r2, #0
 800543c:	3301      	adds	r3, #1
 800543e:	9307      	str	r3, [sp, #28]
 8005440:	4615      	mov	r5, r2
 8005442:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005446:	4294      	cmp	r4, r2
 8005448:	f300 8099 	bgt.w	800557e <__kernel_rem_pio2+0x2e6>
 800544c:	f1ba 0f00 	cmp.w	sl, #0
 8005450:	dd07      	ble.n	8005462 <__kernel_rem_pio2+0x1ca>
 8005452:	f1ba 0f01 	cmp.w	sl, #1
 8005456:	f000 80a5 	beq.w	80055a4 <__kernel_rem_pio2+0x30c>
 800545a:	f1ba 0f02 	cmp.w	sl, #2
 800545e:	f000 80c1 	beq.w	80055e4 <__kernel_rem_pio2+0x34c>
 8005462:	9b02      	ldr	r3, [sp, #8]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d14e      	bne.n	8005506 <__kernel_rem_pio2+0x26e>
 8005468:	4632      	mov	r2, r6
 800546a:	463b      	mov	r3, r7
 800546c:	4958      	ldr	r1, [pc, #352]	; (80055d0 <__kernel_rem_pio2+0x338>)
 800546e:	2000      	movs	r0, #0
 8005470:	f7fa feae 	bl	80001d0 <__aeabi_dsub>
 8005474:	4606      	mov	r6, r0
 8005476:	460f      	mov	r7, r1
 8005478:	2d00      	cmp	r5, #0
 800547a:	d044      	beq.n	8005506 <__kernel_rem_pio2+0x26e>
 800547c:	4650      	mov	r0, sl
 800547e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80055c0 <__kernel_rem_pio2+0x328>
 8005482:	f000 fc31 	bl	8005ce8 <scalbn>
 8005486:	4630      	mov	r0, r6
 8005488:	4639      	mov	r1, r7
 800548a:	ec53 2b10 	vmov	r2, r3, d0
 800548e:	f7fa fe9f 	bl	80001d0 <__aeabi_dsub>
 8005492:	4606      	mov	r6, r0
 8005494:	460f      	mov	r7, r1
 8005496:	e036      	b.n	8005506 <__kernel_rem_pio2+0x26e>
 8005498:	4b4e      	ldr	r3, [pc, #312]	; (80055d4 <__kernel_rem_pio2+0x33c>)
 800549a:	2200      	movs	r2, #0
 800549c:	4630      	mov	r0, r6
 800549e:	4639      	mov	r1, r7
 80054a0:	f7fb f84e 	bl	8000540 <__aeabi_dmul>
 80054a4:	f7fb fafc 	bl	8000aa0 <__aeabi_d2iz>
 80054a8:	f7fa ffe0 	bl	800046c <__aeabi_i2d>
 80054ac:	4b4a      	ldr	r3, [pc, #296]	; (80055d8 <__kernel_rem_pio2+0x340>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	4680      	mov	r8, r0
 80054b2:	4689      	mov	r9, r1
 80054b4:	f7fb f844 	bl	8000540 <__aeabi_dmul>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4630      	mov	r0, r6
 80054be:	4639      	mov	r1, r7
 80054c0:	f7fa fe86 	bl	80001d0 <__aeabi_dsub>
 80054c4:	f7fb faec 	bl	8000aa0 <__aeabi_d2iz>
 80054c8:	9b02      	ldr	r3, [sp, #8]
 80054ca:	f843 0b04 	str.w	r0, [r3], #4
 80054ce:	3d01      	subs	r5, #1
 80054d0:	9302      	str	r3, [sp, #8]
 80054d2:	ab70      	add	r3, sp, #448	; 0x1c0
 80054d4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	4640      	mov	r0, r8
 80054de:	4649      	mov	r1, r9
 80054e0:	f7fa fe78 	bl	80001d4 <__adddf3>
 80054e4:	4606      	mov	r6, r0
 80054e6:	460f      	mov	r7, r1
 80054e8:	e75b      	b.n	80053a2 <__kernel_rem_pio2+0x10a>
 80054ea:	d105      	bne.n	80054f8 <__kernel_rem_pio2+0x260>
 80054ec:	1e63      	subs	r3, r4, #1
 80054ee:	aa0c      	add	r2, sp, #48	; 0x30
 80054f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80054f4:	15c3      	asrs	r3, r0, #23
 80054f6:	e79b      	b.n	8005430 <__kernel_rem_pio2+0x198>
 80054f8:	4b38      	ldr	r3, [pc, #224]	; (80055dc <__kernel_rem_pio2+0x344>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	f7fb faa6 	bl	8000a4c <__aeabi_dcmpge>
 8005500:	2800      	cmp	r0, #0
 8005502:	d139      	bne.n	8005578 <__kernel_rem_pio2+0x2e0>
 8005504:	9002      	str	r0, [sp, #8]
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	4630      	mov	r0, r6
 800550c:	4639      	mov	r1, r7
 800550e:	f7fb fa7f 	bl	8000a10 <__aeabi_dcmpeq>
 8005512:	2800      	cmp	r0, #0
 8005514:	f000 80b4 	beq.w	8005680 <__kernel_rem_pio2+0x3e8>
 8005518:	f104 3bff 	add.w	fp, r4, #4294967295
 800551c:	465b      	mov	r3, fp
 800551e:	2200      	movs	r2, #0
 8005520:	9904      	ldr	r1, [sp, #16]
 8005522:	428b      	cmp	r3, r1
 8005524:	da65      	bge.n	80055f2 <__kernel_rem_pio2+0x35a>
 8005526:	2a00      	cmp	r2, #0
 8005528:	d07b      	beq.n	8005622 <__kernel_rem_pio2+0x38a>
 800552a:	ab0c      	add	r3, sp, #48	; 0x30
 800552c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005530:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 80a0 	beq.w	800567a <__kernel_rem_pio2+0x3e2>
 800553a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80055c0 <__kernel_rem_pio2+0x328>
 800553e:	4650      	mov	r0, sl
 8005540:	f000 fbd2 	bl	8005ce8 <scalbn>
 8005544:	4f23      	ldr	r7, [pc, #140]	; (80055d4 <__kernel_rem_pio2+0x33c>)
 8005546:	ec55 4b10 	vmov	r4, r5, d0
 800554a:	46d8      	mov	r8, fp
 800554c:	2600      	movs	r6, #0
 800554e:	f1b8 0f00 	cmp.w	r8, #0
 8005552:	f280 80cf 	bge.w	80056f4 <__kernel_rem_pio2+0x45c>
 8005556:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80055b8 <__kernel_rem_pio2+0x320>
 800555a:	465f      	mov	r7, fp
 800555c:	f04f 0800 	mov.w	r8, #0
 8005560:	2f00      	cmp	r7, #0
 8005562:	f2c0 80fd 	blt.w	8005760 <__kernel_rem_pio2+0x4c8>
 8005566:	ab70      	add	r3, sp, #448	; 0x1c0
 8005568:	f8df a074 	ldr.w	sl, [pc, #116]	; 80055e0 <__kernel_rem_pio2+0x348>
 800556c:	ec55 4b18 	vmov	r4, r5, d8
 8005570:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005574:	2600      	movs	r6, #0
 8005576:	e0e5      	b.n	8005744 <__kernel_rem_pio2+0x4ac>
 8005578:	2302      	movs	r3, #2
 800557a:	9302      	str	r3, [sp, #8]
 800557c:	e75c      	b.n	8005438 <__kernel_rem_pio2+0x1a0>
 800557e:	f8db 3000 	ldr.w	r3, [fp]
 8005582:	b955      	cbnz	r5, 800559a <__kernel_rem_pio2+0x302>
 8005584:	b123      	cbz	r3, 8005590 <__kernel_rem_pio2+0x2f8>
 8005586:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800558a:	f8cb 3000 	str.w	r3, [fp]
 800558e:	2301      	movs	r3, #1
 8005590:	3201      	adds	r2, #1
 8005592:	f10b 0b04 	add.w	fp, fp, #4
 8005596:	461d      	mov	r5, r3
 8005598:	e755      	b.n	8005446 <__kernel_rem_pio2+0x1ae>
 800559a:	1acb      	subs	r3, r1, r3
 800559c:	f8cb 3000 	str.w	r3, [fp]
 80055a0:	462b      	mov	r3, r5
 80055a2:	e7f5      	b.n	8005590 <__kernel_rem_pio2+0x2f8>
 80055a4:	1e62      	subs	r2, r4, #1
 80055a6:	ab0c      	add	r3, sp, #48	; 0x30
 80055a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80055b0:	a90c      	add	r1, sp, #48	; 0x30
 80055b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80055b6:	e754      	b.n	8005462 <__kernel_rem_pio2+0x1ca>
	...
 80055c4:	3ff00000 	.word	0x3ff00000
 80055c8:	08006040 	.word	0x08006040
 80055cc:	40200000 	.word	0x40200000
 80055d0:	3ff00000 	.word	0x3ff00000
 80055d4:	3e700000 	.word	0x3e700000
 80055d8:	41700000 	.word	0x41700000
 80055dc:	3fe00000 	.word	0x3fe00000
 80055e0:	08006000 	.word	0x08006000
 80055e4:	1e62      	subs	r2, r4, #1
 80055e6:	ab0c      	add	r3, sp, #48	; 0x30
 80055e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80055f0:	e7de      	b.n	80055b0 <__kernel_rem_pio2+0x318>
 80055f2:	a90c      	add	r1, sp, #48	; 0x30
 80055f4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	430a      	orrs	r2, r1
 80055fc:	e790      	b.n	8005520 <__kernel_rem_pio2+0x288>
 80055fe:	3301      	adds	r3, #1
 8005600:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005604:	2900      	cmp	r1, #0
 8005606:	d0fa      	beq.n	80055fe <__kernel_rem_pio2+0x366>
 8005608:	9a08      	ldr	r2, [sp, #32]
 800560a:	18e3      	adds	r3, r4, r3
 800560c:	18a6      	adds	r6, r4, r2
 800560e:	aa20      	add	r2, sp, #128	; 0x80
 8005610:	1c65      	adds	r5, r4, #1
 8005612:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005616:	9302      	str	r3, [sp, #8]
 8005618:	9b02      	ldr	r3, [sp, #8]
 800561a:	42ab      	cmp	r3, r5
 800561c:	da04      	bge.n	8005628 <__kernel_rem_pio2+0x390>
 800561e:	461c      	mov	r4, r3
 8005620:	e6b5      	b.n	800538e <__kernel_rem_pio2+0xf6>
 8005622:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005624:	2301      	movs	r3, #1
 8005626:	e7eb      	b.n	8005600 <__kernel_rem_pio2+0x368>
 8005628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800562e:	f7fa ff1d 	bl	800046c <__aeabi_i2d>
 8005632:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005638:	46b3      	mov	fp, r6
 800563a:	461c      	mov	r4, r3
 800563c:	2700      	movs	r7, #0
 800563e:	f04f 0800 	mov.w	r8, #0
 8005642:	f04f 0900 	mov.w	r9, #0
 8005646:	9b06      	ldr	r3, [sp, #24]
 8005648:	429f      	cmp	r7, r3
 800564a:	dd06      	ble.n	800565a <__kernel_rem_pio2+0x3c2>
 800564c:	ab70      	add	r3, sp, #448	; 0x1c0
 800564e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005652:	e9c3 8900 	strd	r8, r9, [r3]
 8005656:	3501      	adds	r5, #1
 8005658:	e7de      	b.n	8005618 <__kernel_rem_pio2+0x380>
 800565a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800565e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005662:	f7fa ff6d 	bl	8000540 <__aeabi_dmul>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4640      	mov	r0, r8
 800566c:	4649      	mov	r1, r9
 800566e:	f7fa fdb1 	bl	80001d4 <__adddf3>
 8005672:	3701      	adds	r7, #1
 8005674:	4680      	mov	r8, r0
 8005676:	4689      	mov	r9, r1
 8005678:	e7e5      	b.n	8005646 <__kernel_rem_pio2+0x3ae>
 800567a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800567e:	e754      	b.n	800552a <__kernel_rem_pio2+0x292>
 8005680:	ec47 6b10 	vmov	d0, r6, r7
 8005684:	f1ca 0000 	rsb	r0, sl, #0
 8005688:	f000 fb2e 	bl	8005ce8 <scalbn>
 800568c:	ec57 6b10 	vmov	r6, r7, d0
 8005690:	4b9f      	ldr	r3, [pc, #636]	; (8005910 <__kernel_rem_pio2+0x678>)
 8005692:	ee10 0a10 	vmov	r0, s0
 8005696:	2200      	movs	r2, #0
 8005698:	4639      	mov	r1, r7
 800569a:	f7fb f9d7 	bl	8000a4c <__aeabi_dcmpge>
 800569e:	b300      	cbz	r0, 80056e2 <__kernel_rem_pio2+0x44a>
 80056a0:	4b9c      	ldr	r3, [pc, #624]	; (8005914 <__kernel_rem_pio2+0x67c>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	4630      	mov	r0, r6
 80056a6:	4639      	mov	r1, r7
 80056a8:	f7fa ff4a 	bl	8000540 <__aeabi_dmul>
 80056ac:	f7fb f9f8 	bl	8000aa0 <__aeabi_d2iz>
 80056b0:	4605      	mov	r5, r0
 80056b2:	f7fa fedb 	bl	800046c <__aeabi_i2d>
 80056b6:	4b96      	ldr	r3, [pc, #600]	; (8005910 <__kernel_rem_pio2+0x678>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	f7fa ff41 	bl	8000540 <__aeabi_dmul>
 80056be:	460b      	mov	r3, r1
 80056c0:	4602      	mov	r2, r0
 80056c2:	4639      	mov	r1, r7
 80056c4:	4630      	mov	r0, r6
 80056c6:	f7fa fd83 	bl	80001d0 <__aeabi_dsub>
 80056ca:	f7fb f9e9 	bl	8000aa0 <__aeabi_d2iz>
 80056ce:	f104 0b01 	add.w	fp, r4, #1
 80056d2:	ab0c      	add	r3, sp, #48	; 0x30
 80056d4:	f10a 0a18 	add.w	sl, sl, #24
 80056d8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80056dc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80056e0:	e72b      	b.n	800553a <__kernel_rem_pio2+0x2a2>
 80056e2:	4630      	mov	r0, r6
 80056e4:	4639      	mov	r1, r7
 80056e6:	f7fb f9db 	bl	8000aa0 <__aeabi_d2iz>
 80056ea:	ab0c      	add	r3, sp, #48	; 0x30
 80056ec:	46a3      	mov	fp, r4
 80056ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80056f2:	e722      	b.n	800553a <__kernel_rem_pio2+0x2a2>
 80056f4:	ab70      	add	r3, sp, #448	; 0x1c0
 80056f6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80056fa:	ab0c      	add	r3, sp, #48	; 0x30
 80056fc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005700:	f7fa feb4 	bl	800046c <__aeabi_i2d>
 8005704:	4622      	mov	r2, r4
 8005706:	462b      	mov	r3, r5
 8005708:	f7fa ff1a 	bl	8000540 <__aeabi_dmul>
 800570c:	4632      	mov	r2, r6
 800570e:	e9c9 0100 	strd	r0, r1, [r9]
 8005712:	463b      	mov	r3, r7
 8005714:	4620      	mov	r0, r4
 8005716:	4629      	mov	r1, r5
 8005718:	f7fa ff12 	bl	8000540 <__aeabi_dmul>
 800571c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005720:	4604      	mov	r4, r0
 8005722:	460d      	mov	r5, r1
 8005724:	e713      	b.n	800554e <__kernel_rem_pio2+0x2b6>
 8005726:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800572a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800572e:	f7fa ff07 	bl	8000540 <__aeabi_dmul>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4620      	mov	r0, r4
 8005738:	4629      	mov	r1, r5
 800573a:	f7fa fd4b 	bl	80001d4 <__adddf3>
 800573e:	3601      	adds	r6, #1
 8005740:	4604      	mov	r4, r0
 8005742:	460d      	mov	r5, r1
 8005744:	9b04      	ldr	r3, [sp, #16]
 8005746:	429e      	cmp	r6, r3
 8005748:	dc01      	bgt.n	800574e <__kernel_rem_pio2+0x4b6>
 800574a:	45b0      	cmp	r8, r6
 800574c:	daeb      	bge.n	8005726 <__kernel_rem_pio2+0x48e>
 800574e:	ab48      	add	r3, sp, #288	; 0x120
 8005750:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005754:	e9c3 4500 	strd	r4, r5, [r3]
 8005758:	3f01      	subs	r7, #1
 800575a:	f108 0801 	add.w	r8, r8, #1
 800575e:	e6ff      	b.n	8005560 <__kernel_rem_pio2+0x2c8>
 8005760:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005762:	2b02      	cmp	r3, #2
 8005764:	dc0b      	bgt.n	800577e <__kernel_rem_pio2+0x4e6>
 8005766:	2b00      	cmp	r3, #0
 8005768:	dc6e      	bgt.n	8005848 <__kernel_rem_pio2+0x5b0>
 800576a:	d045      	beq.n	80057f8 <__kernel_rem_pio2+0x560>
 800576c:	9b07      	ldr	r3, [sp, #28]
 800576e:	f003 0007 	and.w	r0, r3, #7
 8005772:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005776:	ecbd 8b02 	vpop	{d8}
 800577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005780:	2b03      	cmp	r3, #3
 8005782:	d1f3      	bne.n	800576c <__kernel_rem_pio2+0x4d4>
 8005784:	ab48      	add	r3, sp, #288	; 0x120
 8005786:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800578a:	46d0      	mov	r8, sl
 800578c:	46d9      	mov	r9, fp
 800578e:	f1b9 0f00 	cmp.w	r9, #0
 8005792:	f1a8 0808 	sub.w	r8, r8, #8
 8005796:	dc64      	bgt.n	8005862 <__kernel_rem_pio2+0x5ca>
 8005798:	465c      	mov	r4, fp
 800579a:	2c01      	cmp	r4, #1
 800579c:	f1aa 0a08 	sub.w	sl, sl, #8
 80057a0:	dc7e      	bgt.n	80058a0 <__kernel_rem_pio2+0x608>
 80057a2:	2000      	movs	r0, #0
 80057a4:	2100      	movs	r1, #0
 80057a6:	f1bb 0f01 	cmp.w	fp, #1
 80057aa:	f300 8097 	bgt.w	80058dc <__kernel_rem_pio2+0x644>
 80057ae:	9b02      	ldr	r3, [sp, #8]
 80057b0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80057b4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f040 8099 	bne.w	80058f0 <__kernel_rem_pio2+0x658>
 80057be:	9b01      	ldr	r3, [sp, #4]
 80057c0:	e9c3 5600 	strd	r5, r6, [r3]
 80057c4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80057c8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80057cc:	e7ce      	b.n	800576c <__kernel_rem_pio2+0x4d4>
 80057ce:	ab48      	add	r3, sp, #288	; 0x120
 80057d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	f7fa fcfc 	bl	80001d4 <__adddf3>
 80057dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057e0:	f1bb 0f00 	cmp.w	fp, #0
 80057e4:	daf3      	bge.n	80057ce <__kernel_rem_pio2+0x536>
 80057e6:	9b02      	ldr	r3, [sp, #8]
 80057e8:	b113      	cbz	r3, 80057f0 <__kernel_rem_pio2+0x558>
 80057ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057ee:	4619      	mov	r1, r3
 80057f0:	9b01      	ldr	r3, [sp, #4]
 80057f2:	e9c3 0100 	strd	r0, r1, [r3]
 80057f6:	e7b9      	b.n	800576c <__kernel_rem_pio2+0x4d4>
 80057f8:	2000      	movs	r0, #0
 80057fa:	2100      	movs	r1, #0
 80057fc:	e7f0      	b.n	80057e0 <__kernel_rem_pio2+0x548>
 80057fe:	ab48      	add	r3, sp, #288	; 0x120
 8005800:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f7fa fce4 	bl	80001d4 <__adddf3>
 800580c:	3c01      	subs	r4, #1
 800580e:	2c00      	cmp	r4, #0
 8005810:	daf5      	bge.n	80057fe <__kernel_rem_pio2+0x566>
 8005812:	9b02      	ldr	r3, [sp, #8]
 8005814:	b1e3      	cbz	r3, 8005850 <__kernel_rem_pio2+0x5b8>
 8005816:	4602      	mov	r2, r0
 8005818:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800581c:	9c01      	ldr	r4, [sp, #4]
 800581e:	e9c4 2300 	strd	r2, r3, [r4]
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800582a:	f7fa fcd1 	bl	80001d0 <__aeabi_dsub>
 800582e:	ad4a      	add	r5, sp, #296	; 0x128
 8005830:	2401      	movs	r4, #1
 8005832:	45a3      	cmp	fp, r4
 8005834:	da0f      	bge.n	8005856 <__kernel_rem_pio2+0x5be>
 8005836:	9b02      	ldr	r3, [sp, #8]
 8005838:	b113      	cbz	r3, 8005840 <__kernel_rem_pio2+0x5a8>
 800583a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800583e:	4619      	mov	r1, r3
 8005840:	9b01      	ldr	r3, [sp, #4]
 8005842:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005846:	e791      	b.n	800576c <__kernel_rem_pio2+0x4d4>
 8005848:	465c      	mov	r4, fp
 800584a:	2000      	movs	r0, #0
 800584c:	2100      	movs	r1, #0
 800584e:	e7de      	b.n	800580e <__kernel_rem_pio2+0x576>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	e7e2      	b.n	800581c <__kernel_rem_pio2+0x584>
 8005856:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800585a:	f7fa fcbb 	bl	80001d4 <__adddf3>
 800585e:	3401      	adds	r4, #1
 8005860:	e7e7      	b.n	8005832 <__kernel_rem_pio2+0x59a>
 8005862:	e9d8 4500 	ldrd	r4, r5, [r8]
 8005866:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800586a:	4620      	mov	r0, r4
 800586c:	4632      	mov	r2, r6
 800586e:	463b      	mov	r3, r7
 8005870:	4629      	mov	r1, r5
 8005872:	f7fa fcaf 	bl	80001d4 <__adddf3>
 8005876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4620      	mov	r0, r4
 8005880:	4629      	mov	r1, r5
 8005882:	f7fa fca5 	bl	80001d0 <__aeabi_dsub>
 8005886:	4632      	mov	r2, r6
 8005888:	463b      	mov	r3, r7
 800588a:	f7fa fca3 	bl	80001d4 <__adddf3>
 800588e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005892:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8005896:	ed88 7b00 	vstr	d7, [r8]
 800589a:	f109 39ff 	add.w	r9, r9, #4294967295
 800589e:	e776      	b.n	800578e <__kernel_rem_pio2+0x4f6>
 80058a0:	e9da 8900 	ldrd	r8, r9, [sl]
 80058a4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80058a8:	4640      	mov	r0, r8
 80058aa:	4632      	mov	r2, r6
 80058ac:	463b      	mov	r3, r7
 80058ae:	4649      	mov	r1, r9
 80058b0:	f7fa fc90 	bl	80001d4 <__adddf3>
 80058b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4640      	mov	r0, r8
 80058be:	4649      	mov	r1, r9
 80058c0:	f7fa fc86 	bl	80001d0 <__aeabi_dsub>
 80058c4:	4632      	mov	r2, r6
 80058c6:	463b      	mov	r3, r7
 80058c8:	f7fa fc84 	bl	80001d4 <__adddf3>
 80058cc:	ed9d 7b04 	vldr	d7, [sp, #16]
 80058d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80058d4:	ed8a 7b00 	vstr	d7, [sl]
 80058d8:	3c01      	subs	r4, #1
 80058da:	e75e      	b.n	800579a <__kernel_rem_pio2+0x502>
 80058dc:	ab48      	add	r3, sp, #288	; 0x120
 80058de:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fc75 	bl	80001d4 <__adddf3>
 80058ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058ee:	e75a      	b.n	80057a6 <__kernel_rem_pio2+0x50e>
 80058f0:	9b01      	ldr	r3, [sp, #4]
 80058f2:	9a01      	ldr	r2, [sp, #4]
 80058f4:	601d      	str	r5, [r3, #0]
 80058f6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80058fa:	605c      	str	r4, [r3, #4]
 80058fc:	609f      	str	r7, [r3, #8]
 80058fe:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005902:	60d3      	str	r3, [r2, #12]
 8005904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005908:	6110      	str	r0, [r2, #16]
 800590a:	6153      	str	r3, [r2, #20]
 800590c:	e72e      	b.n	800576c <__kernel_rem_pio2+0x4d4>
 800590e:	bf00      	nop
 8005910:	41700000 	.word	0x41700000
 8005914:	3e700000 	.word	0x3e700000

08005918 <__kernel_sin>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	ed2d 8b04 	vpush	{d8-d9}
 8005920:	eeb0 8a41 	vmov.f32	s16, s2
 8005924:	eef0 8a61 	vmov.f32	s17, s3
 8005928:	ec55 4b10 	vmov	r4, r5, d0
 800592c:	b083      	sub	sp, #12
 800592e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005932:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005936:	9001      	str	r0, [sp, #4]
 8005938:	da06      	bge.n	8005948 <__kernel_sin+0x30>
 800593a:	ee10 0a10 	vmov	r0, s0
 800593e:	4629      	mov	r1, r5
 8005940:	f7fb f8ae 	bl	8000aa0 <__aeabi_d2iz>
 8005944:	2800      	cmp	r0, #0
 8005946:	d051      	beq.n	80059ec <__kernel_sin+0xd4>
 8005948:	4622      	mov	r2, r4
 800594a:	462b      	mov	r3, r5
 800594c:	4620      	mov	r0, r4
 800594e:	4629      	mov	r1, r5
 8005950:	f7fa fdf6 	bl	8000540 <__aeabi_dmul>
 8005954:	4682      	mov	sl, r0
 8005956:	468b      	mov	fp, r1
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4620      	mov	r0, r4
 800595e:	4629      	mov	r1, r5
 8005960:	f7fa fdee 	bl	8000540 <__aeabi_dmul>
 8005964:	a341      	add	r3, pc, #260	; (adr r3, 8005a6c <__kernel_sin+0x154>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	4680      	mov	r8, r0
 800596c:	4689      	mov	r9, r1
 800596e:	4650      	mov	r0, sl
 8005970:	4659      	mov	r1, fp
 8005972:	f7fa fde5 	bl	8000540 <__aeabi_dmul>
 8005976:	a33f      	add	r3, pc, #252	; (adr r3, 8005a74 <__kernel_sin+0x15c>)
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	f7fa fc28 	bl	80001d0 <__aeabi_dsub>
 8005980:	4652      	mov	r2, sl
 8005982:	465b      	mov	r3, fp
 8005984:	f7fa fddc 	bl	8000540 <__aeabi_dmul>
 8005988:	a33c      	add	r3, pc, #240	; (adr r3, 8005a7c <__kernel_sin+0x164>)
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f7fa fc21 	bl	80001d4 <__adddf3>
 8005992:	4652      	mov	r2, sl
 8005994:	465b      	mov	r3, fp
 8005996:	f7fa fdd3 	bl	8000540 <__aeabi_dmul>
 800599a:	a33a      	add	r3, pc, #232	; (adr r3, 8005a84 <__kernel_sin+0x16c>)
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	f7fa fc16 	bl	80001d0 <__aeabi_dsub>
 80059a4:	4652      	mov	r2, sl
 80059a6:	465b      	mov	r3, fp
 80059a8:	f7fa fdca 	bl	8000540 <__aeabi_dmul>
 80059ac:	a337      	add	r3, pc, #220	; (adr r3, 8005a8c <__kernel_sin+0x174>)
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f7fa fc0f 	bl	80001d4 <__adddf3>
 80059b6:	9b01      	ldr	r3, [sp, #4]
 80059b8:	4606      	mov	r6, r0
 80059ba:	460f      	mov	r7, r1
 80059bc:	b9eb      	cbnz	r3, 80059fa <__kernel_sin+0xe2>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4650      	mov	r0, sl
 80059c4:	4659      	mov	r1, fp
 80059c6:	f7fa fdbb 	bl	8000540 <__aeabi_dmul>
 80059ca:	a325      	add	r3, pc, #148	; (adr r3, 8005a60 <__kernel_sin+0x148>)
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f7fa fbfe 	bl	80001d0 <__aeabi_dsub>
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	f7fa fdb2 	bl	8000540 <__aeabi_dmul>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4620      	mov	r0, r4
 80059e2:	4629      	mov	r1, r5
 80059e4:	f7fa fbf6 	bl	80001d4 <__adddf3>
 80059e8:	4604      	mov	r4, r0
 80059ea:	460d      	mov	r5, r1
 80059ec:	ec45 4b10 	vmov	d0, r4, r5
 80059f0:	b003      	add	sp, #12
 80059f2:	ecbd 8b04 	vpop	{d8-d9}
 80059f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fa:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <__kernel_sin+0x150>)
 80059fc:	ec51 0b18 	vmov	r0, r1, d8
 8005a00:	2200      	movs	r2, #0
 8005a02:	f7fa fd9d 	bl	8000540 <__aeabi_dmul>
 8005a06:	4632      	mov	r2, r6
 8005a08:	ec41 0b19 	vmov	d9, r0, r1
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4649      	mov	r1, r9
 8005a12:	f7fa fd95 	bl	8000540 <__aeabi_dmul>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	ec51 0b19 	vmov	r0, r1, d9
 8005a1e:	f7fa fbd7 	bl	80001d0 <__aeabi_dsub>
 8005a22:	4652      	mov	r2, sl
 8005a24:	465b      	mov	r3, fp
 8005a26:	f7fa fd8b 	bl	8000540 <__aeabi_dmul>
 8005a2a:	ec53 2b18 	vmov	r2, r3, d8
 8005a2e:	f7fa fbcf 	bl	80001d0 <__aeabi_dsub>
 8005a32:	a30b      	add	r3, pc, #44	; (adr r3, 8005a60 <__kernel_sin+0x148>)
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	4606      	mov	r6, r0
 8005a3a:	460f      	mov	r7, r1
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	4649      	mov	r1, r9
 8005a40:	f7fa fd7e 	bl	8000540 <__aeabi_dmul>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4630      	mov	r0, r6
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	f7fa fbc2 	bl	80001d4 <__adddf3>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4620      	mov	r0, r4
 8005a56:	4629      	mov	r1, r5
 8005a58:	f7fa fbba 	bl	80001d0 <__aeabi_dsub>
 8005a5c:	e7c4      	b.n	80059e8 <__kernel_sin+0xd0>
 8005a5e:	bf00      	nop
 8005a60:	55555549 	.word	0x55555549
 8005a64:	3fc55555 	.word	0x3fc55555
 8005a68:	3fe00000 	.word	0x3fe00000
 8005a6c:	5acfd57c 	.word	0x5acfd57c
 8005a70:	3de5d93a 	.word	0x3de5d93a
 8005a74:	8a2b9ceb 	.word	0x8a2b9ceb
 8005a78:	3e5ae5e6 	.word	0x3e5ae5e6
 8005a7c:	57b1fe7d 	.word	0x57b1fe7d
 8005a80:	3ec71de3 	.word	0x3ec71de3
 8005a84:	19c161d5 	.word	0x19c161d5
 8005a88:	3f2a01a0 	.word	0x3f2a01a0
 8005a8c:	1110f8a6 	.word	0x1110f8a6
 8005a90:	3f811111 	.word	0x3f811111

08005a94 <fabs>:
 8005a94:	ec51 0b10 	vmov	r0, r1, d0
 8005a98:	ee10 2a10 	vmov	r2, s0
 8005a9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005aa0:	ec43 2b10 	vmov	d0, r2, r3
 8005aa4:	4770      	bx	lr

08005aa6 <finite>:
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	ed8d 0b00 	vstr	d0, [sp]
 8005aac:	9801      	ldr	r0, [sp, #4]
 8005aae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005ab2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005ab6:	0fc0      	lsrs	r0, r0, #31
 8005ab8:	b002      	add	sp, #8
 8005aba:	4770      	bx	lr
 8005abc:	0000      	movs	r0, r0
	...

08005ac0 <floor>:
 8005ac0:	ec51 0b10 	vmov	r0, r1, d0
 8005ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005acc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005ad0:	2e13      	cmp	r6, #19
 8005ad2:	ee10 5a10 	vmov	r5, s0
 8005ad6:	ee10 8a10 	vmov	r8, s0
 8005ada:	460c      	mov	r4, r1
 8005adc:	dc32      	bgt.n	8005b44 <floor+0x84>
 8005ade:	2e00      	cmp	r6, #0
 8005ae0:	da14      	bge.n	8005b0c <floor+0x4c>
 8005ae2:	a333      	add	r3, pc, #204	; (adr r3, 8005bb0 <floor+0xf0>)
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f7fa fb74 	bl	80001d4 <__adddf3>
 8005aec:	2200      	movs	r2, #0
 8005aee:	2300      	movs	r3, #0
 8005af0:	f7fa ffb6 	bl	8000a60 <__aeabi_dcmpgt>
 8005af4:	b138      	cbz	r0, 8005b06 <floor+0x46>
 8005af6:	2c00      	cmp	r4, #0
 8005af8:	da57      	bge.n	8005baa <floor+0xea>
 8005afa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005afe:	431d      	orrs	r5, r3
 8005b00:	d001      	beq.n	8005b06 <floor+0x46>
 8005b02:	4c2d      	ldr	r4, [pc, #180]	; (8005bb8 <floor+0xf8>)
 8005b04:	2500      	movs	r5, #0
 8005b06:	4621      	mov	r1, r4
 8005b08:	4628      	mov	r0, r5
 8005b0a:	e025      	b.n	8005b58 <floor+0x98>
 8005b0c:	4f2b      	ldr	r7, [pc, #172]	; (8005bbc <floor+0xfc>)
 8005b0e:	4137      	asrs	r7, r6
 8005b10:	ea01 0307 	and.w	r3, r1, r7
 8005b14:	4303      	orrs	r3, r0
 8005b16:	d01f      	beq.n	8005b58 <floor+0x98>
 8005b18:	a325      	add	r3, pc, #148	; (adr r3, 8005bb0 <floor+0xf0>)
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	f7fa fb59 	bl	80001d4 <__adddf3>
 8005b22:	2200      	movs	r2, #0
 8005b24:	2300      	movs	r3, #0
 8005b26:	f7fa ff9b 	bl	8000a60 <__aeabi_dcmpgt>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d0eb      	beq.n	8005b06 <floor+0x46>
 8005b2e:	2c00      	cmp	r4, #0
 8005b30:	bfbe      	ittt	lt
 8005b32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005b36:	fa43 f606 	asrlt.w	r6, r3, r6
 8005b3a:	19a4      	addlt	r4, r4, r6
 8005b3c:	ea24 0407 	bic.w	r4, r4, r7
 8005b40:	2500      	movs	r5, #0
 8005b42:	e7e0      	b.n	8005b06 <floor+0x46>
 8005b44:	2e33      	cmp	r6, #51	; 0x33
 8005b46:	dd0b      	ble.n	8005b60 <floor+0xa0>
 8005b48:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005b4c:	d104      	bne.n	8005b58 <floor+0x98>
 8005b4e:	ee10 2a10 	vmov	r2, s0
 8005b52:	460b      	mov	r3, r1
 8005b54:	f7fa fb3e 	bl	80001d4 <__adddf3>
 8005b58:	ec41 0b10 	vmov	d0, r0, r1
 8005b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b60:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005b64:	f04f 33ff 	mov.w	r3, #4294967295
 8005b68:	fa23 f707 	lsr.w	r7, r3, r7
 8005b6c:	4207      	tst	r7, r0
 8005b6e:	d0f3      	beq.n	8005b58 <floor+0x98>
 8005b70:	a30f      	add	r3, pc, #60	; (adr r3, 8005bb0 <floor+0xf0>)
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f7fa fb2d 	bl	80001d4 <__adddf3>
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f7fa ff6f 	bl	8000a60 <__aeabi_dcmpgt>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d0bf      	beq.n	8005b06 <floor+0x46>
 8005b86:	2c00      	cmp	r4, #0
 8005b88:	da02      	bge.n	8005b90 <floor+0xd0>
 8005b8a:	2e14      	cmp	r6, #20
 8005b8c:	d103      	bne.n	8005b96 <floor+0xd6>
 8005b8e:	3401      	adds	r4, #1
 8005b90:	ea25 0507 	bic.w	r5, r5, r7
 8005b94:	e7b7      	b.n	8005b06 <floor+0x46>
 8005b96:	2301      	movs	r3, #1
 8005b98:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005b9c:	fa03 f606 	lsl.w	r6, r3, r6
 8005ba0:	4435      	add	r5, r6
 8005ba2:	4545      	cmp	r5, r8
 8005ba4:	bf38      	it	cc
 8005ba6:	18e4      	addcc	r4, r4, r3
 8005ba8:	e7f2      	b.n	8005b90 <floor+0xd0>
 8005baa:	2500      	movs	r5, #0
 8005bac:	462c      	mov	r4, r5
 8005bae:	e7aa      	b.n	8005b06 <floor+0x46>
 8005bb0:	8800759c 	.word	0x8800759c
 8005bb4:	7e37e43c 	.word	0x7e37e43c
 8005bb8:	bff00000 	.word	0xbff00000
 8005bbc:	000fffff 	.word	0x000fffff

08005bc0 <nan>:
 8005bc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005bc8 <nan+0x8>
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	00000000 	.word	0x00000000
 8005bcc:	7ff80000 	.word	0x7ff80000

08005bd0 <rint>:
 8005bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bd2:	ec51 0b10 	vmov	r0, r1, d0
 8005bd6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005bda:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005bde:	2e13      	cmp	r6, #19
 8005be0:	ee10 4a10 	vmov	r4, s0
 8005be4:	460b      	mov	r3, r1
 8005be6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005bea:	dc58      	bgt.n	8005c9e <rint+0xce>
 8005bec:	2e00      	cmp	r6, #0
 8005bee:	da2b      	bge.n	8005c48 <rint+0x78>
 8005bf0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005bf4:	4302      	orrs	r2, r0
 8005bf6:	d023      	beq.n	8005c40 <rint+0x70>
 8005bf8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005bfc:	4302      	orrs	r2, r0
 8005bfe:	4254      	negs	r4, r2
 8005c00:	4314      	orrs	r4, r2
 8005c02:	0c4b      	lsrs	r3, r1, #17
 8005c04:	0b24      	lsrs	r4, r4, #12
 8005c06:	045b      	lsls	r3, r3, #17
 8005c08:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005c0c:	ea44 0103 	orr.w	r1, r4, r3
 8005c10:	4b32      	ldr	r3, [pc, #200]	; (8005cdc <rint+0x10c>)
 8005c12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005c16:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4630      	mov	r0, r6
 8005c20:	4639      	mov	r1, r7
 8005c22:	f7fa fad7 	bl	80001d4 <__adddf3>
 8005c26:	e9cd 0100 	strd	r0, r1, [sp]
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c30:	4632      	mov	r2, r6
 8005c32:	f7fa facd 	bl	80001d0 <__aeabi_dsub>
 8005c36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c3a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005c3e:	4639      	mov	r1, r7
 8005c40:	ec41 0b10 	vmov	d0, r0, r1
 8005c44:	b003      	add	sp, #12
 8005c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c48:	4a25      	ldr	r2, [pc, #148]	; (8005ce0 <rint+0x110>)
 8005c4a:	4132      	asrs	r2, r6
 8005c4c:	ea01 0702 	and.w	r7, r1, r2
 8005c50:	4307      	orrs	r7, r0
 8005c52:	d0f5      	beq.n	8005c40 <rint+0x70>
 8005c54:	0851      	lsrs	r1, r2, #1
 8005c56:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8005c5a:	4314      	orrs	r4, r2
 8005c5c:	d00c      	beq.n	8005c78 <rint+0xa8>
 8005c5e:	ea23 0201 	bic.w	r2, r3, r1
 8005c62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c66:	2e13      	cmp	r6, #19
 8005c68:	fa43 f606 	asr.w	r6, r3, r6
 8005c6c:	bf0c      	ite	eq
 8005c6e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005c72:	2400      	movne	r4, #0
 8005c74:	ea42 0306 	orr.w	r3, r2, r6
 8005c78:	4918      	ldr	r1, [pc, #96]	; (8005cdc <rint+0x10c>)
 8005c7a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005c7e:	4622      	mov	r2, r4
 8005c80:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005c84:	4620      	mov	r0, r4
 8005c86:	4629      	mov	r1, r5
 8005c88:	f7fa faa4 	bl	80001d4 <__adddf3>
 8005c8c:	e9cd 0100 	strd	r0, r1, [sp]
 8005c90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c94:	4622      	mov	r2, r4
 8005c96:	462b      	mov	r3, r5
 8005c98:	f7fa fa9a 	bl	80001d0 <__aeabi_dsub>
 8005c9c:	e7d0      	b.n	8005c40 <rint+0x70>
 8005c9e:	2e33      	cmp	r6, #51	; 0x33
 8005ca0:	dd07      	ble.n	8005cb2 <rint+0xe2>
 8005ca2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005ca6:	d1cb      	bne.n	8005c40 <rint+0x70>
 8005ca8:	ee10 2a10 	vmov	r2, s0
 8005cac:	f7fa fa92 	bl	80001d4 <__adddf3>
 8005cb0:	e7c6      	b.n	8005c40 <rint+0x70>
 8005cb2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005cb6:	f04f 36ff 	mov.w	r6, #4294967295
 8005cba:	40d6      	lsrs	r6, r2
 8005cbc:	4230      	tst	r0, r6
 8005cbe:	d0bf      	beq.n	8005c40 <rint+0x70>
 8005cc0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8005cc4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8005cc8:	bf1f      	itttt	ne
 8005cca:	ea24 0101 	bicne.w	r1, r4, r1
 8005cce:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005cd2:	fa44 f202 	asrne.w	r2, r4, r2
 8005cd6:	ea41 0402 	orrne.w	r4, r1, r2
 8005cda:	e7cd      	b.n	8005c78 <rint+0xa8>
 8005cdc:	08006050 	.word	0x08006050
 8005ce0:	000fffff 	.word	0x000fffff
 8005ce4:	00000000 	.word	0x00000000

08005ce8 <scalbn>:
 8005ce8:	b570      	push	{r4, r5, r6, lr}
 8005cea:	ec55 4b10 	vmov	r4, r5, d0
 8005cee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005cf2:	4606      	mov	r6, r0
 8005cf4:	462b      	mov	r3, r5
 8005cf6:	b99a      	cbnz	r2, 8005d20 <scalbn+0x38>
 8005cf8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005cfc:	4323      	orrs	r3, r4
 8005cfe:	d036      	beq.n	8005d6e <scalbn+0x86>
 8005d00:	4b39      	ldr	r3, [pc, #228]	; (8005de8 <scalbn+0x100>)
 8005d02:	4629      	mov	r1, r5
 8005d04:	ee10 0a10 	vmov	r0, s0
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f7fa fc19 	bl	8000540 <__aeabi_dmul>
 8005d0e:	4b37      	ldr	r3, [pc, #220]	; (8005dec <scalbn+0x104>)
 8005d10:	429e      	cmp	r6, r3
 8005d12:	4604      	mov	r4, r0
 8005d14:	460d      	mov	r5, r1
 8005d16:	da10      	bge.n	8005d3a <scalbn+0x52>
 8005d18:	a32b      	add	r3, pc, #172	; (adr r3, 8005dc8 <scalbn+0xe0>)
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	e03a      	b.n	8005d96 <scalbn+0xae>
 8005d20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005d24:	428a      	cmp	r2, r1
 8005d26:	d10c      	bne.n	8005d42 <scalbn+0x5a>
 8005d28:	ee10 2a10 	vmov	r2, s0
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	4629      	mov	r1, r5
 8005d30:	f7fa fa50 	bl	80001d4 <__adddf3>
 8005d34:	4604      	mov	r4, r0
 8005d36:	460d      	mov	r5, r1
 8005d38:	e019      	b.n	8005d6e <scalbn+0x86>
 8005d3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d3e:	460b      	mov	r3, r1
 8005d40:	3a36      	subs	r2, #54	; 0x36
 8005d42:	4432      	add	r2, r6
 8005d44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005d48:	428a      	cmp	r2, r1
 8005d4a:	dd08      	ble.n	8005d5e <scalbn+0x76>
 8005d4c:	2d00      	cmp	r5, #0
 8005d4e:	a120      	add	r1, pc, #128	; (adr r1, 8005dd0 <scalbn+0xe8>)
 8005d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d54:	da1c      	bge.n	8005d90 <scalbn+0xa8>
 8005d56:	a120      	add	r1, pc, #128	; (adr r1, 8005dd8 <scalbn+0xf0>)
 8005d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d5c:	e018      	b.n	8005d90 <scalbn+0xa8>
 8005d5e:	2a00      	cmp	r2, #0
 8005d60:	dd08      	ble.n	8005d74 <scalbn+0x8c>
 8005d62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005d6e:	ec45 4b10 	vmov	d0, r4, r5
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005d78:	da19      	bge.n	8005dae <scalbn+0xc6>
 8005d7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005d7e:	429e      	cmp	r6, r3
 8005d80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005d84:	dd0a      	ble.n	8005d9c <scalbn+0xb4>
 8005d86:	a112      	add	r1, pc, #72	; (adr r1, 8005dd0 <scalbn+0xe8>)
 8005d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e2      	bne.n	8005d56 <scalbn+0x6e>
 8005d90:	a30f      	add	r3, pc, #60	; (adr r3, 8005dd0 <scalbn+0xe8>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f7fa fbd3 	bl	8000540 <__aeabi_dmul>
 8005d9a:	e7cb      	b.n	8005d34 <scalbn+0x4c>
 8005d9c:	a10a      	add	r1, pc, #40	; (adr r1, 8005dc8 <scalbn+0xe0>)
 8005d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0b8      	beq.n	8005d18 <scalbn+0x30>
 8005da6:	a10e      	add	r1, pc, #56	; (adr r1, 8005de0 <scalbn+0xf8>)
 8005da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dac:	e7b4      	b.n	8005d18 <scalbn+0x30>
 8005dae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005db2:	3236      	adds	r2, #54	; 0x36
 8005db4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005db8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <scalbn+0x108>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	e7e8      	b.n	8005d96 <scalbn+0xae>
 8005dc4:	f3af 8000 	nop.w
 8005dc8:	c2f8f359 	.word	0xc2f8f359
 8005dcc:	01a56e1f 	.word	0x01a56e1f
 8005dd0:	8800759c 	.word	0x8800759c
 8005dd4:	7e37e43c 	.word	0x7e37e43c
 8005dd8:	8800759c 	.word	0x8800759c
 8005ddc:	fe37e43c 	.word	0xfe37e43c
 8005de0:	c2f8f359 	.word	0xc2f8f359
 8005de4:	81a56e1f 	.word	0x81a56e1f
 8005de8:	43500000 	.word	0x43500000
 8005dec:	ffff3cb0 	.word	0xffff3cb0
 8005df0:	3c900000 	.word	0x3c900000

08005df4 <_init>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	bf00      	nop
 8005df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfa:	bc08      	pop	{r3}
 8005dfc:	469e      	mov	lr, r3
 8005dfe:	4770      	bx	lr

08005e00 <_fini>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr
